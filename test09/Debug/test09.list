
test09.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e4c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006f5c  08006f5c  00007f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070b0  080070b0  00009060  2**0
                  CONTENTS
  4 .ARM          00000008  080070b0  080070b0  000080b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070b8  080070b8  00009060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070b8  080070b8  000080b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080070bc  080070bc  000080bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080070c0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c24  20000060  08007120  00009060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c84  08007120  00009c84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191e7  00000000  00000000  00009089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003995  00000000  00000000  00022270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  00025c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001104  00000000  00000000  000271e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000383d  00000000  00000000  000282ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c5a  00000000  00000000  0002bb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099b95  00000000  00000000  00044783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000060a4  00000000  00000000  000de35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000e4400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f44 	.word	0x08006f44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08006f44 	.word	0x08006f44

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fb9a 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f842 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8f8 	bl	8000360 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000170:	f000 f88e 	bl	8000290 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000174:	f000 f8ca 	bl	800030c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000178:	f002 ff52 	bl	8003020 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 800017c:	4a11      	ldr	r2, [pc, #68]	@ (80001c4 <main+0x64>)
 800017e:	2101      	movs	r1, #1
 8000180:	2001      	movs	r0, #1
 8000182:	f003 f842 	bl	800320a <osSemaphoreNew>
 8000186:	4603      	mov	r3, r0
 8000188:	4a0f      	ldr	r2, [pc, #60]	@ (80001c8 <main+0x68>)
 800018a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of DefaultTask */
  DefaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &DefaultTask_attributes);
 800018c:	4a0f      	ldr	r2, [pc, #60]	@ (80001cc <main+0x6c>)
 800018e:	2100      	movs	r1, #0
 8000190:	480f      	ldr	r0, [pc, #60]	@ (80001d0 <main+0x70>)
 8000192:	f002 ff8d 	bl	80030b0 <osThreadNew>
 8000196:	4603      	mov	r3, r0
 8000198:	4a0e      	ldr	r2, [pc, #56]	@ (80001d4 <main+0x74>)
 800019a:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 800019c:	4a0e      	ldr	r2, [pc, #56]	@ (80001d8 <main+0x78>)
 800019e:	2100      	movs	r1, #0
 80001a0:	480e      	ldr	r0, [pc, #56]	@ (80001dc <main+0x7c>)
 80001a2:	f002 ff85 	bl	80030b0 <osThreadNew>
 80001a6:	4603      	mov	r3, r0
 80001a8:	4a0d      	ldr	r2, [pc, #52]	@ (80001e0 <main+0x80>)
 80001aa:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 80001ac:	4a0d      	ldr	r2, [pc, #52]	@ (80001e4 <main+0x84>)
 80001ae:	2100      	movs	r1, #0
 80001b0:	480d      	ldr	r0, [pc, #52]	@ (80001e8 <main+0x88>)
 80001b2:	f002 ff7d 	bl	80030b0 <osThreadNew>
 80001b6:	4603      	mov	r3, r0
 80001b8:	4a0c      	ldr	r2, [pc, #48]	@ (80001ec <main+0x8c>)
 80001ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001bc:	f002 ff52 	bl	8003064 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c0:	bf00      	nop
 80001c2:	e7fd      	b.n	80001c0 <main+0x60>
 80001c4:	08007040 	.word	0x08007040
 80001c8:	20000100 	.word	0x20000100
 80001cc:	08006fd4 	.word	0x08006fd4
 80001d0:	0800038d 	.word	0x0800038d
 80001d4:	200000f4 	.word	0x200000f4
 80001d8:	08006ff8 	.word	0x08006ff8
 80001dc:	0800039d 	.word	0x0800039d
 80001e0:	200000f8 	.word	0x200000f8
 80001e4:	0800701c 	.word	0x0800701c
 80001e8:	0800041d 	.word	0x0800041d
 80001ec:	200000fc 	.word	0x200000fc

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b094      	sub	sp, #80	@ 0x50
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001fa:	2228      	movs	r2, #40	@ 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f006 f9ba 	bl	8006578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	2200      	movs	r2, #0
 800020a:	601a      	str	r2, [r3, #0]
 800020c:	605a      	str	r2, [r3, #4]
 800020e:	609a      	str	r2, [r3, #8]
 8000210:	60da      	str	r2, [r3, #12]
 8000212:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000214:	1d3b      	adds	r3, r7, #4
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000220:	2302      	movs	r3, #2
 8000222:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000224:	2301      	movs	r3, #1
 8000226:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000228:	2310      	movs	r3, #16
 800022a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800022c:	2300      	movs	r3, #0
 800022e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000230:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000234:	4618      	mov	r0, r3
 8000236:	f001 f965 	bl	8001504 <HAL_RCC_OscConfig>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000240:	f000 f94a 	bl	80004d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000244:	230f      	movs	r3, #15
 8000246:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000248:	2300      	movs	r3, #0
 800024a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fbd2 	bl	8001a08 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800026a:	f000 f935 	bl	80004d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800026e:	2302      	movs	r3, #2
 8000270:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000272:	2300      	movs	r3, #0
 8000274:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f001 fd83 	bl	8001d84 <HAL_RCCEx_PeriphCLKConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000284:	f000 f928 	bl	80004d8 <Error_Handler>
  }
}
 8000288:	bf00      	nop
 800028a:	3750      	adds	r7, #80	@ 0x50
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}

08000290 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b084      	sub	sp, #16
 8000294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2200      	movs	r2, #0
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	605a      	str	r2, [r3, #4]
 800029e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002a0:	4b18      	ldr	r3, [pc, #96]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002a2:	4a19      	ldr	r2, [pc, #100]	@ (8000308 <MX_ADC1_Init+0x78>)
 80002a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002a6:	4b17      	ldr	r3, [pc, #92]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002ac:	4b15      	ldr	r3, [pc, #84]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002b2:	4b14      	ldr	r3, [pc, #80]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b8:	4b12      	ldr	r3, [pc, #72]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002ba:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80002be:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002c0:	4b10      	ldr	r3, [pc, #64]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002cc:	480d      	ldr	r0, [pc, #52]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002ce:	f000 fb17 	bl	8000900 <HAL_ADC_Init>
 80002d2:	4603      	mov	r3, r0
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d001      	beq.n	80002dc <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002d8:	f000 f8fe 	bl	80004d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002e0:	2301      	movs	r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	4619      	mov	r1, r3
 80002ec:	4805      	ldr	r0, [pc, #20]	@ (8000304 <MX_ADC1_Init+0x74>)
 80002ee:	f000 fcb1 	bl	8000c54 <HAL_ADC_ConfigChannel>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002f8:	f000 f8ee 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	3710      	adds	r7, #16
 8000300:	46bd      	mov	sp, r7
 8000302:	bd80      	pop	{r7, pc}
 8000304:	2000007c 	.word	0x2000007c
 8000308:	40012400 	.word	0x40012400

0800030c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000310:	4b11      	ldr	r3, [pc, #68]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000312:	4a12      	ldr	r2, [pc, #72]	@ (800035c <MX_USART1_UART_Init+0x50>)
 8000314:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000316:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800031c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000324:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000326:	2200      	movs	r2, #0
 8000328:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032a:	4b0b      	ldr	r3, [pc, #44]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000332:	220c      	movs	r2, #12
 8000334:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000336:	4b08      	ldr	r3, [pc, #32]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000338:	2200      	movs	r2, #0
 800033a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800033c:	4b06      	ldr	r3, [pc, #24]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 800033e:	2200      	movs	r2, #0
 8000340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <MX_USART1_UART_Init+0x4c>)
 8000344:	f002 f812 	bl	800236c <HAL_UART_Init>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800034e:	f000 f8c3 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	200000ac 	.word	0x200000ac
 800035c:	40013800 	.word	0x40013800

08000360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000366:	4b08      	ldr	r3, [pc, #32]	@ (8000388 <MX_GPIO_Init+0x28>)
 8000368:	699b      	ldr	r3, [r3, #24]
 800036a:	4a07      	ldr	r2, [pc, #28]	@ (8000388 <MX_GPIO_Init+0x28>)
 800036c:	f043 0304 	orr.w	r3, r3, #4
 8000370:	6193      	str	r3, [r2, #24]
 8000372:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <MX_GPIO_Init+0x28>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	f003 0304 	and.w	r3, r3, #4
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800037e:	bf00      	nop
 8000380:	370c      	adds	r7, #12
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr
 8000388:	40021000 	.word	0x40021000

0800038c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b082      	sub	sp, #8
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000394:	2001      	movs	r0, #1
 8000396:	f002 ff1d 	bl	80031d4 <osDelay>
 800039a:	e7fb      	b.n	8000394 <StartDefaultTask+0x8>

0800039c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b08a      	sub	sp, #40	@ 0x28
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
  if (osSemaphoreAcquire(myBinarySem01Handle, osWaitForever) == osOK) {
 80003a4:	4b19      	ldr	r3, [pc, #100]	@ (800040c <StartTask02+0x70>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f04f 31ff 	mov.w	r1, #4294967295
 80003ac:	4618      	mov	r0, r3
 80003ae:	f002 ffb5 	bl	800331c <osSemaphoreAcquire>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d1f5      	bne.n	80003a4 <StartTask02+0x8>
	  // Thực hiện công việc của Task 2
	  const char* in_task=" Task 2 in....\r\n";
 80003b8:	4b15      	ldr	r3, [pc, #84]	@ (8000410 <StartTask02+0x74>)
 80003ba:	627b      	str	r3, [r7, #36]	@ 0x24
	  uint32_t tick = HAL_GetTick();
 80003bc:	f000 fa96 	bl	80008ec <HAL_GetTick>
 80003c0:	6238      	str	r0, [r7, #32]
	  char tick_str[20]; // Tạo buffer để chứa chuỗi
	  sprintf(tick_str, "%lu", tick); // Chuyển tick thành chuỗi (dạng số không dấu)
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	6a3a      	ldr	r2, [r7, #32]
 80003c8:	4912      	ldr	r1, [pc, #72]	@ (8000414 <StartTask02+0x78>)
 80003ca:	4618      	mov	r0, r3
 80003cc:	f006 f8b4 	bl	8006538 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)tick_str, strlen(tick_str), HAL_MAX_DELAY);
 80003d0:	f107 030c 	add.w	r3, r7, #12
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff febb 	bl	8000150 <strlen>
 80003da:	4603      	mov	r3, r0
 80003dc:	b29a      	uxth	r2, r3
 80003de:	f107 010c 	add.w	r1, r7, #12
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295
 80003e6:	480c      	ldr	r0, [pc, #48]	@ (8000418 <StartTask02+0x7c>)
 80003e8:	f002 f810 	bl	800240c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, in_task, strlen(in_task), HAL_MAX_DELAY);
 80003ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80003ee:	f7ff feaf 	bl	8000150 <strlen>
 80003f2:	4603      	mov	r3, r0
 80003f4:	b29a      	uxth	r2, r3
 80003f6:	f04f 33ff 	mov.w	r3, #4294967295
 80003fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80003fc:	4806      	ldr	r0, [pc, #24]	@ (8000418 <StartTask02+0x7c>)
 80003fe:	f002 f805 	bl	800240c <HAL_UART_Transmit>
	  osDelay(1000);
 8000402:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000406:	f002 fee5 	bl	80031d4 <osDelay>
  if (osSemaphoreAcquire(myBinarySem01Handle, osWaitForever) == osOK) {
 800040a:	e7cb      	b.n	80003a4 <StartTask02+0x8>
 800040c:	20000100 	.word	0x20000100
 8000410:	08006f90 	.word	0x08006f90
 8000414:	08006fa4 	.word	0x08006fa4
 8000418:	200000ac 	.word	0x200000ac

0800041c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	@ 0x28
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
  if (osSemaphoreAcquire(myBinarySem01Handle, osWaitForever) == osOK) {
 8000424:	4b19      	ldr	r3, [pc, #100]	@ (800048c <StartTask03+0x70>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f04f 31ff 	mov.w	r1, #4294967295
 800042c:	4618      	mov	r0, r3
 800042e:	f002 ff75 	bl	800331c <osSemaphoreAcquire>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d1f5      	bne.n	8000424 <StartTask03+0x8>
	  // Thực hiện công việc của Task 3
	  const char* in_task=" Task 3 in....\r\n";
 8000438:	4b15      	ldr	r3, [pc, #84]	@ (8000490 <StartTask03+0x74>)
 800043a:	627b      	str	r3, [r7, #36]	@ 0x24
	  uint32_t tick = HAL_GetTick();
 800043c:	f000 fa56 	bl	80008ec <HAL_GetTick>
 8000440:	6238      	str	r0, [r7, #32]
	  char tick_str[20]; // Tạo buffer để chứa chuỗi
	  sprintf(tick_str, "%lu", tick); // Chuyển tick thành chuỗi (dạng số không dấu)
 8000442:	f107 030c 	add.w	r3, r7, #12
 8000446:	6a3a      	ldr	r2, [r7, #32]
 8000448:	4912      	ldr	r1, [pc, #72]	@ (8000494 <StartTask03+0x78>)
 800044a:	4618      	mov	r0, r3
 800044c:	f006 f874 	bl	8006538 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)tick_str, strlen(tick_str), HAL_MAX_DELAY);
 8000450:	f107 030c 	add.w	r3, r7, #12
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff fe7b 	bl	8000150 <strlen>
 800045a:	4603      	mov	r3, r0
 800045c:	b29a      	uxth	r2, r3
 800045e:	f107 010c 	add.w	r1, r7, #12
 8000462:	f04f 33ff 	mov.w	r3, #4294967295
 8000466:	480c      	ldr	r0, [pc, #48]	@ (8000498 <StartTask03+0x7c>)
 8000468:	f001 ffd0 	bl	800240c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, in_task, strlen(in_task), HAL_MAX_DELAY);
 800046c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800046e:	f7ff fe6f 	bl	8000150 <strlen>
 8000472:	4603      	mov	r3, r0
 8000474:	b29a      	uxth	r2, r3
 8000476:	f04f 33ff 	mov.w	r3, #4294967295
 800047a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800047c:	4806      	ldr	r0, [pc, #24]	@ (8000498 <StartTask03+0x7c>)
 800047e:	f001 ffc5 	bl	800240c <HAL_UART_Transmit>
	  osDelay(500);
 8000482:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000486:	f002 fea5 	bl	80031d4 <osDelay>
  if (osSemaphoreAcquire(myBinarySem01Handle, osWaitForever) == osOK) {
 800048a:	e7cb      	b.n	8000424 <StartTask03+0x8>
 800048c:	20000100 	.word	0x20000100
 8000490:	08006fa8 	.word	0x08006fa8
 8000494:	08006fa4 	.word	0x08006fa4
 8000498:	200000ac 	.word	0x200000ac

0800049c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a09      	ldr	r2, [pc, #36]	@ (80004d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d101      	bne.n	80004b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004ae:	f000 fa0b 	bl	80008c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM1) { // Kiểm tra Timer 2
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a06      	ldr	r2, [pc, #24]	@ (80004d0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d104      	bne.n	80004c6 <HAL_TIM_PeriodElapsedCallback+0x2a>
          osSemaphoreRelease(myBinarySem01Handle); // Kích hoạt Semaphore
 80004bc:	4b05      	ldr	r3, [pc, #20]	@ (80004d4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4618      	mov	r0, r3
 80004c2:	f002 ff7d 	bl	80033c0 <osSemaphoreRelease>
      }
  /* USER CODE END Callback 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40012c00 	.word	0x40012c00
 80004d4:	20000100 	.word	0x20000100

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
}
 80004de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e0:	bf00      	nop
 80004e2:	e7fd      	b.n	80004e0 <Error_Handler+0x8>

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ea:	4b18      	ldr	r3, [pc, #96]	@ (800054c <HAL_MspInit+0x68>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a17      	ldr	r2, [pc, #92]	@ (800054c <HAL_MspInit+0x68>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6193      	str	r3, [r2, #24]
 80004f6:	4b15      	ldr	r3, [pc, #84]	@ (800054c <HAL_MspInit+0x68>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b12      	ldr	r3, [pc, #72]	@ (800054c <HAL_MspInit+0x68>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a11      	ldr	r2, [pc, #68]	@ (800054c <HAL_MspInit+0x68>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800050c:	61d3      	str	r3, [r2, #28]
 800050e:	4b0f      	ldr	r3, [pc, #60]	@ (800054c <HAL_MspInit+0x68>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	210f      	movs	r1, #15
 800051e:	f06f 0001 	mvn.w	r0, #1
 8000522:	f000 fd8e 	bl	8001042 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <HAL_MspInit+0x6c>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	4a04      	ldr	r2, [pc, #16]	@ (8000550 <HAL_MspInit+0x6c>)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	40021000 	.word	0x40021000
 8000550:	40010000 	.word	0x40010000

08000554 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	4a18      	ldr	r2, [pc, #96]	@ (80005d0 <HAL_ADC_MspInit+0x7c>)
 8000570:	4293      	cmp	r3, r2
 8000572:	d129      	bne.n	80005c8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000574:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <HAL_ADC_MspInit+0x80>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	4a16      	ldr	r2, [pc, #88]	@ (80005d4 <HAL_ADC_MspInit+0x80>)
 800057a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800057e:	6193      	str	r3, [r2, #24]
 8000580:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <HAL_ADC_MspInit+0x80>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000588:	60fb      	str	r3, [r7, #12]
 800058a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <HAL_ADC_MspInit+0x80>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a10      	ldr	r2, [pc, #64]	@ (80005d4 <HAL_ADC_MspInit+0x80>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	6193      	str	r3, [r2, #24]
 8000598:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <HAL_ADC_MspInit+0x80>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80005a4:	2301      	movs	r3, #1
 80005a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a8:	2303      	movs	r3, #3
 80005aa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	f107 0310 	add.w	r3, r7, #16
 80005b0:	4619      	mov	r1, r3
 80005b2:	4809      	ldr	r0, [pc, #36]	@ (80005d8 <HAL_ADC_MspInit+0x84>)
 80005b4:	f000 fe22 	bl	80011fc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2105      	movs	r1, #5
 80005bc:	2012      	movs	r0, #18
 80005be:	f000 fd40 	bl	8001042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80005c2:	2012      	movs	r0, #18
 80005c4:	f000 fd59 	bl	800107a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40012400 	.word	0x40012400
 80005d4:	40021000 	.word	0x40021000
 80005d8:	40010800 	.word	0x40010800

080005dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0310 	add.w	r3, r7, #16
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a20      	ldr	r2, [pc, #128]	@ (8000678 <HAL_UART_MspInit+0x9c>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d139      	bne.n	8000670 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005fc:	4b1f      	ldr	r3, [pc, #124]	@ (800067c <HAL_UART_MspInit+0xa0>)
 80005fe:	699b      	ldr	r3, [r3, #24]
 8000600:	4a1e      	ldr	r2, [pc, #120]	@ (800067c <HAL_UART_MspInit+0xa0>)
 8000602:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000606:	6193      	str	r3, [r2, #24]
 8000608:	4b1c      	ldr	r3, [pc, #112]	@ (800067c <HAL_UART_MspInit+0xa0>)
 800060a:	699b      	ldr	r3, [r3, #24]
 800060c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000610:	60fb      	str	r3, [r7, #12]
 8000612:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000614:	4b19      	ldr	r3, [pc, #100]	@ (800067c <HAL_UART_MspInit+0xa0>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a18      	ldr	r2, [pc, #96]	@ (800067c <HAL_UART_MspInit+0xa0>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6193      	str	r3, [r2, #24]
 8000620:	4b16      	ldr	r3, [pc, #88]	@ (800067c <HAL_UART_MspInit+0xa0>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800062c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000630:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000636:	2303      	movs	r3, #3
 8000638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063a:	f107 0310 	add.w	r3, r7, #16
 800063e:	4619      	mov	r1, r3
 8000640:	480f      	ldr	r0, [pc, #60]	@ (8000680 <HAL_UART_MspInit+0xa4>)
 8000642:	f000 fddb 	bl	80011fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800064a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800064c:	2300      	movs	r3, #0
 800064e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	4619      	mov	r1, r3
 800065a:	4809      	ldr	r0, [pc, #36]	@ (8000680 <HAL_UART_MspInit+0xa4>)
 800065c:	f000 fdce 	bl	80011fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	2105      	movs	r1, #5
 8000664:	2025      	movs	r0, #37	@ 0x25
 8000666:	f000 fcec 	bl	8001042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800066a:	2025      	movs	r0, #37	@ 0x25
 800066c:	f000 fd05 	bl	800107a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000670:	bf00      	nop
 8000672:	3720      	adds	r7, #32
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40013800 	.word	0x40013800
 800067c:	40021000 	.word	0x40021000
 8000680:	40010800 	.word	0x40010800

08000684 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08c      	sub	sp, #48	@ 0x30
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000694:	2300      	movs	r3, #0
 8000696:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800069a:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <HAL_InitTick+0xd0>)
 800069c:	699b      	ldr	r3, [r3, #24]
 800069e:	4a2d      	ldr	r2, [pc, #180]	@ (8000754 <HAL_InitTick+0xd0>)
 80006a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80006a4:	6193      	str	r3, [r2, #24]
 80006a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <HAL_InitTick+0xd0>)
 80006a8:	699b      	ldr	r3, [r3, #24]
 80006aa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006b2:	f107 020c 	add.w	r2, r7, #12
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	4611      	mov	r1, r2
 80006bc:	4618      	mov	r0, r3
 80006be:	f001 fb13 	bl	8001ce8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80006c2:	f001 fafd 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
 80006c6:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006ca:	4a23      	ldr	r2, [pc, #140]	@ (8000758 <HAL_InitTick+0xd4>)
 80006cc:	fba2 2303 	umull	r2, r3, r2, r3
 80006d0:	0c9b      	lsrs	r3, r3, #18
 80006d2:	3b01      	subs	r3, #1
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80006d6:	4b21      	ldr	r3, [pc, #132]	@ (800075c <HAL_InitTick+0xd8>)
 80006d8:	4a21      	ldr	r2, [pc, #132]	@ (8000760 <HAL_InitTick+0xdc>)
 80006da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <HAL_InitTick+0xd8>)
 80006de:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80006e2:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80006e4:	4a1d      	ldr	r2, [pc, #116]	@ (800075c <HAL_InitTick+0xd8>)
 80006e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e8:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <HAL_InitTick+0xd8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <HAL_InitTick+0xd8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <HAL_InitTick+0xd8>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80006fc:	4817      	ldr	r0, [pc, #92]	@ (800075c <HAL_InitTick+0xd8>)
 80006fe:	f001 fbf7 	bl	8001ef0 <HAL_TIM_Base_Init>
 8000702:	4603      	mov	r3, r0
 8000704:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000708:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800070c:	2b00      	cmp	r3, #0
 800070e:	d11b      	bne.n	8000748 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000710:	4812      	ldr	r0, [pc, #72]	@ (800075c <HAL_InitTick+0xd8>)
 8000712:	f001 fc45 	bl	8001fa0 <HAL_TIM_Base_Start_IT>
 8000716:	4603      	mov	r3, r0
 8000718:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800071c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000720:	2b00      	cmp	r3, #0
 8000722:	d111      	bne.n	8000748 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000724:	2019      	movs	r0, #25
 8000726:	f000 fca8 	bl	800107a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b0f      	cmp	r3, #15
 800072e:	d808      	bhi.n	8000742 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000730:	2200      	movs	r2, #0
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	2019      	movs	r0, #25
 8000736:	f000 fc84 	bl	8001042 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800073a:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <HAL_InitTick+0xe0>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6013      	str	r3, [r2, #0]
 8000740:	e002      	b.n	8000748 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 8000742:	2301      	movs	r3, #1
 8000744:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000748:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800074c:	4618      	mov	r0, r3
 800074e:	3730      	adds	r7, #48	@ 0x30
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40021000 	.word	0x40021000
 8000758:	431bde83 	.word	0x431bde83
 800075c:	20000104 	.word	0x20000104
 8000760:	40012c00 	.word	0x40012c00
 8000764:	20000004 	.word	0x20000004

08000768 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800076c:	bf00      	nop
 800076e:	e7fd      	b.n	800076c <NMI_Handler+0x4>

08000770 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <HardFault_Handler+0x4>

08000778 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <MemManage_Handler+0x4>

08000780 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <UsageFault_Handler+0x4>

08000790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr

0800079c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007a0:	4802      	ldr	r0, [pc, #8]	@ (80007ac <ADC1_2_IRQHandler+0x10>)
 80007a2:	f000 f985 	bl	8000ab0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000007c 	.word	0x2000007c

080007b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80007b4:	4802      	ldr	r0, [pc, #8]	@ (80007c0 <TIM1_UP_IRQHandler+0x10>)
 80007b6:	f001 fc45 	bl	8002044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000104 	.word	0x20000104

080007c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007c8:	4802      	ldr	r0, [pc, #8]	@ (80007d4 <USART1_IRQHandler+0x10>)
 80007ca:	f001 feab 	bl	8002524 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200000ac 	.word	0x200000ac

080007d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e0:	4a14      	ldr	r2, [pc, #80]	@ (8000834 <_sbrk+0x5c>)
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <_sbrk+0x60>)
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007ec:	4b13      	ldr	r3, [pc, #76]	@ (800083c <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <_sbrk+0x64>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	@ (8000840 <_sbrk+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fa:	4b10      	ldr	r3, [pc, #64]	@ (800083c <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	429a      	cmp	r2, r3
 8000806:	d207      	bcs.n	8000818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000808:	f005 ff14 	bl	8006634 <__errno>
 800080c:	4603      	mov	r3, r0
 800080e:	220c      	movs	r2, #12
 8000810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	e009      	b.n	800082c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000818:	4b08      	ldr	r3, [pc, #32]	@ (800083c <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081e:	4b07      	ldr	r3, [pc, #28]	@ (800083c <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	4a05      	ldr	r2, [pc, #20]	@ (800083c <_sbrk+0x64>)
 8000828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800082a:	68fb      	ldr	r3, [r7, #12]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20005000 	.word	0x20005000
 8000838:	00000400 	.word	0x00000400
 800083c:	2000014c 	.word	0x2000014c
 8000840:	20001c88 	.word	0x20001c88

08000844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000850:	f7ff fff8 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480b      	ldr	r0, [pc, #44]	@ (8000884 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000856:	490c      	ldr	r1, [pc, #48]	@ (8000888 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000858:	4a0c      	ldr	r2, [pc, #48]	@ (800088c <LoopFillZerobss+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a09      	ldr	r2, [pc, #36]	@ (8000890 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800086c:	4c09      	ldr	r4, [pc, #36]	@ (8000894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087a:	f005 fee1 	bl	8006640 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087e:	f7ff fc6f 	bl	8000160 <main>
  bx lr
 8000882:	4770      	bx	lr
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800088c:	080070c0 	.word	0x080070c0
  ldr r2, =_sbss
 8000890:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000894:	20001c84 	.word	0x20001c84

08000898 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <CAN1_RX1_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	@ (80008c4 <HAL_Init+0x28>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	@ (80008c4 <HAL_Init+0x28>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 fbbd 	bl	800102c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b2:	200f      	movs	r0, #15
 80008b4:	f7ff fee6 	bl	8000684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b8:	f7ff fe14 	bl	80004e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008cc:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <HAL_IncTick+0x1c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <HAL_IncTick+0x20>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4413      	add	r3, r2
 80008d8:	4a03      	ldr	r2, [pc, #12]	@ (80008e8 <HAL_IncTick+0x20>)
 80008da:	6013      	str	r3, [r2, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	20000008 	.word	0x20000008
 80008e8:	20000150 	.word	0x20000150

080008ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  return uwTick;
 80008f0:	4b02      	ldr	r3, [pc, #8]	@ (80008fc <HAL_GetTick+0x10>)
 80008f2:	681b      	ldr	r3, [r3, #0]
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr
 80008fc:	20000150 	.word	0x20000150

08000900 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000908:	2300      	movs	r3, #0
 800090a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000910:	2300      	movs	r3, #0
 8000912:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e0be      	b.n	8000aa0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800092c:	2b00      	cmp	r3, #0
 800092e:	d109      	bne.n	8000944 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2200      	movs	r2, #0
 8000934:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff fe08 	bl	8000554 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 fa7d 	bl	8000e44 <ADC_ConversionStop_Disable>
 800094a:	4603      	mov	r3, r0
 800094c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	2b00      	cmp	r3, #0
 8000958:	f040 8099 	bne.w	8000a8e <HAL_ADC_Init+0x18e>
 800095c:	7dfb      	ldrb	r3, [r7, #23]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f040 8095 	bne.w	8000a8e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000968:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800096c:	f023 0302 	bic.w	r3, r3, #2
 8000970:	f043 0202 	orr.w	r2, r3, #2
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000980:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	7b1b      	ldrb	r3, [r3, #12]
 8000986:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000988:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	4313      	orrs	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000998:	d003      	beq.n	80009a2 <HAL_ADC_Init+0xa2>
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d102      	bne.n	80009a8 <HAL_ADC_Init+0xa8>
 80009a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009a6:	e000      	b.n	80009aa <HAL_ADC_Init+0xaa>
 80009a8:	2300      	movs	r3, #0
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7d1b      	ldrb	r3, [r3, #20]
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d119      	bne.n	80009ec <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	7b1b      	ldrb	r3, [r3, #12]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d109      	bne.n	80009d4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	699b      	ldr	r3, [r3, #24]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	035a      	lsls	r2, r3, #13
 80009c8:	693b      	ldr	r3, [r7, #16]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	e00b      	b.n	80009ec <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009d8:	f043 0220 	orr.w	r2, r3, #32
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e4:	f043 0201 	orr.w	r2, r3, #1
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	685b      	ldr	r3, [r3, #4]
 80009f2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	689a      	ldr	r2, [r3, #8]
 8000a06:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <HAL_ADC_Init+0x1a8>)
 8000a08:	4013      	ands	r3, r2
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	6812      	ldr	r2, [r2, #0]
 8000a0e:	68b9      	ldr	r1, [r7, #8]
 8000a10:	430b      	orrs	r3, r1
 8000a12:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a1c:	d003      	beq.n	8000a26 <HAL_ADC_Init+0x126>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	2b01      	cmp	r3, #1
 8000a24:	d104      	bne.n	8000a30 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	691b      	ldr	r3, [r3, #16]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	051b      	lsls	r3, r3, #20
 8000a2e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a36:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	430a      	orrs	r2, r1
 8000a42:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <HAL_ADC_Init+0x1ac>)
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d10b      	bne.n	8000a6c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	2200      	movs	r2, #0
 8000a58:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a5e:	f023 0303 	bic.w	r3, r3, #3
 8000a62:	f043 0201 	orr.w	r2, r3, #1
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a6a:	e018      	b.n	8000a9e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a70:	f023 0312 	bic.w	r3, r3, #18
 8000a74:	f043 0210 	orr.w	r2, r3, #16
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a80:	f043 0201 	orr.w	r2, r3, #1
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a8c:	e007      	b.n	8000a9e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a92:	f043 0210 	orr.w	r2, r3, #16
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	ffe1f7fd 	.word	0xffe1f7fd
 8000aac:	ff1f0efe 	.word	0xff1f0efe

08000ab0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	f003 0320 	and.w	r3, r3, #32
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d03e      	beq.n	8000b50 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d039      	beq.n	8000b50 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae0:	f003 0310 	and.w	r3, r3, #16
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d105      	bne.n	8000af4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aec:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000afe:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000b02:	d11d      	bne.n	8000b40 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d119      	bne.n	8000b40 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f022 0220 	bic.w	r2, r2, #32
 8000b1a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b2c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d105      	bne.n	8000b40 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b38:	f043 0201 	orr.w	r2, r3, #1
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 f874 	bl	8000c2e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f06f 0212 	mvn.w	r2, #18
 8000b4e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d04d      	beq.n	8000bf6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d048      	beq.n	8000bf6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b68:	f003 0310 	and.w	r3, r3, #16
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d105      	bne.n	8000b7c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b74:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8000b86:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8000b8a:	d012      	beq.n	8000bb2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d125      	bne.n	8000be6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	689b      	ldr	r3, [r3, #8]
 8000ba0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000ba4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000ba8:	d11d      	bne.n	8000be6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d119      	bne.n	8000be6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	685a      	ldr	r2, [r3, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000bc0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bde:	f043 0201 	orr.w	r2, r3, #1
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 f96d 	bl	8000ec6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f06f 020c 	mvn.w	r2, #12
 8000bf4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000bf6:	68bb      	ldr	r3, [r7, #8]
 8000bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d012      	beq.n	8000c26 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d00d      	beq.n	8000c26 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c0e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f812 	bl	8000c40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f06f 0201 	mvn.w	r2, #1
 8000c24:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr

08000c40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
	...

08000c54 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c54:	b480      	push	{r7}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d101      	bne.n	8000c74 <HAL_ADC_ConfigChannel+0x20>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e0dc      	b.n	8000e2e <HAL_ADC_ConfigChannel+0x1da>
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2201      	movs	r2, #1
 8000c78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	2b06      	cmp	r3, #6
 8000c82:	d81c      	bhi.n	8000cbe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	3b05      	subs	r3, #5
 8000c96:	221f      	movs	r2, #31
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	4019      	ands	r1, r3
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	4413      	add	r3, r2
 8000cae:	3b05      	subs	r3, #5
 8000cb0:	fa00 f203 	lsl.w	r2, r0, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cbc:	e03c      	b.n	8000d38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	2b0c      	cmp	r3, #12
 8000cc4:	d81c      	bhi.n	8000d00 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3b23      	subs	r3, #35	@ 0x23
 8000cd8:	221f      	movs	r2, #31
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43db      	mvns	r3, r3
 8000ce0:	4019      	ands	r1, r3
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	6818      	ldr	r0, [r3, #0]
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	685a      	ldr	r2, [r3, #4]
 8000cea:	4613      	mov	r3, r2
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	4413      	add	r3, r2
 8000cf0:	3b23      	subs	r3, #35	@ 0x23
 8000cf2:	fa00 f203 	lsl.w	r2, r0, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8000cfe:	e01b      	b.n	8000d38 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	3b41      	subs	r3, #65	@ 0x41
 8000d12:	221f      	movs	r2, #31
 8000d14:	fa02 f303 	lsl.w	r3, r2, r3
 8000d18:	43db      	mvns	r3, r3
 8000d1a:	4019      	ands	r1, r3
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	6818      	ldr	r0, [r3, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	4613      	mov	r3, r2
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	4413      	add	r3, r2
 8000d2a:	3b41      	subs	r3, #65	@ 0x41
 8000d2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	430a      	orrs	r2, r1
 8000d36:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b09      	cmp	r3, #9
 8000d3e:	d91c      	bls.n	8000d7a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	68d9      	ldr	r1, [r3, #12]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	4413      	add	r3, r2
 8000d50:	3b1e      	subs	r3, #30
 8000d52:	2207      	movs	r2, #7
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	4019      	ands	r1, r3
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	6898      	ldr	r0, [r3, #8]
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	3b1e      	subs	r3, #30
 8000d6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	430a      	orrs	r2, r1
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	e019      	b.n	8000dae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	6919      	ldr	r1, [r3, #16]
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4613      	mov	r3, r2
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	4413      	add	r3, r2
 8000d8a:	2207      	movs	r2, #7
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	4019      	ands	r1, r3
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	6898      	ldr	r0, [r3, #8]
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	fa00 f203 	lsl.w	r2, r0, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b10      	cmp	r3, #16
 8000db4:	d003      	beq.n	8000dbe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dba:	2b11      	cmp	r3, #17
 8000dbc:	d132      	bne.n	8000e24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e38 <HAL_ADC_ConfigChannel+0x1e4>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d125      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d126      	bne.n	8000e24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000de4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b10      	cmp	r3, #16
 8000dec:	d11a      	bne.n	8000e24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000dee:	4b13      	ldr	r3, [pc, #76]	@ (8000e3c <HAL_ADC_ConfigChannel+0x1e8>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a13      	ldr	r2, [pc, #76]	@ (8000e40 <HAL_ADC_ConfigChannel+0x1ec>)
 8000df4:	fba2 2303 	umull	r2, r3, r2, r3
 8000df8:	0c9a      	lsrs	r2, r3, #18
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	4413      	add	r3, r2
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e04:	e002      	b.n	8000e0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	3b01      	subs	r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1f9      	bne.n	8000e06 <HAL_ADC_ConfigChannel+0x1b2>
 8000e12:	e007      	b.n	8000e24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e18:	f043 0220 	orr.w	r2, r3, #32
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	40012400 	.word	0x40012400
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	431bde83 	.word	0x431bde83

08000e44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d12e      	bne.n	8000ebc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f022 0201 	bic.w	r2, r2, #1
 8000e6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e6e:	f7ff fd3d 	bl	80008ec <HAL_GetTick>
 8000e72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e74:	e01b      	b.n	8000eae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e76:	f7ff fd39 	bl	80008ec <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d914      	bls.n	8000eae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d10d      	bne.n	8000eae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e96:	f043 0210 	orr.w	r2, r3, #16
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea2:	f043 0201 	orr.w	r2, r3, #1
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e007      	b.n	8000ebe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	689b      	ldr	r3, [r3, #8]
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d0dc      	beq.n	8000e76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3710      	adds	r7, #16
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	b083      	sub	sp, #12
 8000eca:	af00      	add	r7, sp, #0
 8000ecc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	db0b      	blt.n	8000f66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 021f 	and.w	r2, r3, #31
 8000f54:	4906      	ldr	r1, [pc, #24]	@ (8000f70 <__NVIC_EnableIRQ+0x34>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	095b      	lsrs	r3, r3, #5
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	e000e100 	.word	0xe000e100

08000f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	6039      	str	r1, [r7, #0]
 8000f7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db0a      	blt.n	8000f9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <__NVIC_SetPriority+0x4c>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	0112      	lsls	r2, r2, #4
 8000f94:	b2d2      	uxtb	r2, r2
 8000f96:	440b      	add	r3, r1
 8000f98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f9c:	e00a      	b.n	8000fb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	b2da      	uxtb	r2, r3
 8000fa2:	4908      	ldr	r1, [pc, #32]	@ (8000fc4 <__NVIC_SetPriority+0x50>)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	3b04      	subs	r3, #4
 8000fac:	0112      	lsls	r2, r2, #4
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	440b      	add	r3, r1
 8000fb2:	761a      	strb	r2, [r3, #24]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	e000e100 	.word	0xe000e100
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b089      	sub	sp, #36	@ 0x24
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	f1c3 0307 	rsb	r3, r3, #7
 8000fe2:	2b04      	cmp	r3, #4
 8000fe4:	bf28      	it	cs
 8000fe6:	2304      	movcs	r3, #4
 8000fe8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2b06      	cmp	r3, #6
 8000ff0:	d902      	bls.n	8000ff8 <NVIC_EncodePriority+0x30>
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3b03      	subs	r3, #3
 8000ff6:	e000      	b.n	8000ffa <NVIC_EncodePriority+0x32>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	43da      	mvns	r2, r3
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	401a      	ands	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001010:	f04f 31ff 	mov.w	r1, #4294967295
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43d9      	mvns	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	4313      	orrs	r3, r2
         );
}
 8001022:	4618      	mov	r0, r3
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff4f 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001054:	f7ff ff64 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 8001058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff ffb2 	bl	8000fc8 <NVIC_EncodePriority>
 8001064:	4602      	mov	r2, r0
 8001066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff81 	bl	8000f74 <__NVIC_SetPriority>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff57 	bl	8000f3c <__NVIC_EnableIRQ>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b02      	cmp	r3, #2
 80010ac:	d008      	beq.n	80010c0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2204      	movs	r2, #4
 80010b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010bc:	2301      	movs	r3, #1
 80010be:	e020      	b.n	8001102 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f022 020e 	bic.w	r2, r2, #14
 80010ce:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 0201 	bic.w	r2, r2, #1
 80010de:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80010e8:	2101      	movs	r1, #1
 80010ea:	fa01 f202 	lsl.w	r2, r1, r2
 80010ee:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2201      	movs	r2, #1
 80010f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	bc80      	pop	{r7}
 800110a:	4770      	bx	lr

0800110c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001114:	2300      	movs	r3, #0
 8001116:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800111e:	b2db      	uxtb	r3, r3
 8001120:	2b02      	cmp	r3, #2
 8001122:	d005      	beq.n	8001130 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2204      	movs	r2, #4
 8001128:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e051      	b.n	80011d4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 020e 	bic.w	r2, r2, #14
 800113e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0201 	bic.w	r2, r2, #1
 800114e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a22      	ldr	r2, [pc, #136]	@ (80011e0 <HAL_DMA_Abort_IT+0xd4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d029      	beq.n	80011ae <HAL_DMA_Abort_IT+0xa2>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a21      	ldr	r2, [pc, #132]	@ (80011e4 <HAL_DMA_Abort_IT+0xd8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d022      	beq.n	80011aa <HAL_DMA_Abort_IT+0x9e>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a1f      	ldr	r2, [pc, #124]	@ (80011e8 <HAL_DMA_Abort_IT+0xdc>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d01a      	beq.n	80011a4 <HAL_DMA_Abort_IT+0x98>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a1e      	ldr	r2, [pc, #120]	@ (80011ec <HAL_DMA_Abort_IT+0xe0>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d012      	beq.n	800119e <HAL_DMA_Abort_IT+0x92>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a1c      	ldr	r2, [pc, #112]	@ (80011f0 <HAL_DMA_Abort_IT+0xe4>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00a      	beq.n	8001198 <HAL_DMA_Abort_IT+0x8c>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a1b      	ldr	r2, [pc, #108]	@ (80011f4 <HAL_DMA_Abort_IT+0xe8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d102      	bne.n	8001192 <HAL_DMA_Abort_IT+0x86>
 800118c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001190:	e00e      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 8001192:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001196:	e00b      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 8001198:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800119c:	e008      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 800119e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a2:	e005      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 80011a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011a8:	e002      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 80011aa:	2310      	movs	r3, #16
 80011ac:	e000      	b.n	80011b0 <HAL_DMA_Abort_IT+0xa4>
 80011ae:	2301      	movs	r3, #1
 80011b0:	4a11      	ldr	r2, [pc, #68]	@ (80011f8 <HAL_DMA_Abort_IT+0xec>)
 80011b2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	4798      	blx	r3
    } 
  }
  return status;
 80011d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40020008 	.word	0x40020008
 80011e4:	4002001c 	.word	0x4002001c
 80011e8:	40020030 	.word	0x40020030
 80011ec:	40020044 	.word	0x40020044
 80011f0:	40020058 	.word	0x40020058
 80011f4:	4002006c 	.word	0x4002006c
 80011f8:	40020000 	.word	0x40020000

080011fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b08b      	sub	sp, #44	@ 0x2c
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800120a:	2300      	movs	r3, #0
 800120c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800120e:	e169      	b.n	80014e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001210:	2201      	movs	r2, #1
 8001212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	69fa      	ldr	r2, [r7, #28]
 8001220:	4013      	ands	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	429a      	cmp	r2, r3
 800122a:	f040 8158 	bne.w	80014de <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a9a      	ldr	r2, [pc, #616]	@ (800149c <HAL_GPIO_Init+0x2a0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d05e      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001238:	4a98      	ldr	r2, [pc, #608]	@ (800149c <HAL_GPIO_Init+0x2a0>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d875      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 800123e:	4a98      	ldr	r2, [pc, #608]	@ (80014a0 <HAL_GPIO_Init+0x2a4>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d058      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001244:	4a96      	ldr	r2, [pc, #600]	@ (80014a0 <HAL_GPIO_Init+0x2a4>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d86f      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 800124a:	4a96      	ldr	r2, [pc, #600]	@ (80014a4 <HAL_GPIO_Init+0x2a8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d052      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001250:	4a94      	ldr	r2, [pc, #592]	@ (80014a4 <HAL_GPIO_Init+0x2a8>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d869      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 8001256:	4a94      	ldr	r2, [pc, #592]	@ (80014a8 <HAL_GPIO_Init+0x2ac>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d04c      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 800125c:	4a92      	ldr	r2, [pc, #584]	@ (80014a8 <HAL_GPIO_Init+0x2ac>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d863      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 8001262:	4a92      	ldr	r2, [pc, #584]	@ (80014ac <HAL_GPIO_Init+0x2b0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d046      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
 8001268:	4a90      	ldr	r2, [pc, #576]	@ (80014ac <HAL_GPIO_Init+0x2b0>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d85d      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 800126e:	2b12      	cmp	r3, #18
 8001270:	d82a      	bhi.n	80012c8 <HAL_GPIO_Init+0xcc>
 8001272:	2b12      	cmp	r3, #18
 8001274:	d859      	bhi.n	800132a <HAL_GPIO_Init+0x12e>
 8001276:	a201      	add	r2, pc, #4	@ (adr r2, 800127c <HAL_GPIO_Init+0x80>)
 8001278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800127c:	080012f7 	.word	0x080012f7
 8001280:	080012d1 	.word	0x080012d1
 8001284:	080012e3 	.word	0x080012e3
 8001288:	08001325 	.word	0x08001325
 800128c:	0800132b 	.word	0x0800132b
 8001290:	0800132b 	.word	0x0800132b
 8001294:	0800132b 	.word	0x0800132b
 8001298:	0800132b 	.word	0x0800132b
 800129c:	0800132b 	.word	0x0800132b
 80012a0:	0800132b 	.word	0x0800132b
 80012a4:	0800132b 	.word	0x0800132b
 80012a8:	0800132b 	.word	0x0800132b
 80012ac:	0800132b 	.word	0x0800132b
 80012b0:	0800132b 	.word	0x0800132b
 80012b4:	0800132b 	.word	0x0800132b
 80012b8:	0800132b 	.word	0x0800132b
 80012bc:	0800132b 	.word	0x0800132b
 80012c0:	080012d9 	.word	0x080012d9
 80012c4:	080012ed 	.word	0x080012ed
 80012c8:	4a79      	ldr	r2, [pc, #484]	@ (80014b0 <HAL_GPIO_Init+0x2b4>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d013      	beq.n	80012f6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012ce:	e02c      	b.n	800132a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	623b      	str	r3, [r7, #32]
          break;
 80012d6:	e029      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	3304      	adds	r3, #4
 80012de:	623b      	str	r3, [r7, #32]
          break;
 80012e0:	e024      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	3308      	adds	r3, #8
 80012e8:	623b      	str	r3, [r7, #32]
          break;
 80012ea:	e01f      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	330c      	adds	r3, #12
 80012f2:	623b      	str	r3, [r7, #32]
          break;
 80012f4:	e01a      	b.n	800132c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d102      	bne.n	8001304 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012fe:	2304      	movs	r3, #4
 8001300:	623b      	str	r3, [r7, #32]
          break;
 8001302:	e013      	b.n	800132c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d105      	bne.n	8001318 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800130c:	2308      	movs	r3, #8
 800130e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69fa      	ldr	r2, [r7, #28]
 8001314:	611a      	str	r2, [r3, #16]
          break;
 8001316:	e009      	b.n	800132c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001318:	2308      	movs	r3, #8
 800131a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69fa      	ldr	r2, [r7, #28]
 8001320:	615a      	str	r2, [r3, #20]
          break;
 8001322:	e003      	b.n	800132c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
          break;
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x130>
          break;
 800132a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2bff      	cmp	r3, #255	@ 0xff
 8001330:	d801      	bhi.n	8001336 <HAL_GPIO_Init+0x13a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	e001      	b.n	800133a <HAL_GPIO_Init+0x13e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3304      	adds	r3, #4
 800133a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2bff      	cmp	r3, #255	@ 0xff
 8001340:	d802      	bhi.n	8001348 <HAL_GPIO_Init+0x14c>
 8001342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x152>
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	3b08      	subs	r3, #8
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	210f      	movs	r1, #15
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	fa01 f303 	lsl.w	r3, r1, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	401a      	ands	r2, r3
 8001360:	6a39      	ldr	r1, [r7, #32]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	431a      	orrs	r2, r3
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	f000 80b1 	beq.w	80014de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800137c:	4b4d      	ldr	r3, [pc, #308]	@ (80014b4 <HAL_GPIO_Init+0x2b8>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a4c      	ldr	r2, [pc, #304]	@ (80014b4 <HAL_GPIO_Init+0x2b8>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b4a      	ldr	r3, [pc, #296]	@ (80014b4 <HAL_GPIO_Init+0x2b8>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0301 	and.w	r3, r3, #1
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001394:	4a48      	ldr	r2, [pc, #288]	@ (80014b8 <HAL_GPIO_Init+0x2bc>)
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	220f      	movs	r2, #15
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	43db      	mvns	r3, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a40      	ldr	r2, [pc, #256]	@ (80014bc <HAL_GPIO_Init+0x2c0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d013      	beq.n	80013e8 <HAL_GPIO_Init+0x1ec>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a3f      	ldr	r2, [pc, #252]	@ (80014c0 <HAL_GPIO_Init+0x2c4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00d      	beq.n	80013e4 <HAL_GPIO_Init+0x1e8>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a3e      	ldr	r2, [pc, #248]	@ (80014c4 <HAL_GPIO_Init+0x2c8>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <HAL_GPIO_Init+0x1e4>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a3d      	ldr	r2, [pc, #244]	@ (80014c8 <HAL_GPIO_Init+0x2cc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_GPIO_Init+0x1e0>
 80013d8:	2303      	movs	r3, #3
 80013da:	e006      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013dc:	2304      	movs	r3, #4
 80013de:	e004      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013e0:	2302      	movs	r3, #2
 80013e2:	e002      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013e4:	2301      	movs	r3, #1
 80013e6:	e000      	b.n	80013ea <HAL_GPIO_Init+0x1ee>
 80013e8:	2300      	movs	r3, #0
 80013ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ec:	f002 0203 	and.w	r2, r2, #3
 80013f0:	0092      	lsls	r2, r2, #2
 80013f2:	4093      	lsls	r3, r2
 80013f4:	68fa      	ldr	r2, [r7, #12]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013fa:	492f      	ldr	r1, [pc, #188]	@ (80014b8 <HAL_GPIO_Init+0x2bc>)
 80013fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	3302      	adds	r3, #2
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d006      	beq.n	8001422 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001414:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	492c      	ldr	r1, [pc, #176]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	4313      	orrs	r3, r2
 800141e:	608b      	str	r3, [r1, #8]
 8001420:	e006      	b.n	8001430 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001422:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001424:	689a      	ldr	r2, [r3, #8]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	43db      	mvns	r3, r3
 800142a:	4928      	ldr	r1, [pc, #160]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 800142c:	4013      	ands	r3, r2
 800142e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d006      	beq.n	800144a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800143c:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 800143e:	68da      	ldr	r2, [r3, #12]
 8001440:	4922      	ldr	r1, [pc, #136]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	4313      	orrs	r3, r2
 8001446:	60cb      	str	r3, [r1, #12]
 8001448:	e006      	b.n	8001458 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800144a:	4b20      	ldr	r3, [pc, #128]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 800144c:	68da      	ldr	r2, [r3, #12]
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	43db      	mvns	r3, r3
 8001452:	491e      	ldr	r1, [pc, #120]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001454:	4013      	ands	r3, r2
 8001456:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d006      	beq.n	8001472 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001464:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4918      	ldr	r1, [pc, #96]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	4313      	orrs	r3, r2
 800146e:	604b      	str	r3, [r1, #4]
 8001470:	e006      	b.n	8001480 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	43db      	mvns	r3, r3
 800147a:	4914      	ldr	r1, [pc, #80]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 800147c:	4013      	ands	r3, r2
 800147e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d021      	beq.n	80014d0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800148c:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	490e      	ldr	r1, [pc, #56]	@ (80014cc <HAL_GPIO_Init+0x2d0>)
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
 8001498:	e021      	b.n	80014de <HAL_GPIO_Init+0x2e2>
 800149a:	bf00      	nop
 800149c:	10320000 	.word	0x10320000
 80014a0:	10310000 	.word	0x10310000
 80014a4:	10220000 	.word	0x10220000
 80014a8:	10210000 	.word	0x10210000
 80014ac:	10120000 	.word	0x10120000
 80014b0:	10110000 	.word	0x10110000
 80014b4:	40021000 	.word	0x40021000
 80014b8:	40010000 	.word	0x40010000
 80014bc:	40010800 	.word	0x40010800
 80014c0:	40010c00 	.word	0x40010c00
 80014c4:	40011000 	.word	0x40011000
 80014c8:	40011400 	.word	0x40011400
 80014cc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <HAL_GPIO_Init+0x304>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	43db      	mvns	r3, r3
 80014d8:	4909      	ldr	r1, [pc, #36]	@ (8001500 <HAL_GPIO_Init+0x304>)
 80014da:	4013      	ands	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	3301      	adds	r3, #1
 80014e2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ea:	fa22 f303 	lsr.w	r3, r2, r3
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f47f ae8e 	bne.w	8001210 <HAL_GPIO_Init+0x14>
  }
}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	372c      	adds	r7, #44	@ 0x2c
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e272      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 8087 	beq.w	8001632 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001524:	4b92      	ldr	r3, [pc, #584]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b04      	cmp	r3, #4
 800152e:	d00c      	beq.n	800154a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001530:	4b8f      	ldr	r3, [pc, #572]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	2b08      	cmp	r3, #8
 800153a:	d112      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
 800153c:	4b8c      	ldr	r3, [pc, #560]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001548:	d10b      	bne.n	8001562 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800154a:	4b89      	ldr	r3, [pc, #548]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d06c      	beq.n	8001630 <HAL_RCC_OscConfig+0x12c>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d168      	bne.n	8001630 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e24c      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x76>
 800156c:	4b80      	ldr	r3, [pc, #512]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a7f      	ldr	r2, [pc, #508]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	e02e      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x98>
 8001582:	4b7b      	ldr	r3, [pc, #492]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7a      	ldr	r2, [pc, #488]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001588:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b78      	ldr	r3, [pc, #480]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a77      	ldr	r2, [pc, #476]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001594:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e01d      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015a4:	d10c      	bne.n	80015c0 <HAL_RCC_OscConfig+0xbc>
 80015a6:	4b72      	ldr	r3, [pc, #456]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a71      	ldr	r2, [pc, #452]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e00b      	b.n	80015d8 <HAL_RCC_OscConfig+0xd4>
 80015c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b68      	ldr	r3, [pc, #416]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a67      	ldr	r2, [pc, #412]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff f984 	bl	80008ec <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff f980 	bl	80008ec <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	@ 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e200      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0xe4>
 8001606:	e014      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff f970 	bl	80008ec <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff f96c 	bl	80008ec <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	@ 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1ec      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001622:	4b53      	ldr	r3, [pc, #332]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x10c>
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d063      	beq.n	8001706 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800163e:	4b4c      	ldr	r3, [pc, #304]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 030c 	and.w	r3, r3, #12
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800164a:	4b49      	ldr	r3, [pc, #292]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 030c 	and.w	r3, r3, #12
 8001652:	2b08      	cmp	r3, #8
 8001654:	d11c      	bne.n	8001690 <HAL_RCC_OscConfig+0x18c>
 8001656:	4b46      	ldr	r3, [pc, #280]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d116      	bne.n	8001690 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001662:	4b43      	ldr	r3, [pc, #268]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <HAL_RCC_OscConfig+0x176>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d001      	beq.n	800167a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e1c0      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b3d      	ldr	r3, [pc, #244]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	4939      	ldr	r1, [pc, #228]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 800168a:	4313      	orrs	r3, r2
 800168c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	e03a      	b.n	8001706 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d020      	beq.n	80016da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001698:	4b36      	ldr	r3, [pc, #216]	@ (8001774 <HAL_RCC_OscConfig+0x270>)
 800169a:	2201      	movs	r2, #1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff f925 	bl	80008ec <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a6:	f7ff f921 	bl	80008ec <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e1a1      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4927      	ldr	r1, [pc, #156]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	600b      	str	r3, [r1, #0]
 80016d8:	e015      	b.n	8001706 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016da:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <HAL_RCC_OscConfig+0x270>)
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e0:	f7ff f904 	bl	80008ec <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e8:	f7ff f900 	bl	80008ec <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e180      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d1f0      	bne.n	80016e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b00      	cmp	r3, #0
 8001710:	d03a      	beq.n	8001788 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d019      	beq.n	800174e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171a:	4b17      	ldr	r3, [pc, #92]	@ (8001778 <HAL_RCC_OscConfig+0x274>)
 800171c:	2201      	movs	r2, #1
 800171e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001720:	f7ff f8e4 	bl	80008ec <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001728:	f7ff f8e0 	bl	80008ec <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e160      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	4b0d      	ldr	r3, [pc, #52]	@ (8001770 <HAL_RCC_OscConfig+0x26c>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001746:	2001      	movs	r0, #1
 8001748:	f000 fafe 	bl	8001d48 <RCC_Delay>
 800174c:	e01c      	b.n	8001788 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800174e:	4b0a      	ldr	r3, [pc, #40]	@ (8001778 <HAL_RCC_OscConfig+0x274>)
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001754:	f7ff f8ca 	bl	80008ec <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800175a:	e00f      	b.n	800177c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff f8c6 	bl	80008ec <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d908      	bls.n	800177c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e146      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	42420000 	.word	0x42420000
 8001778:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	4b92      	ldr	r3, [pc, #584]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d1e9      	bne.n	800175c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a6 	beq.w	80018e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001796:	2300      	movs	r3, #0
 8001798:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800179a:	4b8b      	ldr	r3, [pc, #556]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10d      	bne.n	80017c2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b88      	ldr	r3, [pc, #544]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a87      	ldr	r2, [pc, #540]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]
 80017b2:	4b85      	ldr	r3, [pc, #532]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017be:	2301      	movs	r3, #1
 80017c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	4b82      	ldr	r3, [pc, #520]	@ (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d118      	bne.n	8001800 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ce:	4b7f      	ldr	r3, [pc, #508]	@ (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a7e      	ldr	r2, [pc, #504]	@ (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017da:	f7ff f887 	bl	80008ec <HAL_GetTick>
 80017de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e2:	f7ff f883 	bl	80008ec <HAL_GetTick>
 80017e6:	4602      	mov	r2, r0
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b64      	cmp	r3, #100	@ 0x64
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e103      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017f4:	4b75      	ldr	r3, [pc, #468]	@ (80019cc <HAL_RCC_OscConfig+0x4c8>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d0f0      	beq.n	80017e2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x312>
 8001808:	4b6f      	ldr	r3, [pc, #444]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4a6e      	ldr	r2, [pc, #440]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6213      	str	r3, [r2, #32]
 8001814:	e02d      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d10c      	bne.n	8001838 <HAL_RCC_OscConfig+0x334>
 800181e:	4b6a      	ldr	r3, [pc, #424]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001820:	6a1b      	ldr	r3, [r3, #32]
 8001822:	4a69      	ldr	r2, [pc, #420]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	6213      	str	r3, [r2, #32]
 800182a:	4b67      	ldr	r3, [pc, #412]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a66      	ldr	r2, [pc, #408]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001830:	f023 0304 	bic.w	r3, r3, #4
 8001834:	6213      	str	r3, [r2, #32]
 8001836:	e01c      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d10c      	bne.n	800185a <HAL_RCC_OscConfig+0x356>
 8001840:	4b61      	ldr	r3, [pc, #388]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4a60      	ldr	r2, [pc, #384]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001846:	f043 0304 	orr.w	r3, r3, #4
 800184a:	6213      	str	r3, [r2, #32]
 800184c:	4b5e      	ldr	r3, [pc, #376]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	4a5d      	ldr	r2, [pc, #372]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	f043 0301 	orr.w	r3, r3, #1
 8001856:	6213      	str	r3, [r2, #32]
 8001858:	e00b      	b.n	8001872 <HAL_RCC_OscConfig+0x36e>
 800185a:	4b5b      	ldr	r3, [pc, #364]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800185c:	6a1b      	ldr	r3, [r3, #32]
 800185e:	4a5a      	ldr	r2, [pc, #360]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6213      	str	r3, [r2, #32]
 8001866:	4b58      	ldr	r3, [pc, #352]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	6a1b      	ldr	r3, [r3, #32]
 800186a:	4a57      	ldr	r2, [pc, #348]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68db      	ldr	r3, [r3, #12]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d015      	beq.n	80018a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7ff f837 	bl	80008ec <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001880:	e00a      	b.n	8001898 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001882:	f7ff f833 	bl	80008ec <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001890:	4293      	cmp	r3, r2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e0b1      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001898:	4b4b      	ldr	r3, [pc, #300]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f003 0302 	and.w	r3, r3, #2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0ee      	beq.n	8001882 <HAL_RCC_OscConfig+0x37e>
 80018a4:	e014      	b.n	80018d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a6:	f7ff f821 	bl	80008ec <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ac:	e00a      	b.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018ae:	f7ff f81d 	bl	80008ec <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018bc:	4293      	cmp	r3, r2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e09b      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c4:	4b40      	ldr	r3, [pc, #256]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1ee      	bne.n	80018ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d105      	bne.n	80018e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d6:	4b3c      	ldr	r3, [pc, #240]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a3b      	ldr	r2, [pc, #236]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8087 	beq.w	80019fa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ec:	4b36      	ldr	r3, [pc, #216]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b08      	cmp	r3, #8
 80018f6:	d061      	beq.n	80019bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d146      	bne.n	800198e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	4b33      	ldr	r3, [pc, #204]	@ (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7fe fff1 	bl	80008ec <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800190c:	e008      	b.n	8001920 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7fe ffed 	bl	80008ec <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	2b02      	cmp	r3, #2
 800191a:	d901      	bls.n	8001920 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e06d      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001920:	4b29      	ldr	r3, [pc, #164]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1f0      	bne.n	800190e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001934:	d108      	bne.n	8001948 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001936:	4b24      	ldr	r3, [pc, #144]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	4921      	ldr	r1, [pc, #132]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001948:	4b1f      	ldr	r3, [pc, #124]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a19      	ldr	r1, [r3, #32]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	430b      	orrs	r3, r1
 800195a:	491b      	ldr	r1, [pc, #108]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001960:	4b1b      	ldr	r3, [pc, #108]	@ (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001962:	2201      	movs	r2, #1
 8001964:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001966:	f7fe ffc1 	bl	80008ec <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7fe ffbd 	bl	80008ec <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e03d      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001980:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x46a>
 800198c:	e035      	b.n	80019fa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <HAL_RCC_OscConfig+0x4cc>)
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7fe ffaa 	bl	80008ec <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800199c:	f7fe ffa6 	bl	80008ec <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e026      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_RCC_OscConfig+0x4c4>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x498>
 80019ba:	e01e      	b.n	80019fa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69db      	ldr	r3, [r3, #28]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d107      	bne.n	80019d4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e019      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40007000 	.word	0x40007000
 80019d0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <HAL_RCC_OscConfig+0x500>)
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e0d0      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d910      	bls.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a2a:	4b67      	ldr	r3, [pc, #412]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 0207 	bic.w	r2, r3, #7
 8001a32:	4965      	ldr	r1, [pc, #404]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3a:	4b63      	ldr	r3, [pc, #396]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d001      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e0b8      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d020      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0304 	and.w	r3, r3, #4
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a64:	4b59      	ldr	r3, [pc, #356]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	4a58      	ldr	r2, [pc, #352]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001a6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d005      	beq.n	8001a88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a7c:	4b53      	ldr	r3, [pc, #332]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a52      	ldr	r2, [pc, #328]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001a86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4b50      	ldr	r3, [pc, #320]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	494d      	ldr	r1, [pc, #308]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d040      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aae:	4b47      	ldr	r3, [pc, #284]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d115      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e07f      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac6:	4b41      	ldr	r3, [pc, #260]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e073      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	4b3d      	ldr	r3, [pc, #244]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e06b      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae6:	4b39      	ldr	r3, [pc, #228]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f023 0203 	bic.w	r2, r3, #3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	4936      	ldr	r1, [pc, #216]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af8:	f7fe fef8 	bl	80008ec <HAL_GetTick>
 8001afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b00:	f7fe fef4 	bl	80008ec <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e053      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b16:	4b2d      	ldr	r3, [pc, #180]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f003 020c 	and.w	r2, r3, #12
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	009b      	lsls	r3, r3, #2
 8001b24:	429a      	cmp	r2, r3
 8001b26:	d1eb      	bne.n	8001b00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b28:	4b27      	ldr	r3, [pc, #156]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d210      	bcs.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	4b24      	ldr	r3, [pc, #144]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 0207 	bic.w	r2, r3, #7
 8001b3e:	4922      	ldr	r1, [pc, #136]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d001      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e032      	b.n	8001bbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d008      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b64:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	4916      	ldr	r1, [pc, #88]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0308 	and.w	r3, r3, #8
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d009      	beq.n	8001b96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b82:	4b12      	ldr	r3, [pc, #72]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	00db      	lsls	r3, r3, #3
 8001b90:	490e      	ldr	r1, [pc, #56]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b96:	f000 f821 	bl	8001bdc <HAL_RCC_GetSysClockFreq>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <HAL_RCC_ClockConfig+0x1c4>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	490a      	ldr	r1, [pc, #40]	@ (8001bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ba8:	5ccb      	ldrb	r3, [r1, r3]
 8001baa:	fa22 f303 	lsr.w	r3, r2, r3
 8001bae:	4a09      	ldr	r2, [pc, #36]	@ (8001bd4 <HAL_RCC_ClockConfig+0x1cc>)
 8001bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bb2:	4b09      	ldr	r3, [pc, #36]	@ (8001bd8 <HAL_RCC_ClockConfig+0x1d0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fd64 	bl	8000684 <HAL_InitTick>

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40022000 	.word	0x40022000
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08007050 	.word	0x08007050
 8001bd4:	20000000 	.word	0x20000000
 8001bd8:	20000004 	.word	0x20000004

08001bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	2300      	movs	r3, #0
 8001be8:	60bb      	str	r3, [r7, #8]
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	d002      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x30>
 8001c06:	2b08      	cmp	r3, #8
 8001c08:	d003      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0x36>
 8001c0a:	e027      	b.n	8001c5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c0e:	613b      	str	r3, [r7, #16]
      break;
 8001c10:	e027      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	0c9b      	lsrs	r3, r3, #18
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	4a17      	ldr	r2, [pc, #92]	@ (8001c78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001c1c:	5cd3      	ldrb	r3, [r2, r3]
 8001c1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d010      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c2a:	4b11      	ldr	r3, [pc, #68]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	0c5b      	lsrs	r3, r3, #17
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	4a11      	ldr	r2, [pc, #68]	@ (8001c7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c36:	5cd3      	ldrb	r3, [r2, r3]
 8001c38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c3e:	fb03 f202 	mul.w	r2, r3, r2
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	e004      	b.n	8001c56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c50:	fb02 f303 	mul.w	r3, r2, r3
 8001c54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	613b      	str	r3, [r7, #16]
      break;
 8001c5a:	e002      	b.n	8001c62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c5c:	4b05      	ldr	r3, [pc, #20]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001c5e:	613b      	str	r3, [r7, #16]
      break;
 8001c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c62:	693b      	ldr	r3, [r7, #16]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000
 8001c74:	007a1200 	.word	0x007a1200
 8001c78:	08007068 	.word	0x08007068
 8001c7c:	08007078 	.word	0x08007078
 8001c80:	003d0900 	.word	0x003d0900

08001c84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c88:	4b02      	ldr	r3, [pc, #8]	@ (8001c94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	20000000 	.word	0x20000000

08001c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c9c:	f7ff fff2 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b05      	ldr	r3, [pc, #20]	@ (8001cb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	4903      	ldr	r1, [pc, #12]	@ (8001cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cae:	5ccb      	ldrb	r3, [r1, r3]
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	08007060 	.word	0x08007060

08001cc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cc4:	f7ff ffde 	bl	8001c84 <HAL_RCC_GetHCLKFreq>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	4b05      	ldr	r3, [pc, #20]	@ (8001ce0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	0adb      	lsrs	r3, r3, #11
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	4903      	ldr	r1, [pc, #12]	@ (8001ce4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cd6:	5ccb      	ldrb	r3, [r1, r3]
 8001cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	08007060 	.word	0x08007060

08001ce8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	220f      	movs	r2, #15
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cf8:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_RCC_GetClockConfig+0x58>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 0203 	and.w	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d04:	4b0e      	ldr	r3, [pc, #56]	@ (8001d40 <HAL_RCC_GetClockConfig+0x58>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d10:	4b0b      	ldr	r3, [pc, #44]	@ (8001d40 <HAL_RCC_GetClockConfig+0x58>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d1c:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <HAL_RCC_GetClockConfig+0x58>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	08db      	lsrs	r3, r3, #3
 8001d22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_RCC_GetClockConfig+0x5c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0207 	and.w	r2, r3, #7
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40022000 	.word	0x40022000

08001d48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d50:	4b0a      	ldr	r3, [pc, #40]	@ (8001d7c <RCC_Delay+0x34>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	@ (8001d80 <RCC_Delay+0x38>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	0a5b      	lsrs	r3, r3, #9
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d64:	bf00      	nop
  }
  while (Delay --);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1e5a      	subs	r2, r3, #1
 8001d6a:	60fa      	str	r2, [r7, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1f9      	bne.n	8001d64 <RCC_Delay+0x1c>
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bc80      	pop	{r7}
 8001d7a:	4770      	bx	lr
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	10624dd3 	.word	0x10624dd3

08001d84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d07d      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10d      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db0:	4b4c      	ldr	r3, [pc, #304]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	4a4b      	ldr	r2, [pc, #300]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dba:	61d3      	str	r3, [r2, #28]
 8001dbc:	4b49      	ldr	r3, [pc, #292]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	4b46      	ldr	r3, [pc, #280]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d118      	bne.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd8:	4b43      	ldr	r3, [pc, #268]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a42      	ldr	r2, [pc, #264]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de4:	f7fe fd82 	bl	80008ec <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dea:	e008      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dec:	f7fe fd7e 	bl	80008ec <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e06d      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e0a:	4b36      	ldr	r3, [pc, #216]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d02e      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d027      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e32:	4b2e      	ldr	r3, [pc, #184]	@ (8001eec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e38:	4b2c      	ldr	r3, [pc, #176]	@ (8001eec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e3e:	4a29      	ldr	r2, [pc, #164]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d014      	beq.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e4e:	f7fe fd4d 	bl	80008ec <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe fd49 	bl	80008ec <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e036      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ee      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	4917      	ldr	r1, [pc, #92]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d105      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e90:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e92:	69db      	ldr	r3, [r3, #28]
 8001e94:	4a13      	ldr	r2, [pc, #76]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d008      	beq.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	490b      	ldr	r1, [pc, #44]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ec6:	4b07      	ldr	r3, [pc, #28]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4904      	ldr	r1, [pc, #16]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	42420440 	.word	0x42420440

08001ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d101      	bne.n	8001f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e041      	b.n	8001f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d106      	bne.n	8001f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f839 	bl	8001f8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4610      	mov	r0, r2
 8001f30:	f000 f99c 	bl	800226c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2201      	movs	r2, #1
 8001f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f8e:	b480      	push	{r7}
 8001f90:	b083      	sub	sp, #12
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d001      	beq.n	8001fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e03a      	b.n	800202e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f042 0201 	orr.w	r2, r2, #1
 8001fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a18      	ldr	r2, [pc, #96]	@ (8002038 <HAL_TIM_Base_Start_IT+0x98>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00e      	beq.n	8001ff8 <HAL_TIM_Base_Start_IT+0x58>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fe2:	d009      	beq.n	8001ff8 <HAL_TIM_Base_Start_IT+0x58>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a14      	ldr	r2, [pc, #80]	@ (800203c <HAL_TIM_Base_Start_IT+0x9c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d004      	beq.n	8001ff8 <HAL_TIM_Base_Start_IT+0x58>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a13      	ldr	r2, [pc, #76]	@ (8002040 <HAL_TIM_Base_Start_IT+0xa0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d111      	bne.n	800201c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2b06      	cmp	r3, #6
 8002008:	d010      	beq.n	800202c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0201 	orr.w	r2, r2, #1
 8002018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800201a:	e007      	b.n	800202c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	40012c00 	.word	0x40012c00
 800203c:	40000400 	.word	0x40000400
 8002040:	40000800 	.word	0x40000800

08002044 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d020      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01b      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0202 	mvn.w	r2, #2
 8002078:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	699b      	ldr	r3, [r3, #24]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f8d1 	bl	8002236 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8c4 	bl	8002224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f8d3 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d020      	beq.n	80020f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d01b      	beq.n	80020f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0204 	mvn.w	r2, #4
 80020c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2202      	movs	r2, #2
 80020ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f8ab 	bl	8002236 <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f89e 	bl	8002224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f8ad 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	f003 0308 	and.w	r3, r3, #8
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d020      	beq.n	8002140 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01b      	beq.n	8002140 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f06f 0208 	mvn.w	r2, #8
 8002110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2204      	movs	r2, #4
 8002116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d003      	beq.n	800212e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f885 	bl	8002236 <HAL_TIM_IC_CaptureCallback>
 800212c:	e005      	b.n	800213a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f878 	bl	8002224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f000 f887 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	2b00      	cmp	r3, #0
 8002148:	d020      	beq.n	800218c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 0310 	and.w	r3, r3, #16
 8002150:	2b00      	cmp	r3, #0
 8002152:	d01b      	beq.n	800218c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0210 	mvn.w	r2, #16
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2208      	movs	r2, #8
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f85f 	bl	8002236 <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f852 	bl	8002224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f861 	bl	8002248 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d00c      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	2b00      	cmp	r3, #0
 800219e:	d007      	beq.n	80021b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f06f 0201 	mvn.w	r2, #1
 80021a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7fe f976 	bl	800049c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00c      	beq.n	80021d4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d007      	beq.n	80021d4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f8c3 	bl	800235a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00c      	beq.n	80021f8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f000 f831 	bl	800225a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00c      	beq.n	800221c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d007      	beq.n	800221c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f06f 0220 	mvn.w	r2, #32
 8002214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f000 f896 	bl	8002348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr

08002236 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002236:	b480      	push	{r7}
 8002238:	b083      	sub	sp, #12
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr

0800225a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002262:	bf00      	nop
 8002264:	370c      	adds	r7, #12
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr

0800226c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a2f      	ldr	r2, [pc, #188]	@ (800233c <TIM_Base_SetConfig+0xd0>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d00b      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800228a:	d007      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a2c      	ldr	r2, [pc, #176]	@ (8002340 <TIM_Base_SetConfig+0xd4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d003      	beq.n	800229c <TIM_Base_SetConfig+0x30>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a2b      	ldr	r2, [pc, #172]	@ (8002344 <TIM_Base_SetConfig+0xd8>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d108      	bne.n	80022ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	68fa      	ldr	r2, [r7, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a22      	ldr	r2, [pc, #136]	@ (800233c <TIM_Base_SetConfig+0xd0>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d00b      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022bc:	d007      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1f      	ldr	r2, [pc, #124]	@ (8002340 <TIM_Base_SetConfig+0xd4>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d003      	beq.n	80022ce <TIM_Base_SetConfig+0x62>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a1e      	ldr	r2, [pc, #120]	@ (8002344 <TIM_Base_SetConfig+0xd8>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d108      	bne.n	80022e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80022d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	68fa      	ldr	r2, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a0d      	ldr	r2, [pc, #52]	@ (800233c <TIM_Base_SetConfig+0xd0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d103      	bne.n	8002314 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	691a      	ldr	r2, [r3, #16]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f023 0201 	bic.w	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	611a      	str	r2, [r3, #16]
  }
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	40012c00 	.word	0x40012c00
 8002340:	40000400 	.word	0x40000400
 8002344:	40000800 	.word	0x40000800

08002348 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e042      	b.n	8002404 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d106      	bne.n	8002398 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe f922 	bl	80005dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2224      	movs	r2, #36	@ 0x24
 800239c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80023ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 fd63 	bl	8002e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2220      	movs	r2, #32
 80023f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2220      	movs	r2, #32
 80023f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	@ 0x28
 8002410:	af02      	add	r7, sp, #8
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b20      	cmp	r3, #32
 800242a:	d175      	bne.n	8002518 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_UART_Transmit+0x2c>
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e06e      	b.n	800251a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2221      	movs	r2, #33	@ 0x21
 8002446:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800244a:	f7fe fa4f 	bl	80008ec <HAL_GetTick>
 800244e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	88fa      	ldrh	r2, [r7, #6]
 800245a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002464:	d108      	bne.n	8002478 <HAL_UART_Transmit+0x6c>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d104      	bne.n	8002478 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	61bb      	str	r3, [r7, #24]
 8002476:	e003      	b.n	8002480 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002480:	e02e      	b.n	80024e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	2200      	movs	r2, #0
 800248a:	2180      	movs	r1, #128	@ 0x80
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fb01 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2220      	movs	r2, #32
 800249c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e03a      	b.n	800251a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10b      	bne.n	80024c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	461a      	mov	r2, r3
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	3302      	adds	r3, #2
 80024be:	61bb      	str	r3, [r7, #24]
 80024c0:	e007      	b.n	80024d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	781a      	ldrb	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	3301      	adds	r3, #1
 80024d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1cb      	bne.n	8002482 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	2200      	movs	r2, #0
 80024f2:	2140      	movs	r1, #64	@ 0x40
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 facd 	bl	8002a94 <UART_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e006      	b.n	800251a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002514:	2300      	movs	r3, #0
 8002516:	e000      	b.n	800251a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002518:	2302      	movs	r3, #2
  }
}
 800251a:	4618      	mov	r0, r3
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0ba      	sub	sp, #232	@ 0xe8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002562:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10f      	bne.n	800258a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800256a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <HAL_UART_IRQHandler+0x66>
 8002576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800257a:	f003 0320 	and.w	r3, r3, #32
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 fbbc 	bl	8002d00 <UART_Receive_IT>
      return;
 8002588:	e25b      	b.n	8002a42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800258a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 80de 	beq.w	8002750 <HAL_UART_IRQHandler+0x22c>
 8002594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002598:	f003 0301 	and.w	r3, r3, #1
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80025a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 80d1 	beq.w	8002750 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80025ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_UART_IRQHandler+0xae>
 80025ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80025be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d005      	beq.n	80025d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	f043 0201 	orr.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d00b      	beq.n	80025f6 <HAL_UART_IRQHandler+0xd2>
 80025de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f043 0202 	orr.w	r2, r3, #2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_UART_IRQHandler+0xf6>
 8002602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002612:	f043 0204 	orr.w	r2, r3, #4
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800261a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800261e:	f003 0308 	and.w	r3, r3, #8
 8002622:	2b00      	cmp	r3, #0
 8002624:	d011      	beq.n	800264a <HAL_UART_IRQHandler+0x126>
 8002626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b00      	cmp	r3, #0
 8002630:	d105      	bne.n	800263e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d005      	beq.n	800264a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002642:	f043 0208 	orr.w	r2, r3, #8
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 81f2 	beq.w	8002a38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002658:	f003 0320 	and.w	r3, r3, #32
 800265c:	2b00      	cmp	r3, #0
 800265e:	d008      	beq.n	8002672 <HAL_UART_IRQHandler+0x14e>
 8002660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fb47 	bl	8002d00 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d103      	bne.n	800269e <HAL_UART_IRQHandler+0x17a>
 8002696:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800269a:	2b00      	cmp	r3, #0
 800269c:	d04f      	beq.n	800273e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 fa51 	bl	8002b46 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d041      	beq.n	8002736 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3314      	adds	r3, #20
 80026b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80026c0:	e853 3f00 	ldrex	r3, [r3]
 80026c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80026c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80026cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80026d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	3314      	adds	r3, #20
 80026da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80026de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80026e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80026ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80026ee:	e841 2300 	strex	r3, r2, [r1]
 80026f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80026f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1d9      	bne.n	80026b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d013      	beq.n	800272e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800270a:	4a7e      	ldr	r2, [pc, #504]	@ (8002904 <HAL_UART_IRQHandler+0x3e0>)
 800270c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002712:	4618      	mov	r0, r3
 8002714:	f7fe fcfa 	bl	800110c <HAL_DMA_Abort_IT>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d016      	beq.n	800274c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002728:	4610      	mov	r0, r2
 800272a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272c:	e00e      	b.n	800274c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f99c 	bl	8002a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002734:	e00a      	b.n	800274c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f998 	bl	8002a6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800273c:	e006      	b.n	800274c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f994 	bl	8002a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800274a:	e175      	b.n	8002a38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800274c:	bf00      	nop
    return;
 800274e:	e173      	b.n	8002a38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	2b01      	cmp	r3, #1
 8002756:	f040 814f 	bne.w	80029f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800275a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8148 	beq.w	80029f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002768:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 8141 	beq.w	80029f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	60bb      	str	r3, [r7, #8]
 800278a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002796:	2b00      	cmp	r3, #0
 8002798:	f000 80b6 	beq.w	8002908 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 8145 	beq.w	8002a3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80027b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027ba:	429a      	cmp	r2, r3
 80027bc:	f080 813e 	bcs.w	8002a3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80027c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	f000 8088 	beq.w	80028e4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	330c      	adds	r3, #12
 80027da:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027e2:	e853 3f00 	ldrex	r3, [r3]
 80027e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80027ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80027ee:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002800:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002804:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002808:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800280c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002810:	e841 2300 	strex	r3, r2, [r1]
 8002814:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002818:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1d9      	bne.n	80027d4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	3314      	adds	r3, #20
 8002826:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800282a:	e853 3f00 	ldrex	r3, [r3]
 800282e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002830:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002832:	f023 0301 	bic.w	r3, r3, #1
 8002836:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	3314      	adds	r3, #20
 8002840:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002844:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002848:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800284c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002850:	e841 2300 	strex	r3, r2, [r1]
 8002854:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002856:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e1      	bne.n	8002820 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	3314      	adds	r3, #20
 8002862:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002864:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002866:	e853 3f00 	ldrex	r3, [r3]
 800286a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800286c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800286e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002872:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	3314      	adds	r3, #20
 800287c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002880:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002882:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002884:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002886:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002888:	e841 2300 	strex	r3, r2, [r1]
 800288c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800288e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002890:	2b00      	cmp	r3, #0
 8002892:	d1e3      	bne.n	800285c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2220      	movs	r2, #32
 8002898:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80028b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028b4:	f023 0310 	bic.w	r3, r3, #16
 80028b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80028c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80028c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80028cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80028d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e3      	bne.n	80028a2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028de:	4618      	mov	r0, r3
 80028e0:	f7fe fbd9 	bl	8001096 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f8bf 	bl	8002a7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002900:	e09c      	b.n	8002a3c <HAL_UART_IRQHandler+0x518>
 8002902:	bf00      	nop
 8002904:	08002c0b 	.word	0x08002c0b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002910:	b29b      	uxth	r3, r3
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800291c:	b29b      	uxth	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 808e 	beq.w	8002a40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8089 	beq.w	8002a40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	330c      	adds	r3, #12
 8002934:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002938:	e853 3f00 	ldrex	r3, [r3]
 800293c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800293e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002940:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002944:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	330c      	adds	r3, #12
 800294e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002952:	647a      	str	r2, [r7, #68]	@ 0x44
 8002954:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002956:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002958:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800295a:	e841 2300 	strex	r3, r2, [r1]
 800295e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1e3      	bne.n	800292e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	3314      	adds	r3, #20
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002970:	e853 3f00 	ldrex	r3, [r3]
 8002974:	623b      	str	r3, [r7, #32]
   return(result);
 8002976:	6a3b      	ldr	r3, [r7, #32]
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	3314      	adds	r3, #20
 8002986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800298a:	633a      	str	r2, [r7, #48]	@ 0x30
 800298c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002990:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002992:	e841 2300 	strex	r3, r2, [r1]
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1e3      	bne.n	8002966 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	330c      	adds	r3, #12
 80029b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	e853 3f00 	ldrex	r3, [r3]
 80029ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f023 0310 	bic.w	r3, r3, #16
 80029c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	330c      	adds	r3, #12
 80029cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80029d0:	61fa      	str	r2, [r7, #28]
 80029d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d4:	69b9      	ldr	r1, [r7, #24]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	e841 2300 	strex	r3, r2, [r1]
 80029dc:	617b      	str	r3, [r7, #20]
   return(result);
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e3      	bne.n	80029ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80029ee:	4619      	mov	r1, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f844 	bl	8002a7e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80029f6:	e023      	b.n	8002a40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d009      	beq.n	8002a18 <HAL_UART_IRQHandler+0x4f4>
 8002a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 f90e 	bl	8002c32 <UART_Transmit_IT>
    return;
 8002a16:	e014      	b.n	8002a42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00e      	beq.n	8002a42 <HAL_UART_IRQHandler+0x51e>
 8002a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f94d 	bl	8002cd0 <UART_EndTransmit_IT>
    return;
 8002a36:	e004      	b.n	8002a42 <HAL_UART_IRQHandler+0x51e>
    return;
 8002a38:	bf00      	nop
 8002a3a:	e002      	b.n	8002a42 <HAL_UART_IRQHandler+0x51e>
      return;
 8002a3c:	bf00      	nop
 8002a3e:	e000      	b.n	8002a42 <HAL_UART_IRQHandler+0x51e>
      return;
 8002a40:	bf00      	nop
  }
}
 8002a42:	37e8      	adds	r7, #232	@ 0xe8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr

08002a6c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	603b      	str	r3, [r7, #0]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002aa4:	e03b      	b.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d037      	beq.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aae:	f7fd ff1d 	bl	80008ec <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	6a3a      	ldr	r2, [r7, #32]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d302      	bcc.n	8002ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e03a      	b.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f003 0304 	and.w	r3, r3, #4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d023      	beq.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	2b80      	cmp	r3, #128	@ 0x80
 8002ada:	d020      	beq.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b40      	cmp	r3, #64	@ 0x40
 8002ae0:	d01d      	beq.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0308 	and.w	r3, r3, #8
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d116      	bne.n	8002b1e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002af0:	2300      	movs	r3, #0
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 f81d 	bl	8002b46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2208      	movs	r2, #8
 8002b10:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00f      	b.n	8002b3e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4013      	ands	r3, r2
 8002b28:	68ba      	ldr	r2, [r7, #8]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	bf0c      	ite	eq
 8002b2e:	2301      	moveq	r3, #1
 8002b30:	2300      	movne	r3, #0
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	461a      	mov	r2, r3
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d0b4      	beq.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b095      	sub	sp, #84	@ 0x54
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	330c      	adds	r3, #12
 8002b54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b58:	e853 3f00 	ldrex	r3, [r3]
 8002b5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	330c      	adds	r3, #12
 8002b6c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002b6e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002b74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002b76:	e841 2300 	strex	r3, r2, [r1]
 8002b7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1e5      	bne.n	8002b4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3314      	adds	r3, #20
 8002b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	f023 0301 	bic.w	r3, r3, #1
 8002b98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	3314      	adds	r3, #20
 8002ba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e5      	bne.n	8002b82 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d119      	bne.n	8002bf2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	330c      	adds	r3, #12
 8002bc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	e853 3f00 	ldrex	r3, [r3]
 8002bcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	f023 0310 	bic.w	r3, r3, #16
 8002bd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002bde:	61ba      	str	r2, [r7, #24]
 8002be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be2:	6979      	ldr	r1, [r7, #20]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	e841 2300 	strex	r3, r2, [r1]
 8002bea:	613b      	str	r3, [r7, #16]
   return(result);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1e5      	bne.n	8002bbe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002c00:	bf00      	nop
 8002c02:	3754      	adds	r7, #84	@ 0x54
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c16:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff ff21 	bl	8002a6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c2a:	bf00      	nop
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b21      	cmp	r3, #33	@ 0x21
 8002c44:	d13e      	bne.n	8002cc4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c4e:	d114      	bne.n	8002c7a <UART_Transmit_IT+0x48>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d110      	bne.n	8002c7a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c6c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	1c9a      	adds	r2, r3, #2
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	621a      	str	r2, [r3, #32]
 8002c78:	e008      	b.n	8002c8c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a1b      	ldr	r3, [r3, #32]
 8002c7e:	1c59      	adds	r1, r3, #1
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6211      	str	r1, [r2, #32]
 8002c84:	781a      	ldrb	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	4619      	mov	r1, r3
 8002c9a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10f      	bne.n	8002cc0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68da      	ldr	r2, [r3, #12]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cbe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e000      	b.n	8002cc6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002cc4:	2302      	movs	r3, #2
  }
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7ff fea9 	bl	8002a48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b08c      	sub	sp, #48	@ 0x30
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b22      	cmp	r3, #34	@ 0x22
 8002d12:	f040 80ae 	bne.w	8002e72 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d1e:	d117      	bne.n	8002d50 <UART_Receive_IT+0x50>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d113      	bne.n	8002d50 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d30:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d42:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d48:	1c9a      	adds	r2, r3, #2
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d4e:	e026      	b.n	8002d9e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d62:	d007      	beq.n	8002d74 <UART_Receive_IT+0x74>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10a      	bne.n	8002d82 <UART_Receive_IT+0x82>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d106      	bne.n	8002d82 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e008      	b.n	8002d94 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d92:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4619      	mov	r1, r3
 8002dac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d15d      	bne.n	8002e6e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0220 	bic.w	r2, r2, #32
 8002dc0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dd0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695a      	ldr	r2, [r3, #20]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d135      	bne.n	8002e64 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	330c      	adds	r3, #12
 8002e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	e853 3f00 	ldrex	r3, [r3]
 8002e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f023 0310 	bic.w	r3, r3, #16
 8002e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	330c      	adds	r3, #12
 8002e1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e1e:	623a      	str	r2, [r7, #32]
 8002e20:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e22:	69f9      	ldr	r1, [r7, #28]
 8002e24:	6a3a      	ldr	r2, [r7, #32]
 8002e26:	e841 2300 	strex	r3, r2, [r1]
 8002e2a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1e5      	bne.n	8002dfe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b10      	cmp	r3, #16
 8002e3e:	d10a      	bne.n	8002e56 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e40:	2300      	movs	r3, #0
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7ff fe0e 	bl	8002a7e <HAL_UARTEx_RxEventCallback>
 8002e62:	e002      	b.n	8002e6a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff fdf8 	bl	8002a5a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	e002      	b.n	8002e74 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	e000      	b.n	8002e74 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
  }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3730      	adds	r7, #48	@ 0x30
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002eb6:	f023 030c 	bic.w	r3, r3, #12
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2c      	ldr	r2, [pc, #176]	@ (8002f90 <UART_SetConfig+0x114>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d103      	bne.n	8002eec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ee4:	f7fe feec 	bl	8001cc0 <HAL_RCC_GetPCLK2Freq>
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	e002      	b.n	8002ef2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002eec:	f7fe fed4 	bl	8001c98 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009a      	lsls	r2, r3, #2
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	4a22      	ldr	r2, [pc, #136]	@ (8002f94 <UART_SetConfig+0x118>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	0119      	lsls	r1, r3, #4
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009a      	lsls	r2, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f28:	4b1a      	ldr	r3, [pc, #104]	@ (8002f94 <UART_SetConfig+0x118>)
 8002f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2064      	movs	r0, #100	@ 0x64
 8002f32:	fb00 f303 	mul.w	r3, r0, r3
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	3332      	adds	r3, #50	@ 0x32
 8002f3c:	4a15      	ldr	r2, [pc, #84]	@ (8002f94 <UART_SetConfig+0x118>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f48:	4419      	add	r1, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009a      	lsls	r2, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f60:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <UART_SetConfig+0x118>)
 8002f62:	fba3 0302 	umull	r0, r3, r3, r2
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2064      	movs	r0, #100	@ 0x64
 8002f6a:	fb00 f303 	mul.w	r3, r0, r3
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	3332      	adds	r3, #50	@ 0x32
 8002f74:	4a07      	ldr	r2, [pc, #28]	@ (8002f94 <UART_SetConfig+0x118>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	440a      	add	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40013800 	.word	0x40013800
 8002f94:	51eb851f 	.word	0x51eb851f

08002f98 <__NVIC_SetPriority>:
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	6039      	str	r1, [r7, #0]
 8002fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	db0a      	blt.n	8002fc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	490c      	ldr	r1, [pc, #48]	@ (8002fe4 <__NVIC_SetPriority+0x4c>)
 8002fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fb6:	0112      	lsls	r2, r2, #4
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	440b      	add	r3, r1
 8002fbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002fc0:	e00a      	b.n	8002fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	4908      	ldr	r1, [pc, #32]	@ (8002fe8 <__NVIC_SetPriority+0x50>)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	3b04      	subs	r3, #4
 8002fd0:	0112      	lsls	r2, r2, #4
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	761a      	strb	r2, [r3, #24]
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bc80      	pop	{r7}
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	e000e100 	.word	0xe000e100
 8002fe8:	e000ed00 	.word	0xe000ed00

08002fec <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002ff0:	4b05      	ldr	r3, [pc, #20]	@ (8003008 <SysTick_Handler+0x1c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002ff4:	f002 f988 	bl	8005308 <xTaskGetSchedulerState>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d001      	beq.n	8003002 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002ffe:	f003 f82b 	bl	8006058 <xPortSysTickHandler>
  }
}
 8003002:	bf00      	nop
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	e000e010 	.word	0xe000e010

0800300c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003010:	2100      	movs	r1, #0
 8003012:	f06f 0004 	mvn.w	r0, #4
 8003016:	f7ff ffbf 	bl	8002f98 <__NVIC_SetPriority>
#endif
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003026:	f3ef 8305 	mrs	r3, IPSR
 800302a:	603b      	str	r3, [r7, #0]
  return(result);
 800302c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003032:	f06f 0305 	mvn.w	r3, #5
 8003036:	607b      	str	r3, [r7, #4]
 8003038:	e00c      	b.n	8003054 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800303a:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <osKernelInitialize+0x40>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d105      	bne.n	800304e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003042:	4b07      	ldr	r3, [pc, #28]	@ (8003060 <osKernelInitialize+0x40>)
 8003044:	2201      	movs	r2, #1
 8003046:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003048:	2300      	movs	r3, #0
 800304a:	607b      	str	r3, [r7, #4]
 800304c:	e002      	b.n	8003054 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003054:	687b      	ldr	r3, [r7, #4]
}
 8003056:	4618      	mov	r0, r3
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	20000154 	.word	0x20000154

08003064 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800306a:	f3ef 8305 	mrs	r3, IPSR
 800306e:	603b      	str	r3, [r7, #0]
  return(result);
 8003070:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003076:	f06f 0305 	mvn.w	r3, #5
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	e010      	b.n	80030a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800307e:	4b0b      	ldr	r3, [pc, #44]	@ (80030ac <osKernelStart+0x48>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	2b01      	cmp	r3, #1
 8003084:	d109      	bne.n	800309a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003086:	f7ff ffc1 	bl	800300c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800308a:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <osKernelStart+0x48>)
 800308c:	2202      	movs	r2, #2
 800308e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003090:	f001 fcda 	bl	8004a48 <vTaskStartScheduler>
      stat = osOK;
 8003094:	2300      	movs	r3, #0
 8003096:	607b      	str	r3, [r7, #4]
 8003098:	e002      	b.n	80030a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800309a:	f04f 33ff 	mov.w	r3, #4294967295
 800309e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030a0:	687b      	ldr	r3, [r7, #4]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000154 	.word	0x20000154

080030b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08e      	sub	sp, #56	@ 0x38
 80030b4:	af04      	add	r7, sp, #16
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030c0:	f3ef 8305 	mrs	r3, IPSR
 80030c4:	617b      	str	r3, [r7, #20]
  return(result);
 80030c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d17e      	bne.n	80031ca <osThreadNew+0x11a>
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d07b      	beq.n	80031ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80030d2:	2380      	movs	r3, #128	@ 0x80
 80030d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80030d6:	2318      	movs	r3, #24
 80030d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80030de:	f04f 33ff 	mov.w	r3, #4294967295
 80030e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d045      	beq.n	8003176 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d002      	beq.n	80030f8 <osThreadNew+0x48>
        name = attr->name;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	699b      	ldr	r3, [r3, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d008      	beq.n	800311e <osThreadNew+0x6e>
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b38      	cmp	r3, #56	@ 0x38
 8003110:	d805      	bhi.n	800311e <osThreadNew+0x6e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <osThreadNew+0x72>
        return (NULL);
 800311e:	2300      	movs	r3, #0
 8003120:	e054      	b.n	80031cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00e      	beq.n	8003158 <osThreadNew+0xa8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	2ba7      	cmp	r3, #167	@ 0xa7
 8003140:	d90a      	bls.n	8003158 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003146:	2b00      	cmp	r3, #0
 8003148:	d006      	beq.n	8003158 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d002      	beq.n	8003158 <osThreadNew+0xa8>
        mem = 1;
 8003152:	2301      	movs	r3, #1
 8003154:	61bb      	str	r3, [r7, #24]
 8003156:	e010      	b.n	800317a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10c      	bne.n	800317a <osThreadNew+0xca>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <osThreadNew+0xca>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <osThreadNew+0xca>
          mem = 0;
 8003170:	2300      	movs	r3, #0
 8003172:	61bb      	str	r3, [r7, #24]
 8003174:	e001      	b.n	800317a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d110      	bne.n	80031a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003188:	9202      	str	r2, [sp, #8]
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	6a3a      	ldr	r2, [r7, #32]
 8003194:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f001 fa62 	bl	8004660 <xTaskCreateStatic>
 800319c:	4603      	mov	r3, r0
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	e013      	b.n	80031ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d110      	bne.n	80031ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031a8:	6a3b      	ldr	r3, [r7, #32]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	f107 0310 	add.w	r3, r7, #16
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f001 fab0 	bl	8004720 <xTaskCreate>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d001      	beq.n	80031ca <osThreadNew+0x11a>
            hTask = NULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80031ca:	693b      	ldr	r3, [r7, #16]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3728      	adds	r7, #40	@ 0x28
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031dc:	f3ef 8305 	mrs	r3, IPSR
 80031e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80031e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <osDelay+0x1c>
    stat = osErrorISR;
 80031e8:	f06f 0305 	mvn.w	r3, #5
 80031ec:	60fb      	str	r3, [r7, #12]
 80031ee:	e007      	b.n	8003200 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <osDelay+0x2c>
      vTaskDelay(ticks);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f001 fbee 	bl	80049dc <vTaskDelay>
    }
  }

  return (stat);
 8003200:	68fb      	ldr	r3, [r7, #12]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800320a:	b580      	push	{r7, lr}
 800320c:	b08a      	sub	sp, #40	@ 0x28
 800320e:	af02      	add	r7, sp, #8
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003216:	2300      	movs	r3, #0
 8003218:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800321a:	f3ef 8305 	mrs	r3, IPSR
 800321e:	613b      	str	r3, [r7, #16]
  return(result);
 8003220:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003222:	2b00      	cmp	r3, #0
 8003224:	d175      	bne.n	8003312 <osSemaphoreNew+0x108>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d072      	beq.n	8003312 <osSemaphoreNew+0x108>
 800322c:	68ba      	ldr	r2, [r7, #8]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	429a      	cmp	r2, r3
 8003232:	d86e      	bhi.n	8003312 <osSemaphoreNew+0x108>
    mem = -1;
 8003234:	f04f 33ff 	mov.w	r3, #4294967295
 8003238:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d006      	beq.n	8003256 <osSemaphoreNew+0x4c>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b4f      	cmp	r3, #79	@ 0x4f
 800324e:	d902      	bls.n	8003256 <osSemaphoreNew+0x4c>
        mem = 1;
 8003250:	2301      	movs	r3, #1
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	e00c      	b.n	8003270 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d108      	bne.n	8003270 <osSemaphoreNew+0x66>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d104      	bne.n	8003270 <osSemaphoreNew+0x66>
          mem = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
 800326a:	e001      	b.n	8003270 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d04c      	beq.n	8003312 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d128      	bne.n	80032d0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b01      	cmp	r3, #1
 8003282:	d10a      	bne.n	800329a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	2203      	movs	r2, #3
 800328a:	9200      	str	r2, [sp, #0]
 800328c:	2200      	movs	r2, #0
 800328e:	2100      	movs	r1, #0
 8003290:	2001      	movs	r0, #1
 8003292:	f000 fa25 	bl	80036e0 <xQueueGenericCreateStatic>
 8003296:	61f8      	str	r0, [r7, #28]
 8003298:	e005      	b.n	80032a6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800329a:	2203      	movs	r2, #3
 800329c:	2100      	movs	r1, #0
 800329e:	2001      	movs	r0, #1
 80032a0:	f000 fa9b 	bl	80037da <xQueueGenericCreate>
 80032a4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d022      	beq.n	80032f2 <osSemaphoreNew+0xe8>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01f      	beq.n	80032f2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80032b2:	2300      	movs	r3, #0
 80032b4:	2200      	movs	r2, #0
 80032b6:	2100      	movs	r1, #0
 80032b8:	69f8      	ldr	r0, [r7, #28]
 80032ba:	f000 fb5b 	bl	8003974 <xQueueGenericSend>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d016      	beq.n	80032f2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80032c4:	69f8      	ldr	r0, [r7, #28]
 80032c6:	f000 fff9 	bl	80042bc <vQueueDelete>
            hSemaphore = NULL;
 80032ca:	2300      	movs	r3, #0
 80032cc:	61fb      	str	r3, [r7, #28]
 80032ce:	e010      	b.n	80032f2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d108      	bne.n	80032e8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	461a      	mov	r2, r3
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f000 fad9 	bl	8003896 <xQueueCreateCountingSemaphoreStatic>
 80032e4:	61f8      	str	r0, [r7, #28]
 80032e6:	e004      	b.n	80032f2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80032e8:	68b9      	ldr	r1, [r7, #8]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fb0c 	bl	8003908 <xQueueCreateCountingSemaphore>
 80032f0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00c      	beq.n	8003312 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <osSemaphoreNew+0xfc>
          name = attr->name;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	617b      	str	r3, [r7, #20]
 8003304:	e001      	b.n	800330a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800330a:	6979      	ldr	r1, [r7, #20]
 800330c:	69f8      	ldr	r0, [r7, #28]
 800330e:	f001 f921 	bl	8004554 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003312:	69fb      	ldr	r3, [r7, #28]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d103      	bne.n	800333c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003334:	f06f 0303 	mvn.w	r3, #3
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	e039      	b.n	80033b0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800333c:	f3ef 8305 	mrs	r3, IPSR
 8003340:	60fb      	str	r3, [r7, #12]
  return(result);
 8003342:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003344:	2b00      	cmp	r3, #0
 8003346:	d022      	beq.n	800338e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800334e:	f06f 0303 	mvn.w	r3, #3
 8003352:	617b      	str	r3, [r7, #20]
 8003354:	e02c      	b.n	80033b0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800335a:	f107 0308 	add.w	r3, r7, #8
 800335e:	461a      	mov	r2, r3
 8003360:	2100      	movs	r1, #0
 8003362:	6938      	ldr	r0, [r7, #16]
 8003364:	f000 ff28 	bl	80041b8 <xQueueReceiveFromISR>
 8003368:	4603      	mov	r3, r0
 800336a:	2b01      	cmp	r3, #1
 800336c:	d003      	beq.n	8003376 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800336e:	f06f 0302 	mvn.w	r3, #2
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e01c      	b.n	80033b0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d019      	beq.n	80033b0 <osSemaphoreAcquire+0x94>
 800337c:	4b0f      	ldr	r3, [pc, #60]	@ (80033bc <osSemaphoreAcquire+0xa0>)
 800337e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	e010      	b.n	80033b0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800338e:	6839      	ldr	r1, [r7, #0]
 8003390:	6938      	ldr	r0, [r7, #16]
 8003392:	f000 fe01 	bl	8003f98 <xQueueSemaphoreTake>
 8003396:	4603      	mov	r3, r0
 8003398:	2b01      	cmp	r3, #1
 800339a:	d009      	beq.n	80033b0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80033a2:	f06f 0301 	mvn.w	r3, #1
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e002      	b.n	80033b0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80033aa:	f06f 0302 	mvn.w	r3, #2
 80033ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80033b0:	697b      	ldr	r3, [r7, #20]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	e000ed04 	.word	0xe000ed04

080033c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d103      	bne.n	80033de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80033d6:	f06f 0303 	mvn.w	r3, #3
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e02c      	b.n	8003438 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033de:	f3ef 8305 	mrs	r3, IPSR
 80033e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80033e4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d01a      	beq.n	8003420 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80033ea:	2300      	movs	r3, #0
 80033ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80033ee:	f107 0308 	add.w	r3, r7, #8
 80033f2:	4619      	mov	r1, r3
 80033f4:	6938      	ldr	r0, [r7, #16]
 80033f6:	f000 fc5d 	bl	8003cb4 <xQueueGiveFromISR>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d003      	beq.n	8003408 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003400:	f06f 0302 	mvn.w	r3, #2
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	e017      	b.n	8003438 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d014      	beq.n	8003438 <osSemaphoreRelease+0x78>
 800340e:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <osSemaphoreRelease+0x84>)
 8003410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	e00b      	b.n	8003438 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003420:	2300      	movs	r3, #0
 8003422:	2200      	movs	r2, #0
 8003424:	2100      	movs	r1, #0
 8003426:	6938      	ldr	r0, [r7, #16]
 8003428:	f000 faa4 	bl	8003974 <xQueueGenericSend>
 800342c:	4603      	mov	r3, r0
 800342e:	2b01      	cmp	r3, #1
 8003430:	d002      	beq.n	8003438 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003432:	f06f 0302 	mvn.w	r3, #2
 8003436:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003438:	697b      	ldr	r3, [r7, #20]
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	e000ed04 	.word	0xe000ed04

08003448 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4a06      	ldr	r2, [pc, #24]	@ (8003470 <vApplicationGetIdleTaskMemory+0x28>)
 8003458:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4a05      	ldr	r2, [pc, #20]	@ (8003474 <vApplicationGetIdleTaskMemory+0x2c>)
 800345e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2280      	movs	r2, #128	@ 0x80
 8003464:	601a      	str	r2, [r3, #0]
}
 8003466:	bf00      	nop
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	20000158 	.word	0x20000158
 8003474:	20000200 	.word	0x20000200

08003478 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	4a07      	ldr	r2, [pc, #28]	@ (80034a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8003488:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	4a06      	ldr	r2, [pc, #24]	@ (80034a8 <vApplicationGetTimerTaskMemory+0x30>)
 800348e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003496:	601a      	str	r2, [r3, #0]
}
 8003498:	bf00      	nop
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000400 	.word	0x20000400
 80034a8:	200004a8 	.word	0x200004a8

080034ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f103 0208 	add.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f103 0208 	add.w	r2, r3, #8
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f103 0208 	add.w	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003502:	b480      	push	{r7}
 8003504:	b085      	sub	sp, #20
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	601a      	str	r2, [r3, #0]
}
 800353e:	bf00      	nop
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003548:	b480      	push	{r7}
 800354a:	b085      	sub	sp, #20
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355e:	d103      	bne.n	8003568 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e00c      	b.n	8003582 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3308      	adds	r3, #8
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	e002      	b.n	8003576 <vListInsert+0x2e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	68ba      	ldr	r2, [r7, #8]
 800357e:	429a      	cmp	r2, r3
 8003580:	d2f6      	bcs.n	8003570 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	601a      	str	r2, [r3, #0]
}
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	691b      	ldr	r3, [r3, #16]
 80035c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6892      	ldr	r2, [r2, #8]
 80035ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	687a      	ldr	r2, [r7, #4]
 80035d6:	6852      	ldr	r2, [r2, #4]
 80035d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d103      	bne.n	80035ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	1e5a      	subs	r2, r3, #1
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	bc80      	pop	{r7}
 8003608:	4770      	bx	lr
	...

0800360c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003624:	f383 8811 	msr	BASEPRI, r3
 8003628:	f3bf 8f6f 	isb	sy
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003632:	bf00      	nop
 8003634:	bf00      	nop
 8003636:	e7fd      	b.n	8003634 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003638:	f002 fc90 	bl	8005f5c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003644:	68f9      	ldr	r1, [r7, #12]
 8003646:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	441a      	add	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003668:	3b01      	subs	r3, #1
 800366a:	68f9      	ldr	r1, [r7, #12]
 800366c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800366e:	fb01 f303 	mul.w	r3, r1, r3
 8003672:	441a      	add	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	22ff      	movs	r2, #255	@ 0xff
 800367c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	22ff      	movs	r2, #255	@ 0xff
 8003684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d114      	bne.n	80036b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01a      	beq.n	80036cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	3310      	adds	r3, #16
 800369a:	4618      	mov	r0, r3
 800369c:	f001 fc6e 	bl	8004f7c <xTaskRemoveFromEventList>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d012      	beq.n	80036cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80036a6:	4b0d      	ldr	r3, [pc, #52]	@ (80036dc <xQueueGenericReset+0xd0>)
 80036a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ac:	601a      	str	r2, [r3, #0]
 80036ae:	f3bf 8f4f 	dsb	sy
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	e009      	b.n	80036cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3310      	adds	r3, #16
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fef5 	bl	80034ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	3324      	adds	r3, #36	@ 0x24
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fef0 	bl	80034ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036cc:	f002 fc76 	bl	8005fbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036d0:	2301      	movs	r3, #1
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	e000ed04 	.word	0xe000ed04

080036e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08e      	sub	sp, #56	@ 0x38
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80036f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f8:	f383 8811 	msr	BASEPRI, r3
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	f3bf 8f4f 	dsb	sy
 8003704:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003706:	bf00      	nop
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10b      	bne.n	800372a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	e7fd      	b.n	8003726 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <xQueueGenericCreateStatic+0x56>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d001      	beq.n	800373a <xQueueGenericCreateStatic+0x5a>
 8003736:	2301      	movs	r3, #1
 8003738:	e000      	b.n	800373c <xQueueGenericCreateStatic+0x5c>
 800373a:	2300      	movs	r3, #0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10b      	bne.n	8003758 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003744:	f383 8811 	msr	BASEPRI, r3
 8003748:	f3bf 8f6f 	isb	sy
 800374c:	f3bf 8f4f 	dsb	sy
 8003750:	623b      	str	r3, [r7, #32]
}
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	e7fd      	b.n	8003754 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d102      	bne.n	8003764 <xQueueGenericCreateStatic+0x84>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d101      	bne.n	8003768 <xQueueGenericCreateStatic+0x88>
 8003764:	2301      	movs	r3, #1
 8003766:	e000      	b.n	800376a <xQueueGenericCreateStatic+0x8a>
 8003768:	2300      	movs	r3, #0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10b      	bne.n	8003786 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800376e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003772:	f383 8811 	msr	BASEPRI, r3
 8003776:	f3bf 8f6f 	isb	sy
 800377a:	f3bf 8f4f 	dsb	sy
 800377e:	61fb      	str	r3, [r7, #28]
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	e7fd      	b.n	8003782 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003786:	2350      	movs	r3, #80	@ 0x50
 8003788:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b50      	cmp	r3, #80	@ 0x50
 800378e:	d00b      	beq.n	80037a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003794:	f383 8811 	msr	BASEPRI, r3
 8003798:	f3bf 8f6f 	isb	sy
 800379c:	f3bf 8f4f 	dsb	sy
 80037a0:	61bb      	str	r3, [r7, #24]
}
 80037a2:	bf00      	nop
 80037a4:	bf00      	nop
 80037a6:	e7fd      	b.n	80037a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80037a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80037ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00d      	beq.n	80037d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80037b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80037c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	4613      	mov	r3, r2
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f840 	bl	8003850 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3730      	adds	r7, #48	@ 0x30
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b08a      	sub	sp, #40	@ 0x28
 80037de:	af02      	add	r7, sp, #8
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	4613      	mov	r3, r2
 80037e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <xQueueGenericCreate+0x2c>
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	613b      	str	r3, [r7, #16]
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	e7fd      	b.n	8003802 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	3350      	adds	r3, #80	@ 0x50
 8003814:	4618      	mov	r0, r3
 8003816:	f002 fca3 	bl	8006160 <pvPortMalloc>
 800381a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d011      	beq.n	8003846 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	3350      	adds	r3, #80	@ 0x50
 800382a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800382c:	69bb      	ldr	r3, [r7, #24]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003834:	79fa      	ldrb	r2, [r7, #7]
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f805 	bl	8003850 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003846:	69bb      	ldr	r3, [r7, #24]
	}
 8003848:	4618      	mov	r0, r3
 800384a:	3720      	adds	r7, #32
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d103      	bne.n	800386c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	e002      	b.n	8003872 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	68fa      	ldr	r2, [r7, #12]
 8003876:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800387e:	2101      	movs	r1, #1
 8003880:	69b8      	ldr	r0, [r7, #24]
 8003882:	f7ff fec3 	bl	800360c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800388e:	bf00      	nop
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003896:	b580      	push	{r7, lr}
 8003898:	b08a      	sub	sp, #40	@ 0x28
 800389a:	af02      	add	r7, sp, #8
 800389c:	60f8      	str	r0, [r7, #12]
 800389e:	60b9      	str	r1, [r7, #8]
 80038a0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80038a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ac:	f383 8811 	msr	BASEPRI, r3
 80038b0:	f3bf 8f6f 	isb	sy
 80038b4:	f3bf 8f4f 	dsb	sy
 80038b8:	61bb      	str	r3, [r7, #24]
}
 80038ba:	bf00      	nop
 80038bc:	bf00      	nop
 80038be:	e7fd      	b.n	80038bc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d90b      	bls.n	80038e0 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	617b      	str	r3, [r7, #20]
}
 80038da:	bf00      	nop
 80038dc:	bf00      	nop
 80038de:	e7fd      	b.n	80038dc <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80038e0:	2302      	movs	r3, #2
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	2100      	movs	r1, #0
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff fef8 	bl	80036e0 <xQueueGenericCreateStatic>
 80038f0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80038fe:	69fb      	ldr	r3, [r7, #28]
	}
 8003900:	4618      	mov	r0, r3
 8003902:	3720      	adds	r7, #32
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d10b      	bne.n	8003930 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8003918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391c:	f383 8811 	msr	BASEPRI, r3
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	613b      	str	r3, [r7, #16]
}
 800392a:	bf00      	nop
 800392c:	bf00      	nop
 800392e:	e7fd      	b.n	800392c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	429a      	cmp	r2, r3
 8003936:	d90b      	bls.n	8003950 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	60fb      	str	r3, [r7, #12]
}
 800394a:	bf00      	nop
 800394c:	bf00      	nop
 800394e:	e7fd      	b.n	800394c <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003950:	2202      	movs	r2, #2
 8003952:	2100      	movs	r1, #0
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7ff ff40 	bl	80037da <xQueueGenericCreate>
 800395a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003968:	697b      	ldr	r3, [r7, #20]
	}
 800396a:	4618      	mov	r0, r3
 800396c:	3718      	adds	r7, #24
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08e      	sub	sp, #56	@ 0x38
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003982:	2300      	movs	r3, #0
 8003984:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800398a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398c:	2b00      	cmp	r3, #0
 800398e:	d10b      	bne.n	80039a8 <xQueueGenericSend+0x34>
	__asm volatile
 8003990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003994:	f383 8811 	msr	BASEPRI, r3
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	f3bf 8f4f 	dsb	sy
 80039a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80039a2:	bf00      	nop
 80039a4:	bf00      	nop
 80039a6:	e7fd      	b.n	80039a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <xQueueGenericSend+0x42>
 80039ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <xQueueGenericSend+0x46>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e000      	b.n	80039bc <xQueueGenericSend+0x48>
 80039ba:	2300      	movs	r3, #0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <xQueueGenericSend+0x64>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	2b02      	cmp	r3, #2
 80039dc:	d103      	bne.n	80039e6 <xQueueGenericSend+0x72>
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d101      	bne.n	80039ea <xQueueGenericSend+0x76>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <xQueueGenericSend+0x78>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <xQueueGenericSend+0x94>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	623b      	str	r3, [r7, #32]
}
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a08:	f001 fc7e 	bl	8005308 <xTaskGetSchedulerState>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d102      	bne.n	8003a18 <xQueueGenericSend+0xa4>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <xQueueGenericSend+0xa8>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <xQueueGenericSend+0xaa>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10b      	bne.n	8003a3a <xQueueGenericSend+0xc6>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	61fb      	str	r3, [r7, #28]
}
 8003a34:	bf00      	nop
 8003a36:	bf00      	nop
 8003a38:	e7fd      	b.n	8003a36 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a3a:	f002 fa8f 	bl	8005f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <xQueueGenericSend+0xdc>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d129      	bne.n	8003aa4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	68b9      	ldr	r1, [r7, #8]
 8003a54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a56:	f000 fc6c 	bl	8004332 <prvCopyDataToQueue>
 8003a5a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d010      	beq.n	8003a86 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a66:	3324      	adds	r3, #36	@ 0x24
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f001 fa87 	bl	8004f7c <xTaskRemoveFromEventList>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d013      	beq.n	8003a9c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003a74:	4b3f      	ldr	r3, [pc, #252]	@ (8003b74 <xQueueGenericSend+0x200>)
 8003a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	e00a      	b.n	8003a9c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d007      	beq.n	8003a9c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003a8c:	4b39      	ldr	r3, [pc, #228]	@ (8003b74 <xQueueGenericSend+0x200>)
 8003a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a92:	601a      	str	r2, [r3, #0]
 8003a94:	f3bf 8f4f 	dsb	sy
 8003a98:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003a9c:	f002 fa8e 	bl	8005fbc <vPortExitCritical>
				return pdPASS;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e063      	b.n	8003b6c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d103      	bne.n	8003ab2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003aaa:	f002 fa87 	bl	8005fbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e05c      	b.n	8003b6c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d106      	bne.n	8003ac6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ab8:	f107 0314 	add.w	r3, r7, #20
 8003abc:	4618      	mov	r0, r3
 8003abe:	f001 fac1 	bl	8005044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ac6:	f002 fa79 	bl	8005fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003aca:	f001 f82d 	bl	8004b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ace:	f002 fa45 	bl	8005f5c <vPortEnterCritical>
 8003ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ad8:	b25b      	sxtb	r3, r3
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d103      	bne.n	8003ae8 <xQueueGenericSend+0x174>
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003aee:	b25b      	sxtb	r3, r3
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af4:	d103      	bne.n	8003afe <xQueueGenericSend+0x18a>
 8003af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003afe:	f002 fa5d 	bl	8005fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b02:	1d3a      	adds	r2, r7, #4
 8003b04:	f107 0314 	add.w	r3, r7, #20
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 fab0 	bl	8005070 <xTaskCheckForTimeOut>
 8003b10:	4603      	mov	r3, r0
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d124      	bne.n	8003b60 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b16:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b18:	f000 fd03 	bl	8004522 <prvIsQueueFull>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d018      	beq.n	8003b54 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b24:	3310      	adds	r3, #16
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f001 f9d4 	bl	8004ed8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003b30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b32:	f000 fc8e 	bl	8004452 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003b36:	f001 f805 	bl	8004b44 <xTaskResumeAll>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f47f af7c 	bne.w	8003a3a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003b42:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <xQueueGenericSend+0x200>)
 8003b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	e772      	b.n	8003a3a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b56:	f000 fc7c 	bl	8004452 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b5a:	f000 fff3 	bl	8004b44 <xTaskResumeAll>
 8003b5e:	e76c      	b.n	8003a3a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003b60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b62:	f000 fc76 	bl	8004452 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b66:	f000 ffed 	bl	8004b44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003b6a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3738      	adds	r7, #56	@ 0x38
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	e000ed04 	.word	0xe000ed04

08003b78 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b090      	sub	sp, #64	@ 0x40
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10b      	bne.n	8003ba8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <xQueueGenericSendFromISR+0x3e>
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <xQueueGenericSendFromISR+0x42>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <xQueueGenericSendFromISR+0x44>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d103      	bne.n	8003be6 <xQueueGenericSendFromISR+0x6e>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <xQueueGenericSendFromISR+0x72>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xQueueGenericSendFromISR+0x74>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	623b      	str	r3, [r7, #32]
}
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c08:	f002 fa6a 	bl	80060e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003c0c:	f3ef 8211 	mrs	r2, BASEPRI
 8003c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	61fa      	str	r2, [r7, #28]
 8003c22:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003c24:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c26:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <xQueueGenericSendFromISR+0xc2>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d12f      	bne.n	8003c9a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003c50:	f000 fb6f 	bl	8004332 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d112      	bne.n	8003c84 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d016      	beq.n	8003c94 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c68:	3324      	adds	r3, #36	@ 0x24
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f001 f986 	bl	8004f7c <xTaskRemoveFromEventList>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00e      	beq.n	8003c94 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00b      	beq.n	8003c94 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e007      	b.n	8003c94 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003c88:	3301      	adds	r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	b25a      	sxtb	r2, r3
 8003c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003c94:	2301      	movs	r3, #1
 8003c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003c98:	e001      	b.n	8003c9e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ca8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003caa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3740      	adds	r7, #64	@ 0x40
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b08e      	sub	sp, #56	@ 0x38
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d10b      	bne.n	8003ce0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8003cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ccc:	f383 8811 	msr	BASEPRI, r3
 8003cd0:	f3bf 8f6f 	isb	sy
 8003cd4:	f3bf 8f4f 	dsb	sy
 8003cd8:	623b      	str	r3, [r7, #32]
}
 8003cda:	bf00      	nop
 8003cdc:	bf00      	nop
 8003cde:	e7fd      	b.n	8003cdc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8003ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cec:	f383 8811 	msr	BASEPRI, r3
 8003cf0:	f3bf 8f6f 	isb	sy
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	61fb      	str	r3, [r7, #28]
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	e7fd      	b.n	8003cfc <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d103      	bne.n	8003d10 <xQueueGiveFromISR+0x5c>
 8003d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0a:	689b      	ldr	r3, [r3, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <xQueueGiveFromISR+0x60>
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <xQueueGiveFromISR+0x62>
 8003d14:	2300      	movs	r3, #0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10b      	bne.n	8003d32 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	61bb      	str	r3, [r7, #24]
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	e7fd      	b.n	8003d2e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d32:	f002 f9d5 	bl	80060e0 <vPortValidateInterruptPriority>
	__asm volatile
 8003d36:	f3ef 8211 	mrs	r2, BASEPRI
 8003d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	617a      	str	r2, [r7, #20]
 8003d4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003d4e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d56:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d22b      	bcs.n	8003dba <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	1c5a      	adds	r2, r3, #1
 8003d70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d72:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d74:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d112      	bne.n	8003da4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d016      	beq.n	8003db4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d88:	3324      	adds	r3, #36	@ 0x24
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 f8f6 	bl	8004f7c <xTaskRemoveFromEventList>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00e      	beq.n	8003db4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00b      	beq.n	8003db4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	e007      	b.n	8003db4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003da8:	3301      	adds	r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	b25a      	sxtb	r2, r3
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003db4:	2301      	movs	r3, #1
 8003db6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003db8:	e001      	b.n	8003dbe <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f383 8811 	msr	BASEPRI, r3
}
 8003dc8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3738      	adds	r7, #56	@ 0x38
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}

08003dd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b08c      	sub	sp, #48	@ 0x30
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	60f8      	str	r0, [r7, #12]
 8003ddc:	60b9      	str	r1, [r7, #8]
 8003dde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003de0:	2300      	movs	r3, #0
 8003de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <xQueueReceive+0x32>
	__asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	623b      	str	r3, [r7, #32]
}
 8003e00:	bf00      	nop
 8003e02:	bf00      	nop
 8003e04:	e7fd      	b.n	8003e02 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <xQueueReceive+0x40>
 8003e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <xQueueReceive+0x44>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <xQueueReceive+0x46>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <xQueueReceive+0x62>
	__asm volatile
 8003e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e22:	f383 8811 	msr	BASEPRI, r3
 8003e26:	f3bf 8f6f 	isb	sy
 8003e2a:	f3bf 8f4f 	dsb	sy
 8003e2e:	61fb      	str	r3, [r7, #28]
}
 8003e30:	bf00      	nop
 8003e32:	bf00      	nop
 8003e34:	e7fd      	b.n	8003e32 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e36:	f001 fa67 	bl	8005308 <xTaskGetSchedulerState>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d102      	bne.n	8003e46 <xQueueReceive+0x72>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <xQueueReceive+0x76>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <xQueueReceive+0x78>
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d10b      	bne.n	8003e68 <xQueueReceive+0x94>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	61bb      	str	r3, [r7, #24]
}
 8003e62:	bf00      	nop
 8003e64:	bf00      	nop
 8003e66:	e7fd      	b.n	8003e64 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e68:	f002 f878 	bl	8005f5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e70:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d01f      	beq.n	8003eb8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e7c:	f000 fac3 	bl	8004406 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e82:	1e5a      	subs	r2, r3, #1
 8003e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e86:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d00f      	beq.n	8003eb0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e92:	3310      	adds	r3, #16
 8003e94:	4618      	mov	r0, r3
 8003e96:	f001 f871 	bl	8004f7c <xTaskRemoveFromEventList>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d007      	beq.n	8003eb0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ea0:	4b3c      	ldr	r3, [pc, #240]	@ (8003f94 <xQueueReceive+0x1c0>)
 8003ea2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eb0:	f002 f884 	bl	8005fbc <vPortExitCritical>
				return pdPASS;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e069      	b.n	8003f8c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ebe:	f002 f87d 	bl	8005fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e062      	b.n	8003f8c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ecc:	f107 0310 	add.w	r3, r7, #16
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 f8b7 	bl	8005044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eda:	f002 f86f 	bl	8005fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ede:	f000 fe23 	bl	8004b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ee2:	f002 f83b 	bl	8005f5c <vPortEnterCritical>
 8003ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003eec:	b25b      	sxtb	r3, r3
 8003eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef2:	d103      	bne.n	8003efc <xQueueReceive+0x128>
 8003ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f02:	b25b      	sxtb	r3, r3
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f08:	d103      	bne.n	8003f12 <xQueueReceive+0x13e>
 8003f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f12:	f002 f853 	bl	8005fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f16:	1d3a      	adds	r2, r7, #4
 8003f18:	f107 0310 	add.w	r3, r7, #16
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 f8a6 	bl	8005070 <xTaskCheckForTimeOut>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d123      	bne.n	8003f72 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f2c:	f000 fae3 	bl	80044f6 <prvIsQueueEmpty>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d017      	beq.n	8003f66 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f38:	3324      	adds	r3, #36	@ 0x24
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 ffca 	bl	8004ed8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f46:	f000 fa84 	bl	8004452 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f4a:	f000 fdfb 	bl	8004b44 <xTaskResumeAll>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d189      	bne.n	8003e68 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003f54:	4b0f      	ldr	r3, [pc, #60]	@ (8003f94 <xQueueReceive+0x1c0>)
 8003f56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f5a:	601a      	str	r2, [r3, #0]
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	e780      	b.n	8003e68 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f68:	f000 fa73 	bl	8004452 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f6c:	f000 fdea 	bl	8004b44 <xTaskResumeAll>
 8003f70:	e77a      	b.n	8003e68 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f74:	f000 fa6d 	bl	8004452 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f78:	f000 fde4 	bl	8004b44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f7c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f7e:	f000 faba 	bl	80044f6 <prvIsQueueEmpty>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f43f af6f 	beq.w	8003e68 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f8a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3730      	adds	r7, #48	@ 0x30
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	e000ed04 	.word	0xe000ed04

08003f98 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08e      	sub	sp, #56	@ 0x38
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003faa:	2300      	movs	r3, #0
 8003fac:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10b      	bne.n	8003fcc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	623b      	str	r3, [r7, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	bf00      	nop
 8003fca:	e7fd      	b.n	8003fc8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00b      	beq.n	8003fec <xQueueSemaphoreTake+0x54>
	__asm volatile
 8003fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	61fb      	str	r3, [r7, #28]
}
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fec:	f001 f98c 	bl	8005308 <xTaskGetSchedulerState>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <xQueueSemaphoreTake+0x64>
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <xQueueSemaphoreTake+0x68>
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <xQueueSemaphoreTake+0x6a>
 8004000:	2300      	movs	r3, #0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	61bb      	str	r3, [r7, #24]
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	e7fd      	b.n	800401a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800401e:	f001 ff9d 	bl	8005f5c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004022:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004026:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402a:	2b00      	cmp	r3, #0
 800402c:	d024      	beq.n	8004078 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800402e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004030:	1e5a      	subs	r2, r3, #1
 8004032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004034:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d104      	bne.n	8004048 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800403e:	f001 fadd 	bl	80055fc <pvTaskIncrementMutexHeldCount>
 8004042:	4602      	mov	r2, r0
 8004044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004046:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800404a:	691b      	ldr	r3, [r3, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00f      	beq.n	8004070 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004052:	3310      	adds	r3, #16
 8004054:	4618      	mov	r0, r3
 8004056:	f000 ff91 	bl	8004f7c <xTaskRemoveFromEventList>
 800405a:	4603      	mov	r3, r0
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004060:	4b54      	ldr	r3, [pc, #336]	@ (80041b4 <xQueueSemaphoreTake+0x21c>)
 8004062:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004066:	601a      	str	r2, [r3, #0]
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004070:	f001 ffa4 	bl	8005fbc <vPortExitCritical>
				return pdPASS;
 8004074:	2301      	movs	r3, #1
 8004076:	e098      	b.n	80041aa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d112      	bne.n	80040a4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800407e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00b      	beq.n	800409c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004088:	f383 8811 	msr	BASEPRI, r3
 800408c:	f3bf 8f6f 	isb	sy
 8004090:	f3bf 8f4f 	dsb	sy
 8004094:	617b      	str	r3, [r7, #20]
}
 8004096:	bf00      	nop
 8004098:	bf00      	nop
 800409a:	e7fd      	b.n	8004098 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800409c:	f001 ff8e 	bl	8005fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80040a0:	2300      	movs	r3, #0
 80040a2:	e082      	b.n	80041aa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d106      	bne.n	80040b8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040aa:	f107 030c 	add.w	r3, r7, #12
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 ffc8 	bl	8005044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040b4:	2301      	movs	r3, #1
 80040b6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040b8:	f001 ff80 	bl	8005fbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040bc:	f000 fd34 	bl	8004b28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040c0:	f001 ff4c 	bl	8005f5c <vPortEnterCritical>
 80040c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040ca:	b25b      	sxtb	r3, r3
 80040cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d0:	d103      	bne.n	80040da <xQueueSemaphoreTake+0x142>
 80040d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040e0:	b25b      	sxtb	r3, r3
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d103      	bne.n	80040f0 <xQueueSemaphoreTake+0x158>
 80040e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040f0:	f001 ff64 	bl	8005fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040f4:	463a      	mov	r2, r7
 80040f6:	f107 030c 	add.w	r3, r7, #12
 80040fa:	4611      	mov	r1, r2
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 ffb7 	bl	8005070 <xTaskCheckForTimeOut>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d132      	bne.n	800416e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004108:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800410a:	f000 f9f4 	bl	80044f6 <prvIsQueueEmpty>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d026      	beq.n	8004162 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800411c:	f001 ff1e 	bl	8005f5c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	4618      	mov	r0, r3
 8004126:	f001 f90d 	bl	8005344 <xTaskPriorityInherit>
 800412a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800412c:	f001 ff46 	bl	8005fbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004132:	3324      	adds	r3, #36	@ 0x24
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f000 fecd 	bl	8004ed8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800413e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004140:	f000 f987 	bl	8004452 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004144:	f000 fcfe 	bl	8004b44 <xTaskResumeAll>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	f47f af67 	bne.w	800401e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004150:	4b18      	ldr	r3, [pc, #96]	@ (80041b4 <xQueueSemaphoreTake+0x21c>)
 8004152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	e75d      	b.n	800401e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004162:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004164:	f000 f975 	bl	8004452 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004168:	f000 fcec 	bl	8004b44 <xTaskResumeAll>
 800416c:	e757      	b.n	800401e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800416e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004170:	f000 f96f 	bl	8004452 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004174:	f000 fce6 	bl	8004b44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004178:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800417a:	f000 f9bc 	bl	80044f6 <prvIsQueueEmpty>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	f43f af4c 	beq.w	800401e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004188:	2b00      	cmp	r3, #0
 800418a:	d00d      	beq.n	80041a8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800418c:	f001 fee6 	bl	8005f5c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004190:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004192:	f000 f8b7 	bl	8004304 <prvGetDisinheritPriorityAfterTimeout>
 8004196:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800419e:	4618      	mov	r0, r3
 80041a0:	f001 f9a8 	bl	80054f4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80041a4:	f001 ff0a 	bl	8005fbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3738      	adds	r7, #56	@ 0x38
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b08e      	sub	sp, #56	@ 0x38
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80041c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10b      	bne.n	80041e6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	623b      	str	r3, [r7, #32]
}
 80041e0:	bf00      	nop
 80041e2:	bf00      	nop
 80041e4:	e7fd      	b.n	80041e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d103      	bne.n	80041f4 <xQueueReceiveFromISR+0x3c>
 80041ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d101      	bne.n	80041f8 <xQueueReceiveFromISR+0x40>
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <xQueueReceiveFromISR+0x42>
 80041f8:	2300      	movs	r3, #0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10b      	bne.n	8004216 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	61fb      	str	r3, [r7, #28]
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	e7fd      	b.n	8004212 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004216:	f001 ff63 	bl	80060e0 <vPortValidateInterruptPriority>
	__asm volatile
 800421a:	f3ef 8211 	mrs	r2, BASEPRI
 800421e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	61ba      	str	r2, [r7, #24]
 8004230:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004232:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004234:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004238:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800423a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800423c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800423e:	2b00      	cmp	r3, #0
 8004240:	d02f      	beq.n	80042a2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004244:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004248:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800424c:	68b9      	ldr	r1, [r7, #8]
 800424e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004250:	f000 f8d9 	bl	8004406 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004256:	1e5a      	subs	r2, r3, #1
 8004258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800425c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004264:	d112      	bne.n	800428c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800426e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004270:	3310      	adds	r3, #16
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fe82 	bl	8004f7c <xTaskRemoveFromEventList>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00e      	beq.n	800429c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00b      	beq.n	800429c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	e007      	b.n	800429c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800428c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004290:	3301      	adds	r3, #1
 8004292:	b2db      	uxtb	r3, r3
 8004294:	b25a      	sxtb	r2, r3
 8004296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800429c:	2301      	movs	r3, #1
 800429e:	637b      	str	r3, [r7, #52]	@ 0x34
 80042a0:	e001      	b.n	80042a6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80042a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f383 8811 	msr	BASEPRI, r3
}
 80042b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3738      	adds	r7, #56	@ 0x38
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10b      	bne.n	80042e6 <vQueueDelete+0x2a>
	__asm volatile
 80042ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d2:	f383 8811 	msr	BASEPRI, r3
 80042d6:	f3bf 8f6f 	isb	sy
 80042da:	f3bf 8f4f 	dsb	sy
 80042de:	60bb      	str	r3, [r7, #8]
}
 80042e0:	bf00      	nop
 80042e2:	bf00      	nop
 80042e4:	e7fd      	b.n	80042e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f95c 	bl	80045a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d102      	bne.n	80042fc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f002 f800 	bl	80062fc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004310:	2b00      	cmp	r3, #0
 8004312:	d006      	beq.n	8004322 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	e001      	b.n	8004326 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004326:	68fb      	ldr	r3, [r7, #12]
	}
 8004328:	4618      	mov	r0, r3
 800432a:	3714      	adds	r7, #20
 800432c:	46bd      	mov	sp, r7
 800432e:	bc80      	pop	{r7}
 8004330:	4770      	bx	lr

08004332 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004332:	b580      	push	{r7, lr}
 8004334:	b086      	sub	sp, #24
 8004336:	af00      	add	r7, sp, #0
 8004338:	60f8      	str	r0, [r7, #12]
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800433e:	2300      	movs	r3, #0
 8004340:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004346:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10d      	bne.n	800436c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d14d      	bne.n	80043f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4618      	mov	r0, r3
 800435e:	f001 f859 	bl	8005414 <xTaskPriorityDisinherit>
 8004362:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2200      	movs	r2, #0
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	e043      	b.n	80043f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d119      	bne.n	80043a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	6858      	ldr	r0, [r3, #4]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437a:	461a      	mov	r2, r3
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	f002 f985 	bl	800668c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	441a      	add	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	429a      	cmp	r2, r3
 800439a:	d32b      	bcc.n	80043f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	605a      	str	r2, [r3, #4]
 80043a4:	e026      	b.n	80043f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68d8      	ldr	r0, [r3, #12]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	461a      	mov	r2, r3
 80043b0:	68b9      	ldr	r1, [r7, #8]
 80043b2:	f002 f96b 	bl	800668c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043be:	425b      	negs	r3, r3
 80043c0:	441a      	add	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d207      	bcs.n	80043e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043da:	425b      	negs	r3, r3
 80043dc:	441a      	add	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d105      	bne.n	80043f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1c5a      	adds	r2, r3, #1
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80043fc:	697b      	ldr	r3, [r7, #20]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b082      	sub	sp, #8
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
 800440e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004414:	2b00      	cmp	r3, #0
 8004416:	d018      	beq.n	800444a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004420:	441a      	add	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	d303      	bcc.n	800443a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68d9      	ldr	r1, [r3, #12]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004442:	461a      	mov	r2, r3
 8004444:	6838      	ldr	r0, [r7, #0]
 8004446:	f002 f921 	bl	800668c <memcpy>
	}
}
 800444a:	bf00      	nop
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800445a:	f001 fd7f 	bl	8005f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004464:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004466:	e011      	b.n	800448c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	2b00      	cmp	r3, #0
 800446e:	d012      	beq.n	8004496 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	3324      	adds	r3, #36	@ 0x24
 8004474:	4618      	mov	r0, r3
 8004476:	f000 fd81 	bl	8004f7c <xTaskRemoveFromEventList>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004480:	f000 fe5a 	bl	8005138 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	3b01      	subs	r3, #1
 8004488:	b2db      	uxtb	r3, r3
 800448a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800448c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004490:	2b00      	cmp	r3, #0
 8004492:	dce9      	bgt.n	8004468 <prvUnlockQueue+0x16>
 8004494:	e000      	b.n	8004498 <prvUnlockQueue+0x46>
					break;
 8004496:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	22ff      	movs	r2, #255	@ 0xff
 800449c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80044a0:	f001 fd8c 	bl	8005fbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044a4:	f001 fd5a 	bl	8005f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044b0:	e011      	b.n	80044d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d012      	beq.n	80044e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3310      	adds	r3, #16
 80044be:	4618      	mov	r0, r3
 80044c0:	f000 fd5c 	bl	8004f7c <xTaskRemoveFromEventList>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80044ca:	f000 fe35 	bl	8005138 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80044ce:	7bbb      	ldrb	r3, [r7, #14]
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80044d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	dce9      	bgt.n	80044b2 <prvUnlockQueue+0x60>
 80044de:	e000      	b.n	80044e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80044e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	22ff      	movs	r2, #255	@ 0xff
 80044e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80044ea:	f001 fd67 	bl	8005fbc <vPortExitCritical>
}
 80044ee:	bf00      	nop
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80044fe:	f001 fd2d 	bl	8005f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004506:	2b00      	cmp	r3, #0
 8004508:	d102      	bne.n	8004510 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800450a:	2301      	movs	r3, #1
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	e001      	b.n	8004514 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004514:	f001 fd52 	bl	8005fbc <vPortExitCritical>

	return xReturn;
 8004518:	68fb      	ldr	r3, [r7, #12]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800452a:	f001 fd17 	bl	8005f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004536:	429a      	cmp	r2, r3
 8004538:	d102      	bne.n	8004540 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800453a:	2301      	movs	r3, #1
 800453c:	60fb      	str	r3, [r7, #12]
 800453e:	e001      	b.n	8004544 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004544:	f001 fd3a 	bl	8005fbc <vPortExitCritical>

	return xReturn;
 8004548:	68fb      	ldr	r3, [r7, #12]
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800455e:	2300      	movs	r3, #0
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e014      	b.n	800458e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004564:	4a0e      	ldr	r2, [pc, #56]	@ (80045a0 <vQueueAddToRegistry+0x4c>)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10b      	bne.n	8004588 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004570:	490b      	ldr	r1, [pc, #44]	@ (80045a0 <vQueueAddToRegistry+0x4c>)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800457a:	4a09      	ldr	r2, [pc, #36]	@ (80045a0 <vQueueAddToRegistry+0x4c>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	4413      	add	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004586:	e006      	b.n	8004596 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3301      	adds	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b07      	cmp	r3, #7
 8004592:	d9e7      	bls.n	8004564 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	3714      	adds	r7, #20
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr
 80045a0:	200008a8 	.word	0x200008a8

080045a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e016      	b.n	80045e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80045b2:	4a10      	ldr	r2, [pc, #64]	@ (80045f4 <vQueueUnregisterQueue+0x50>)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	4413      	add	r3, r2
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d10b      	bne.n	80045da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80045c2:	4a0c      	ldr	r2, [pc, #48]	@ (80045f4 <vQueueUnregisterQueue+0x50>)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2100      	movs	r1, #0
 80045c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80045cc:	4a09      	ldr	r2, [pc, #36]	@ (80045f4 <vQueueUnregisterQueue+0x50>)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	4413      	add	r3, r2
 80045d4:	2200      	movs	r2, #0
 80045d6:	605a      	str	r2, [r3, #4]
				break;
 80045d8:	e006      	b.n	80045e8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	3301      	adds	r3, #1
 80045de:	60fb      	str	r3, [r7, #12]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2b07      	cmp	r3, #7
 80045e4:	d9e5      	bls.n	80045b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	3714      	adds	r7, #20
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bc80      	pop	{r7}
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	200008a8 	.word	0x200008a8

080045f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004608:	f001 fca8 	bl	8005f5c <vPortEnterCritical>
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004612:	b25b      	sxtb	r3, r3
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d103      	bne.n	8004622 <vQueueWaitForMessageRestricted+0x2a>
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004628:	b25b      	sxtb	r3, r3
 800462a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462e:	d103      	bne.n	8004638 <vQueueWaitForMessageRestricted+0x40>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004638:	f001 fcc0 	bl	8005fbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	3324      	adds	r3, #36	@ 0x24
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fc69 	bl	8004f24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f7ff fefd 	bl	8004452 <prvUnlockQueue>
	}
 8004658:	bf00      	nop
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08e      	sub	sp, #56	@ 0x38
 8004664:	af04      	add	r7, sp, #16
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800466e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10b      	bne.n	800468c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	623b      	str	r3, [r7, #32]
}
 8004686:	bf00      	nop
 8004688:	bf00      	nop
 800468a:	e7fd      	b.n	8004688 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800468c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10b      	bne.n	80046aa <xTaskCreateStatic+0x4a>
	__asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	61fb      	str	r3, [r7, #28]
}
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046aa:	23a8      	movs	r3, #168	@ 0xa8
 80046ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2ba8      	cmp	r3, #168	@ 0xa8
 80046b2:	d00b      	beq.n	80046cc <xTaskCreateStatic+0x6c>
	__asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	61bb      	str	r3, [r7, #24]
}
 80046c6:	bf00      	nop
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01e      	beq.n	8004712 <xTaskCreateStatic+0xb2>
 80046d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01b      	beq.n	8004712 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046e2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e6:	2202      	movs	r2, #2
 80046e8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046ec:	2300      	movs	r3, #0
 80046ee:	9303      	str	r3, [sp, #12]
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	9302      	str	r3, [sp, #8]
 80046f4:	f107 0314 	add.w	r3, r7, #20
 80046f8:	9301      	str	r3, [sp, #4]
 80046fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	68b9      	ldr	r1, [r7, #8]
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 f851 	bl	80047ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800470a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800470c:	f000 f8f6 	bl	80048fc <prvAddNewTaskToReadyList>
 8004710:	e001      	b.n	8004716 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004716:	697b      	ldr	r3, [r7, #20]
	}
 8004718:	4618      	mov	r0, r3
 800471a:	3728      	adds	r7, #40	@ 0x28
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08c      	sub	sp, #48	@ 0x30
 8004724:	af04      	add	r7, sp, #16
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	603b      	str	r3, [r7, #0]
 800472c:	4613      	mov	r3, r2
 800472e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004730:	88fb      	ldrh	r3, [r7, #6]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4618      	mov	r0, r3
 8004736:	f001 fd13 	bl	8006160 <pvPortMalloc>
 800473a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00e      	beq.n	8004760 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004742:	20a8      	movs	r0, #168	@ 0xa8
 8004744:	f001 fd0c 	bl	8006160 <pvPortMalloc>
 8004748:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d003      	beq.n	8004758 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	697a      	ldr	r2, [r7, #20]
 8004754:	631a      	str	r2, [r3, #48]	@ 0x30
 8004756:	e005      	b.n	8004764 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004758:	6978      	ldr	r0, [r7, #20]
 800475a:	f001 fdcf 	bl	80062fc <vPortFree>
 800475e:	e001      	b.n	8004764 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004760:	2300      	movs	r3, #0
 8004762:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d017      	beq.n	800479a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004772:	88fa      	ldrh	r2, [r7, #6]
 8004774:	2300      	movs	r3, #0
 8004776:	9303      	str	r3, [sp, #12]
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	9302      	str	r3, [sp, #8]
 800477c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477e:	9301      	str	r3, [sp, #4]
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	68b9      	ldr	r1, [r7, #8]
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 f80f 	bl	80047ac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800478e:	69f8      	ldr	r0, [r7, #28]
 8004790:	f000 f8b4 	bl	80048fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004794:	2301      	movs	r3, #1
 8004796:	61bb      	str	r3, [r7, #24]
 8004798:	e002      	b.n	80047a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800479a:	f04f 33ff 	mov.w	r3, #4294967295
 800479e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047a0:	69bb      	ldr	r3, [r7, #24]
	}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b088      	sub	sp, #32
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	461a      	mov	r2, r3
 80047c4:	21a5      	movs	r1, #165	@ 0xa5
 80047c6:	f001 fed7 	bl	8006578 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047d4:	3b01      	subs	r3, #1
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	f023 0307 	bic.w	r3, r3, #7
 80047e2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	617b      	str	r3, [r7, #20]
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	e7fd      	b.n	8004802 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01f      	beq.n	800484c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800480c:	2300      	movs	r3, #0
 800480e:	61fb      	str	r3, [r7, #28]
 8004810:	e012      	b.n	8004838 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	4413      	add	r3, r2
 8004818:	7819      	ldrb	r1, [r3, #0]
 800481a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	4413      	add	r3, r2
 8004820:	3334      	adds	r3, #52	@ 0x34
 8004822:	460a      	mov	r2, r1
 8004824:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	4413      	add	r3, r2
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d006      	beq.n	8004840 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	3301      	adds	r3, #1
 8004836:	61fb      	str	r3, [r7, #28]
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b0f      	cmp	r3, #15
 800483c:	d9e9      	bls.n	8004812 <prvInitialiseNewTask+0x66>
 800483e:	e000      	b.n	8004842 <prvInitialiseNewTask+0x96>
			{
				break;
 8004840:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800484a:	e003      	b.n	8004854 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800484c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004856:	2b37      	cmp	r3, #55	@ 0x37
 8004858:	d901      	bls.n	800485e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800485a:	2337      	movs	r3, #55	@ 0x37
 800485c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004862:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004866:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004868:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800486a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486c:	2200      	movs	r2, #0
 800486e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004872:	3304      	adds	r3, #4
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe fe38 	bl	80034ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	3318      	adds	r3, #24
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe fe33 	bl	80034ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004886:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004888:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004892:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004898:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800489a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489c:	2200      	movs	r2, #0
 800489e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	3354      	adds	r3, #84	@ 0x54
 80048ae:	224c      	movs	r2, #76	@ 0x4c
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f001 fe60 	bl	8006578 <memset>
 80048b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ba:	4a0d      	ldr	r2, [pc, #52]	@ (80048f0 <prvInitialiseNewTask+0x144>)
 80048bc:	659a      	str	r2, [r3, #88]	@ 0x58
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	4a0c      	ldr	r2, [pc, #48]	@ (80048f4 <prvInitialiseNewTask+0x148>)
 80048c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80048c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c6:	4a0c      	ldr	r2, [pc, #48]	@ (80048f8 <prvInitialiseNewTask+0x14c>)
 80048c8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	68f9      	ldr	r1, [r7, #12]
 80048ce:	69b8      	ldr	r0, [r7, #24]
 80048d0:	f001 fa54 	bl	8005d7c <pxPortInitialiseStack>
 80048d4:	4602      	mov	r2, r0
 80048d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048e6:	bf00      	nop
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20001b3c 	.word	0x20001b3c
 80048f4:	20001ba4 	.word	0x20001ba4
 80048f8:	20001c0c 	.word	0x20001c0c

080048fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004904:	f001 fb2a 	bl	8005f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004908:	4b2d      	ldr	r3, [pc, #180]	@ (80049c0 <prvAddNewTaskToReadyList+0xc4>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3301      	adds	r3, #1
 800490e:	4a2c      	ldr	r2, [pc, #176]	@ (80049c0 <prvAddNewTaskToReadyList+0xc4>)
 8004910:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004912:	4b2c      	ldr	r3, [pc, #176]	@ (80049c4 <prvAddNewTaskToReadyList+0xc8>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d109      	bne.n	800492e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800491a:	4a2a      	ldr	r2, [pc, #168]	@ (80049c4 <prvAddNewTaskToReadyList+0xc8>)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004920:	4b27      	ldr	r3, [pc, #156]	@ (80049c0 <prvAddNewTaskToReadyList+0xc4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d110      	bne.n	800494a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004928:	f000 fc2a 	bl	8005180 <prvInitialiseTaskLists>
 800492c:	e00d      	b.n	800494a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800492e:	4b26      	ldr	r3, [pc, #152]	@ (80049c8 <prvAddNewTaskToReadyList+0xcc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004936:	4b23      	ldr	r3, [pc, #140]	@ (80049c4 <prvAddNewTaskToReadyList+0xc8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	429a      	cmp	r2, r3
 8004942:	d802      	bhi.n	800494a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004944:	4a1f      	ldr	r2, [pc, #124]	@ (80049c4 <prvAddNewTaskToReadyList+0xc8>)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800494a:	4b20      	ldr	r3, [pc, #128]	@ (80049cc <prvAddNewTaskToReadyList+0xd0>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3301      	adds	r3, #1
 8004950:	4a1e      	ldr	r2, [pc, #120]	@ (80049cc <prvAddNewTaskToReadyList+0xd0>)
 8004952:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004954:	4b1d      	ldr	r3, [pc, #116]	@ (80049cc <prvAddNewTaskToReadyList+0xd0>)
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004960:	4b1b      	ldr	r3, [pc, #108]	@ (80049d0 <prvAddNewTaskToReadyList+0xd4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d903      	bls.n	8004970 <prvAddNewTaskToReadyList+0x74>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800496c:	4a18      	ldr	r2, [pc, #96]	@ (80049d0 <prvAddNewTaskToReadyList+0xd4>)
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	4a15      	ldr	r2, [pc, #84]	@ (80049d4 <prvAddNewTaskToReadyList+0xd8>)
 800497e:	441a      	add	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	3304      	adds	r3, #4
 8004984:	4619      	mov	r1, r3
 8004986:	4610      	mov	r0, r2
 8004988:	f7fe fdbb 	bl	8003502 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800498c:	f001 fb16 	bl	8005fbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004990:	4b0d      	ldr	r3, [pc, #52]	@ (80049c8 <prvAddNewTaskToReadyList+0xcc>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00e      	beq.n	80049b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004998:	4b0a      	ldr	r3, [pc, #40]	@ (80049c4 <prvAddNewTaskToReadyList+0xc8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d207      	bcs.n	80049b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049a6:	4b0c      	ldr	r3, [pc, #48]	@ (80049d8 <prvAddNewTaskToReadyList+0xdc>)
 80049a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049b6:	bf00      	nop
 80049b8:	3708      	adds	r7, #8
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	20000dbc 	.word	0x20000dbc
 80049c4:	200008e8 	.word	0x200008e8
 80049c8:	20000dc8 	.word	0x20000dc8
 80049cc:	20000dd8 	.word	0x20000dd8
 80049d0:	20000dc4 	.word	0x20000dc4
 80049d4:	200008ec 	.word	0x200008ec
 80049d8:	e000ed04 	.word	0xe000ed04

080049dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d018      	beq.n	8004a20 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049ee:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <vTaskDelay+0x64>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00b      	beq.n	8004a0e <vTaskDelay+0x32>
	__asm volatile
 80049f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fa:	f383 8811 	msr	BASEPRI, r3
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	f3bf 8f4f 	dsb	sy
 8004a06:	60bb      	str	r3, [r7, #8]
}
 8004a08:	bf00      	nop
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a0e:	f000 f88b 	bl	8004b28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a12:	2100      	movs	r1, #0
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fe05 	bl	8005624 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a1a:	f000 f893 	bl	8004b44 <xTaskResumeAll>
 8004a1e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d107      	bne.n	8004a36 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a26:	4b07      	ldr	r3, [pc, #28]	@ (8004a44 <vTaskDelay+0x68>)
 8004a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a2c:	601a      	str	r2, [r3, #0]
 8004a2e:	f3bf 8f4f 	dsb	sy
 8004a32:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a36:	bf00      	nop
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000de4 	.word	0x20000de4
 8004a44:	e000ed04 	.word	0xe000ed04

08004a48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	@ 0x28
 8004a4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a56:	463a      	mov	r2, r7
 8004a58:	1d39      	adds	r1, r7, #4
 8004a5a:	f107 0308 	add.w	r3, r7, #8
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7fe fcf2 	bl	8003448 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a64:	6839      	ldr	r1, [r7, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	9202      	str	r2, [sp, #8]
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	2300      	movs	r3, #0
 8004a74:	460a      	mov	r2, r1
 8004a76:	4924      	ldr	r1, [pc, #144]	@ (8004b08 <vTaskStartScheduler+0xc0>)
 8004a78:	4824      	ldr	r0, [pc, #144]	@ (8004b0c <vTaskStartScheduler+0xc4>)
 8004a7a:	f7ff fdf1 	bl	8004660 <xTaskCreateStatic>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4a23      	ldr	r2, [pc, #140]	@ (8004b10 <vTaskStartScheduler+0xc8>)
 8004a82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a84:	4b22      	ldr	r3, [pc, #136]	@ (8004b10 <vTaskStartScheduler+0xc8>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d002      	beq.n	8004a92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e001      	b.n	8004a96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d102      	bne.n	8004aa2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a9c:	f000 fe16 	bl	80056cc <xTimerCreateTimerTask>
 8004aa0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d11b      	bne.n	8004ae0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	613b      	str	r3, [r7, #16]
}
 8004aba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004abc:	4b15      	ldr	r3, [pc, #84]	@ (8004b14 <vTaskStartScheduler+0xcc>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3354      	adds	r3, #84	@ 0x54
 8004ac2:	4a15      	ldr	r2, [pc, #84]	@ (8004b18 <vTaskStartScheduler+0xd0>)
 8004ac4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ac6:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <vTaskStartScheduler+0xd4>)
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ace:	4b14      	ldr	r3, [pc, #80]	@ (8004b20 <vTaskStartScheduler+0xd8>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ad4:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <vTaskStartScheduler+0xdc>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ada:	f001 f9cd 	bl	8005e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ade:	e00f      	b.n	8004b00 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae6:	d10b      	bne.n	8004b00 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aec:	f383 8811 	msr	BASEPRI, r3
 8004af0:	f3bf 8f6f 	isb	sy
 8004af4:	f3bf 8f4f 	dsb	sy
 8004af8:	60fb      	str	r3, [r7, #12]
}
 8004afa:	bf00      	nop
 8004afc:	bf00      	nop
 8004afe:	e7fd      	b.n	8004afc <vTaskStartScheduler+0xb4>
}
 8004b00:	bf00      	nop
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	08006fbc 	.word	0x08006fbc
 8004b0c:	08005151 	.word	0x08005151
 8004b10:	20000de0 	.word	0x20000de0
 8004b14:	200008e8 	.word	0x200008e8
 8004b18:	20000010 	.word	0x20000010
 8004b1c:	20000ddc 	.word	0x20000ddc
 8004b20:	20000dc8 	.word	0x20000dc8
 8004b24:	20000dc0 	.word	0x20000dc0

08004b28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b2c:	4b04      	ldr	r3, [pc, #16]	@ (8004b40 <vTaskSuspendAll+0x18>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3301      	adds	r3, #1
 8004b32:	4a03      	ldr	r2, [pc, #12]	@ (8004b40 <vTaskSuspendAll+0x18>)
 8004b34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b36:	bf00      	nop
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bc80      	pop	{r7}
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	20000de4 	.word	0x20000de4

08004b44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b52:	4b42      	ldr	r3, [pc, #264]	@ (8004c5c <xTaskResumeAll+0x118>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <xTaskResumeAll+0x2e>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	603b      	str	r3, [r7, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	e7fd      	b.n	8004b6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b72:	f001 f9f3 	bl	8005f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b76:	4b39      	ldr	r3, [pc, #228]	@ (8004c5c <xTaskResumeAll+0x118>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	4a37      	ldr	r2, [pc, #220]	@ (8004c5c <xTaskResumeAll+0x118>)
 8004b7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b80:	4b36      	ldr	r3, [pc, #216]	@ (8004c5c <xTaskResumeAll+0x118>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d162      	bne.n	8004c4e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b88:	4b35      	ldr	r3, [pc, #212]	@ (8004c60 <xTaskResumeAll+0x11c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d05e      	beq.n	8004c4e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b90:	e02f      	b.n	8004bf2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b92:	4b34      	ldr	r3, [pc, #208]	@ (8004c64 <xTaskResumeAll+0x120>)
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3318      	adds	r3, #24
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fe fd0a 	bl	80035b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	3304      	adds	r3, #4
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe fd05 	bl	80035b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb2:	4b2d      	ldr	r3, [pc, #180]	@ (8004c68 <xTaskResumeAll+0x124>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d903      	bls.n	8004bc2 <xTaskResumeAll+0x7e>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbe:	4a2a      	ldr	r2, [pc, #168]	@ (8004c68 <xTaskResumeAll+0x124>)
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4a27      	ldr	r2, [pc, #156]	@ (8004c6c <xTaskResumeAll+0x128>)
 8004bd0:	441a      	add	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	4610      	mov	r0, r2
 8004bda:	f7fe fc92 	bl	8003502 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be2:	4b23      	ldr	r3, [pc, #140]	@ (8004c70 <xTaskResumeAll+0x12c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d302      	bcc.n	8004bf2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004bec:	4b21      	ldr	r3, [pc, #132]	@ (8004c74 <xTaskResumeAll+0x130>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bf2:	4b1c      	ldr	r3, [pc, #112]	@ (8004c64 <xTaskResumeAll+0x120>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1cb      	bne.n	8004b92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c00:	f000 fb62 	bl	80052c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c04:	4b1c      	ldr	r3, [pc, #112]	@ (8004c78 <xTaskResumeAll+0x134>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d010      	beq.n	8004c32 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c10:	f000 f844 	bl	8004c9c <xTaskIncrementTick>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004c1a:	4b16      	ldr	r3, [pc, #88]	@ (8004c74 <xTaskResumeAll+0x130>)
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	3b01      	subs	r3, #1
 8004c24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f1      	bne.n	8004c10 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004c2c:	4b12      	ldr	r3, [pc, #72]	@ (8004c78 <xTaskResumeAll+0x134>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c32:	4b10      	ldr	r3, [pc, #64]	@ (8004c74 <xTaskResumeAll+0x130>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c3e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c7c <xTaskResumeAll+0x138>)
 8004c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c44:	601a      	str	r2, [r3, #0]
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c4e:	f001 f9b5 	bl	8005fbc <vPortExitCritical>

	return xAlreadyYielded;
 8004c52:	68bb      	ldr	r3, [r7, #8]
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	20000de4 	.word	0x20000de4
 8004c60:	20000dbc 	.word	0x20000dbc
 8004c64:	20000d7c 	.word	0x20000d7c
 8004c68:	20000dc4 	.word	0x20000dc4
 8004c6c:	200008ec 	.word	0x200008ec
 8004c70:	200008e8 	.word	0x200008e8
 8004c74:	20000dd0 	.word	0x20000dd0
 8004c78:	20000dcc 	.word	0x20000dcc
 8004c7c:	e000ed04 	.word	0xe000ed04

08004c80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c86:	4b04      	ldr	r3, [pc, #16]	@ (8004c98 <xTaskGetTickCount+0x18>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c8c:	687b      	ldr	r3, [r7, #4]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	370c      	adds	r7, #12
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bc80      	pop	{r7}
 8004c96:	4770      	bx	lr
 8004c98:	20000dc0 	.word	0x20000dc0

08004c9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ca6:	4b4f      	ldr	r3, [pc, #316]	@ (8004de4 <xTaskIncrementTick+0x148>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f040 8090 	bne.w	8004dd0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cb0:	4b4d      	ldr	r3, [pc, #308]	@ (8004de8 <xTaskIncrementTick+0x14c>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cb8:	4a4b      	ldr	r2, [pc, #300]	@ (8004de8 <xTaskIncrementTick+0x14c>)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d121      	bne.n	8004d08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cc4:	4b49      	ldr	r3, [pc, #292]	@ (8004dec <xTaskIncrementTick+0x150>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	603b      	str	r3, [r7, #0]
}
 8004ce0:	bf00      	nop
 8004ce2:	bf00      	nop
 8004ce4:	e7fd      	b.n	8004ce2 <xTaskIncrementTick+0x46>
 8004ce6:	4b41      	ldr	r3, [pc, #260]	@ (8004dec <xTaskIncrementTick+0x150>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	4b40      	ldr	r3, [pc, #256]	@ (8004df0 <xTaskIncrementTick+0x154>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a3e      	ldr	r2, [pc, #248]	@ (8004dec <xTaskIncrementTick+0x150>)
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	4a3e      	ldr	r2, [pc, #248]	@ (8004df0 <xTaskIncrementTick+0x154>)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	4b3e      	ldr	r3, [pc, #248]	@ (8004df4 <xTaskIncrementTick+0x158>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	4a3c      	ldr	r2, [pc, #240]	@ (8004df4 <xTaskIncrementTick+0x158>)
 8004d02:	6013      	str	r3, [r2, #0]
 8004d04:	f000 fae0 	bl	80052c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d08:	4b3b      	ldr	r3, [pc, #236]	@ (8004df8 <xTaskIncrementTick+0x15c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	693a      	ldr	r2, [r7, #16]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d349      	bcc.n	8004da6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d12:	4b36      	ldr	r3, [pc, #216]	@ (8004dec <xTaskIncrementTick+0x150>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d104      	bne.n	8004d26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d1c:	4b36      	ldr	r3, [pc, #216]	@ (8004df8 <xTaskIncrementTick+0x15c>)
 8004d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d22:	601a      	str	r2, [r3, #0]
					break;
 8004d24:	e03f      	b.n	8004da6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d26:	4b31      	ldr	r3, [pc, #196]	@ (8004dec <xTaskIncrementTick+0x150>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d36:	693a      	ldr	r2, [r7, #16]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d203      	bcs.n	8004d46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d3e:	4a2e      	ldr	r2, [pc, #184]	@ (8004df8 <xTaskIncrementTick+0x15c>)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d44:	e02f      	b.n	8004da6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	3304      	adds	r3, #4
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fe fc34 	bl	80035b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d004      	beq.n	8004d62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	3318      	adds	r3, #24
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe fc2b 	bl	80035b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d66:	4b25      	ldr	r3, [pc, #148]	@ (8004dfc <xTaskIncrementTick+0x160>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d903      	bls.n	8004d76 <xTaskIncrementTick+0xda>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d72:	4a22      	ldr	r2, [pc, #136]	@ (8004dfc <xTaskIncrementTick+0x160>)
 8004d74:	6013      	str	r3, [r2, #0]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7a:	4613      	mov	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	4413      	add	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4a1f      	ldr	r2, [pc, #124]	@ (8004e00 <xTaskIncrementTick+0x164>)
 8004d84:	441a      	add	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	3304      	adds	r3, #4
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4610      	mov	r0, r2
 8004d8e:	f7fe fbb8 	bl	8003502 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d96:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <xTaskIncrementTick+0x168>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d3b8      	bcc.n	8004d12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004da0:	2301      	movs	r3, #1
 8004da2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004da4:	e7b5      	b.n	8004d12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004da6:	4b17      	ldr	r3, [pc, #92]	@ (8004e04 <xTaskIncrementTick+0x168>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dac:	4914      	ldr	r1, [pc, #80]	@ (8004e00 <xTaskIncrementTick+0x164>)
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d901      	bls.n	8004dc2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004dc2:	4b11      	ldr	r3, [pc, #68]	@ (8004e08 <xTaskIncrementTick+0x16c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e004      	b.n	8004dda <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8004e0c <xTaskIncrementTick+0x170>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8004e0c <xTaskIncrementTick+0x170>)
 8004dd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004dda:	697b      	ldr	r3, [r7, #20]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000de4 	.word	0x20000de4
 8004de8:	20000dc0 	.word	0x20000dc0
 8004dec:	20000d74 	.word	0x20000d74
 8004df0:	20000d78 	.word	0x20000d78
 8004df4:	20000dd4 	.word	0x20000dd4
 8004df8:	20000ddc 	.word	0x20000ddc
 8004dfc:	20000dc4 	.word	0x20000dc4
 8004e00:	200008ec 	.word	0x200008ec
 8004e04:	200008e8 	.word	0x200008e8
 8004e08:	20000dd0 	.word	0x20000dd0
 8004e0c:	20000dcc 	.word	0x20000dcc

08004e10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e16:	4b2a      	ldr	r3, [pc, #168]	@ (8004ec0 <vTaskSwitchContext+0xb0>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d003      	beq.n	8004e26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e1e:	4b29      	ldr	r3, [pc, #164]	@ (8004ec4 <vTaskSwitchContext+0xb4>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e24:	e047      	b.n	8004eb6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004e26:	4b27      	ldr	r3, [pc, #156]	@ (8004ec4 <vTaskSwitchContext+0xb4>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e2c:	4b26      	ldr	r3, [pc, #152]	@ (8004ec8 <vTaskSwitchContext+0xb8>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	e011      	b.n	8004e58 <vTaskSwitchContext+0x48>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d10b      	bne.n	8004e52 <vTaskSwitchContext+0x42>
	__asm volatile
 8004e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3e:	f383 8811 	msr	BASEPRI, r3
 8004e42:	f3bf 8f6f 	isb	sy
 8004e46:	f3bf 8f4f 	dsb	sy
 8004e4a:	607b      	str	r3, [r7, #4]
}
 8004e4c:	bf00      	nop
 8004e4e:	bf00      	nop
 8004e50:	e7fd      	b.n	8004e4e <vTaskSwitchContext+0x3e>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	491c      	ldr	r1, [pc, #112]	@ (8004ecc <vTaskSwitchContext+0xbc>)
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	440b      	add	r3, r1
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0e3      	beq.n	8004e34 <vTaskSwitchContext+0x24>
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	4413      	add	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4a15      	ldr	r2, [pc, #84]	@ (8004ecc <vTaskSwitchContext+0xbc>)
 8004e78:	4413      	add	r3, r2
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	605a      	str	r2, [r3, #4]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	3308      	adds	r3, #8
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d104      	bne.n	8004e9c <vTaskSwitchContext+0x8c>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	605a      	str	r2, [r3, #4]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8004ed0 <vTaskSwitchContext+0xc0>)
 8004ea4:	6013      	str	r3, [r2, #0]
 8004ea6:	4a08      	ldr	r2, [pc, #32]	@ (8004ec8 <vTaskSwitchContext+0xb8>)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004eac:	4b08      	ldr	r3, [pc, #32]	@ (8004ed0 <vTaskSwitchContext+0xc0>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3354      	adds	r3, #84	@ 0x54
 8004eb2:	4a08      	ldr	r2, [pc, #32]	@ (8004ed4 <vTaskSwitchContext+0xc4>)
 8004eb4:	6013      	str	r3, [r2, #0]
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr
 8004ec0:	20000de4 	.word	0x20000de4
 8004ec4:	20000dd0 	.word	0x20000dd0
 8004ec8:	20000dc4 	.word	0x20000dc4
 8004ecc:	200008ec 	.word	0x200008ec
 8004ed0:	200008e8 	.word	0x200008e8
 8004ed4:	20000010 	.word	0x20000010

08004ed8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10b      	bne.n	8004f00 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	60fb      	str	r3, [r7, #12]
}
 8004efa:	bf00      	nop
 8004efc:	bf00      	nop
 8004efe:	e7fd      	b.n	8004efc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f00:	4b07      	ldr	r3, [pc, #28]	@ (8004f20 <vTaskPlaceOnEventList+0x48>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3318      	adds	r3, #24
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fe fb1d 	bl	8003548 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f0e:	2101      	movs	r1, #1
 8004f10:	6838      	ldr	r0, [r7, #0]
 8004f12:	f000 fb87 	bl	8005624 <prvAddCurrentTaskToDelayedList>
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200008e8 	.word	0x200008e8

08004f24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10b      	bne.n	8004f4e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	617b      	str	r3, [r7, #20]
}
 8004f48:	bf00      	nop
 8004f4a:	bf00      	nop
 8004f4c:	e7fd      	b.n	8004f4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3318      	adds	r3, #24
 8004f54:	4619      	mov	r1, r3
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7fe fad3 	bl	8003502 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004f62:	f04f 33ff 	mov.w	r3, #4294967295
 8004f66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	68b8      	ldr	r0, [r7, #8]
 8004f6c:	f000 fb5a 	bl	8005624 <prvAddCurrentTaskToDelayedList>
	}
 8004f70:	bf00      	nop
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	200008e8 	.word	0x200008e8

08004f7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f96:	f383 8811 	msr	BASEPRI, r3
 8004f9a:	f3bf 8f6f 	isb	sy
 8004f9e:	f3bf 8f4f 	dsb	sy
 8004fa2:	60fb      	str	r3, [r7, #12]
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	e7fd      	b.n	8004fa6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	3318      	adds	r3, #24
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fb02 	bl	80035b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800502c <xTaskRemoveFromEventList+0xb0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d11d      	bne.n	8004ff8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe faf9 	bl	80035b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fca:	4b19      	ldr	r3, [pc, #100]	@ (8005030 <xTaskRemoveFromEventList+0xb4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d903      	bls.n	8004fda <xTaskRemoveFromEventList+0x5e>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd6:	4a16      	ldr	r2, [pc, #88]	@ (8005030 <xTaskRemoveFromEventList+0xb4>)
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4a13      	ldr	r2, [pc, #76]	@ (8005034 <xTaskRemoveFromEventList+0xb8>)
 8004fe8:	441a      	add	r2, r3
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3304      	adds	r3, #4
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f7fe fa86 	bl	8003502 <vListInsertEnd>
 8004ff6:	e005      	b.n	8005004 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	3318      	adds	r3, #24
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	480e      	ldr	r0, [pc, #56]	@ (8005038 <xTaskRemoveFromEventList+0xbc>)
 8005000:	f7fe fa7f 	bl	8003502 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005008:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <xTaskRemoveFromEventList+0xc0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800500e:	429a      	cmp	r2, r3
 8005010:	d905      	bls.n	800501e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005012:	2301      	movs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005016:	4b0a      	ldr	r3, [pc, #40]	@ (8005040 <xTaskRemoveFromEventList+0xc4>)
 8005018:	2201      	movs	r2, #1
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e001      	b.n	8005022 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005022:	697b      	ldr	r3, [r7, #20]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20000de4 	.word	0x20000de4
 8005030:	20000dc4 	.word	0x20000dc4
 8005034:	200008ec 	.word	0x200008ec
 8005038:	20000d7c 	.word	0x20000d7c
 800503c:	200008e8 	.word	0x200008e8
 8005040:	20000dd0 	.word	0x20000dd0

08005044 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800504c:	4b06      	ldr	r3, [pc, #24]	@ (8005068 <vTaskInternalSetTimeOutState+0x24>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005054:	4b05      	ldr	r3, [pc, #20]	@ (800506c <vTaskInternalSetTimeOutState+0x28>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	605a      	str	r2, [r3, #4]
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	20000dd4 	.word	0x20000dd4
 800506c:	20000dc0 	.word	0x20000dc0

08005070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005084:	f383 8811 	msr	BASEPRI, r3
 8005088:	f3bf 8f6f 	isb	sy
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	613b      	str	r3, [r7, #16]
}
 8005092:	bf00      	nop
 8005094:	bf00      	nop
 8005096:	e7fd      	b.n	8005094 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	60fb      	str	r3, [r7, #12]
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	e7fd      	b.n	80050b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80050b6:	f000 ff51 	bl	8005f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005130 <xTaskCheckForTimeOut+0xc0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d102      	bne.n	80050da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	e023      	b.n	8005122 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b15      	ldr	r3, [pc, #84]	@ (8005134 <xTaskCheckForTimeOut+0xc4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d007      	beq.n	80050f6 <xTaskCheckForTimeOut+0x86>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d302      	bcc.n	80050f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050f0:	2301      	movs	r3, #1
 80050f2:	61fb      	str	r3, [r7, #28]
 80050f4:	e015      	b.n	8005122 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d20b      	bcs.n	8005118 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	1ad2      	subs	r2, r2, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff ff99 	bl	8005044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	e004      	b.n	8005122 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800511e:	2301      	movs	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005122:	f000 ff4b 	bl	8005fbc <vPortExitCritical>

	return xReturn;
 8005126:	69fb      	ldr	r3, [r7, #28]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000dc0 	.word	0x20000dc0
 8005134:	20000dd4 	.word	0x20000dd4

08005138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800513c:	4b03      	ldr	r3, [pc, #12]	@ (800514c <vTaskMissedYield+0x14>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]
}
 8005142:	bf00      	nop
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	20000dd0 	.word	0x20000dd0

08005150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005158:	f000 f852 	bl	8005200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800515c:	4b06      	ldr	r3, [pc, #24]	@ (8005178 <prvIdleTask+0x28>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d9f9      	bls.n	8005158 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005164:	4b05      	ldr	r3, [pc, #20]	@ (800517c <prvIdleTask+0x2c>)
 8005166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005174:	e7f0      	b.n	8005158 <prvIdleTask+0x8>
 8005176:	bf00      	nop
 8005178:	200008ec 	.word	0x200008ec
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005186:	2300      	movs	r3, #0
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	e00c      	b.n	80051a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4a12      	ldr	r2, [pc, #72]	@ (80051e0 <prvInitialiseTaskLists+0x60>)
 8005198:	4413      	add	r3, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe f986 	bl	80034ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3301      	adds	r3, #1
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b37      	cmp	r3, #55	@ 0x37
 80051aa:	d9ef      	bls.n	800518c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051ac:	480d      	ldr	r0, [pc, #52]	@ (80051e4 <prvInitialiseTaskLists+0x64>)
 80051ae:	f7fe f97d 	bl	80034ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051b2:	480d      	ldr	r0, [pc, #52]	@ (80051e8 <prvInitialiseTaskLists+0x68>)
 80051b4:	f7fe f97a 	bl	80034ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051b8:	480c      	ldr	r0, [pc, #48]	@ (80051ec <prvInitialiseTaskLists+0x6c>)
 80051ba:	f7fe f977 	bl	80034ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051be:	480c      	ldr	r0, [pc, #48]	@ (80051f0 <prvInitialiseTaskLists+0x70>)
 80051c0:	f7fe f974 	bl	80034ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051c4:	480b      	ldr	r0, [pc, #44]	@ (80051f4 <prvInitialiseTaskLists+0x74>)
 80051c6:	f7fe f971 	bl	80034ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051ca:	4b0b      	ldr	r3, [pc, #44]	@ (80051f8 <prvInitialiseTaskLists+0x78>)
 80051cc:	4a05      	ldr	r2, [pc, #20]	@ (80051e4 <prvInitialiseTaskLists+0x64>)
 80051ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051d0:	4b0a      	ldr	r3, [pc, #40]	@ (80051fc <prvInitialiseTaskLists+0x7c>)
 80051d2:	4a05      	ldr	r2, [pc, #20]	@ (80051e8 <prvInitialiseTaskLists+0x68>)
 80051d4:	601a      	str	r2, [r3, #0]
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	200008ec 	.word	0x200008ec
 80051e4:	20000d4c 	.word	0x20000d4c
 80051e8:	20000d60 	.word	0x20000d60
 80051ec:	20000d7c 	.word	0x20000d7c
 80051f0:	20000d90 	.word	0x20000d90
 80051f4:	20000da8 	.word	0x20000da8
 80051f8:	20000d74 	.word	0x20000d74
 80051fc:	20000d78 	.word	0x20000d78

08005200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005206:	e019      	b.n	800523c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005208:	f000 fea8 	bl	8005f5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800520c:	4b10      	ldr	r3, [pc, #64]	@ (8005250 <prvCheckTasksWaitingTermination+0x50>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	4618      	mov	r0, r3
 800521a:	f7fe f9cd 	bl	80035b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800521e:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <prvCheckTasksWaitingTermination+0x54>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3b01      	subs	r3, #1
 8005224:	4a0b      	ldr	r2, [pc, #44]	@ (8005254 <prvCheckTasksWaitingTermination+0x54>)
 8005226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005228:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <prvCheckTasksWaitingTermination+0x58>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3b01      	subs	r3, #1
 800522e:	4a0a      	ldr	r2, [pc, #40]	@ (8005258 <prvCheckTasksWaitingTermination+0x58>)
 8005230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005232:	f000 fec3 	bl	8005fbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f810 	bl	800525c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800523c:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <prvCheckTasksWaitingTermination+0x58>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e1      	bne.n	8005208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005244:	bf00      	nop
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000d90 	.word	0x20000d90
 8005254:	20000dbc 	.word	0x20000dbc
 8005258:	20000da4 	.word	0x20000da4

0800525c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	3354      	adds	r3, #84	@ 0x54
 8005268:	4618      	mov	r0, r3
 800526a:	f001 f98d 	bl	8006588 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005274:	2b00      	cmp	r3, #0
 8005276:	d108      	bne.n	800528a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527c:	4618      	mov	r0, r3
 800527e:	f001 f83d 	bl	80062fc <vPortFree>
				vPortFree( pxTCB );
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f001 f83a 	bl	80062fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005288:	e019      	b.n	80052be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005290:	2b01      	cmp	r3, #1
 8005292:	d103      	bne.n	800529c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f001 f831 	bl	80062fc <vPortFree>
	}
 800529a:	e010      	b.n	80052be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d00b      	beq.n	80052be <prvDeleteTCB+0x62>
	__asm volatile
 80052a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052aa:	f383 8811 	msr	BASEPRI, r3
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	60fb      	str	r3, [r7, #12]
}
 80052b8:	bf00      	nop
 80052ba:	bf00      	nop
 80052bc:	e7fd      	b.n	80052ba <prvDeleteTCB+0x5e>
	}
 80052be:	bf00      	nop
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
	...

080052c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ce:	4b0c      	ldr	r3, [pc, #48]	@ (8005300 <prvResetNextTaskUnblockTime+0x38>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d104      	bne.n	80052e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005304 <prvResetNextTaskUnblockTime+0x3c>)
 80052da:	f04f 32ff 	mov.w	r2, #4294967295
 80052de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052e0:	e008      	b.n	80052f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e2:	4b07      	ldr	r3, [pc, #28]	@ (8005300 <prvResetNextTaskUnblockTime+0x38>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	4a04      	ldr	r2, [pc, #16]	@ (8005304 <prvResetNextTaskUnblockTime+0x3c>)
 80052f2:	6013      	str	r3, [r2, #0]
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000d74 	.word	0x20000d74
 8005304:	20000ddc 	.word	0x20000ddc

08005308 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800530e:	4b0b      	ldr	r3, [pc, #44]	@ (800533c <xTaskGetSchedulerState+0x34>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d102      	bne.n	800531c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005316:	2301      	movs	r3, #1
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	e008      	b.n	800532e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800531c:	4b08      	ldr	r3, [pc, #32]	@ (8005340 <xTaskGetSchedulerState+0x38>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d102      	bne.n	800532a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005324:	2302      	movs	r3, #2
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	e001      	b.n	800532e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800532a:	2300      	movs	r3, #0
 800532c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800532e:	687b      	ldr	r3, [r7, #4]
	}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	bc80      	pop	{r7}
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	20000dc8 	.word	0x20000dc8
 8005340:	20000de4 	.word	0x20000de4

08005344 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d051      	beq.n	80053fe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800535e:	4b2a      	ldr	r3, [pc, #168]	@ (8005408 <xTaskPriorityInherit+0xc4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005364:	429a      	cmp	r2, r3
 8005366:	d241      	bcs.n	80053ec <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	699b      	ldr	r3, [r3, #24]
 800536c:	2b00      	cmp	r3, #0
 800536e:	db06      	blt.n	800537e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005370:	4b25      	ldr	r3, [pc, #148]	@ (8005408 <xTaskPriorityInherit+0xc4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005376:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	6959      	ldr	r1, [r3, #20]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4a1f      	ldr	r2, [pc, #124]	@ (800540c <xTaskPriorityInherit+0xc8>)
 8005390:	4413      	add	r3, r2
 8005392:	4299      	cmp	r1, r3
 8005394:	d122      	bne.n	80053dc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	3304      	adds	r3, #4
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe f90c 	bl	80035b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80053a0:	4b19      	ldr	r3, [pc, #100]	@ (8005408 <xTaskPriorityInherit+0xc4>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ae:	4b18      	ldr	r3, [pc, #96]	@ (8005410 <xTaskPriorityInherit+0xcc>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d903      	bls.n	80053be <xTaskPriorityInherit+0x7a>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ba:	4a15      	ldr	r2, [pc, #84]	@ (8005410 <xTaskPriorityInherit+0xcc>)
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	4a10      	ldr	r2, [pc, #64]	@ (800540c <xTaskPriorityInherit+0xc8>)
 80053cc:	441a      	add	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	3304      	adds	r3, #4
 80053d2:	4619      	mov	r1, r3
 80053d4:	4610      	mov	r0, r2
 80053d6:	f7fe f894 	bl	8003502 <vListInsertEnd>
 80053da:	e004      	b.n	80053e6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80053dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005408 <xTaskPriorityInherit+0xc4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80053e6:	2301      	movs	r3, #1
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	e008      	b.n	80053fe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053f0:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <xTaskPriorityInherit+0xc4>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d201      	bcs.n	80053fe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80053fa:	2301      	movs	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053fe:	68fb      	ldr	r3, [r7, #12]
	}
 8005400:	4618      	mov	r0, r3
 8005402:	3710      	adds	r7, #16
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	200008e8 	.word	0x200008e8
 800540c:	200008ec 	.word	0x200008ec
 8005410:	20000dc4 	.word	0x20000dc4

08005414 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d058      	beq.n	80054dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800542a:	4b2f      	ldr	r3, [pc, #188]	@ (80054e8 <xTaskPriorityDisinherit+0xd4>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	429a      	cmp	r2, r3
 8005432:	d00b      	beq.n	800544c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	60fb      	str	r3, [r7, #12]
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	e7fd      	b.n	8005448 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10b      	bne.n	800546c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	60bb      	str	r3, [r7, #8]
}
 8005466:	bf00      	nop
 8005468:	bf00      	nop
 800546a:	e7fd      	b.n	8005468 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005470:	1e5a      	subs	r2, r3, #1
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800547e:	429a      	cmp	r2, r3
 8005480:	d02c      	beq.n	80054dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005486:	2b00      	cmp	r3, #0
 8005488:	d128      	bne.n	80054dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	3304      	adds	r3, #4
 800548e:	4618      	mov	r0, r3
 8005490:	f7fe f892 	bl	80035b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ac:	4b0f      	ldr	r3, [pc, #60]	@ (80054ec <xTaskPriorityDisinherit+0xd8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d903      	bls.n	80054bc <xTaskPriorityDisinherit+0xa8>
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b8:	4a0c      	ldr	r2, [pc, #48]	@ (80054ec <xTaskPriorityDisinherit+0xd8>)
 80054ba:	6013      	str	r3, [r2, #0]
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054c0:	4613      	mov	r3, r2
 80054c2:	009b      	lsls	r3, r3, #2
 80054c4:	4413      	add	r3, r2
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4a09      	ldr	r2, [pc, #36]	@ (80054f0 <xTaskPriorityDisinherit+0xdc>)
 80054ca:	441a      	add	r2, r3
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	3304      	adds	r3, #4
 80054d0:	4619      	mov	r1, r3
 80054d2:	4610      	mov	r0, r2
 80054d4:	f7fe f815 	bl	8003502 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80054dc:	697b      	ldr	r3, [r7, #20]
	}
 80054de:	4618      	mov	r0, r3
 80054e0:	3718      	adds	r7, #24
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	200008e8 	.word	0x200008e8
 80054ec:	20000dc4 	.word	0x20000dc4
 80054f0:	200008ec 	.word	0x200008ec

080054f4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005502:	2301      	movs	r3, #1
 8005504:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d06c      	beq.n	80055e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005510:	2b00      	cmp	r3, #0
 8005512:	d10b      	bne.n	800552c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005518:	f383 8811 	msr	BASEPRI, r3
 800551c:	f3bf 8f6f 	isb	sy
 8005520:	f3bf 8f4f 	dsb	sy
 8005524:	60fb      	str	r3, [r7, #12]
}
 8005526:	bf00      	nop
 8005528:	bf00      	nop
 800552a:	e7fd      	b.n	8005528 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005530:	683a      	ldr	r2, [r7, #0]
 8005532:	429a      	cmp	r2, r3
 8005534:	d902      	bls.n	800553c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	e002      	b.n	8005542 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005540:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005546:	69fa      	ldr	r2, [r7, #28]
 8005548:	429a      	cmp	r2, r3
 800554a:	d04c      	beq.n	80055e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	429a      	cmp	r2, r3
 8005554:	d147      	bne.n	80055e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005556:	4b26      	ldr	r3, [pc, #152]	@ (80055f0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	429a      	cmp	r2, r3
 800555e:	d10b      	bne.n	8005578 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005564:	f383 8811 	msr	BASEPRI, r3
 8005568:	f3bf 8f6f 	isb	sy
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	60bb      	str	r3, [r7, #8]
}
 8005572:	bf00      	nop
 8005574:	bf00      	nop
 8005576:	e7fd      	b.n	8005574 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	699b      	ldr	r3, [r3, #24]
 8005588:	2b00      	cmp	r3, #0
 800558a:	db04      	blt.n	8005596 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	6959      	ldr	r1, [r3, #20]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	4613      	mov	r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	4413      	add	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4a13      	ldr	r2, [pc, #76]	@ (80055f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80055a6:	4413      	add	r3, r2
 80055a8:	4299      	cmp	r1, r3
 80055aa:	d11c      	bne.n	80055e6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	3304      	adds	r3, #4
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fe f801 	bl	80035b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ba:	4b0f      	ldr	r3, [pc, #60]	@ (80055f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d903      	bls.n	80055ca <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c6:	4a0c      	ldr	r2, [pc, #48]	@ (80055f8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80055c8:	6013      	str	r3, [r2, #0]
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ce:	4613      	mov	r3, r2
 80055d0:	009b      	lsls	r3, r3, #2
 80055d2:	4413      	add	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4a07      	ldr	r2, [pc, #28]	@ (80055f4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80055d8:	441a      	add	r2, r3
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	3304      	adds	r3, #4
 80055de:	4619      	mov	r1, r3
 80055e0:	4610      	mov	r0, r2
 80055e2:	f7fd ff8e 	bl	8003502 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055e6:	bf00      	nop
 80055e8:	3720      	adds	r7, #32
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	200008e8 	.word	0x200008e8
 80055f4:	200008ec 	.word	0x200008ec
 80055f8:	20000dc4 	.word	0x20000dc4

080055fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005600:	4b07      	ldr	r3, [pc, #28]	@ (8005620 <pvTaskIncrementMutexHeldCount+0x24>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d004      	beq.n	8005612 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005608:	4b05      	ldr	r3, [pc, #20]	@ (8005620 <pvTaskIncrementMutexHeldCount+0x24>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800560e:	3201      	adds	r2, #1
 8005610:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005612:	4b03      	ldr	r3, [pc, #12]	@ (8005620 <pvTaskIncrementMutexHeldCount+0x24>)
 8005614:	681b      	ldr	r3, [r3, #0]
	}
 8005616:	4618      	mov	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	200008e8 	.word	0x200008e8

08005624 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800562e:	4b21      	ldr	r3, [pc, #132]	@ (80056b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005634:	4b20      	ldr	r3, [pc, #128]	@ (80056b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3304      	adds	r3, #4
 800563a:	4618      	mov	r0, r3
 800563c:	f7fd ffbc 	bl	80035b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005646:	d10a      	bne.n	800565e <prvAddCurrentTaskToDelayedList+0x3a>
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800564e:	4b1a      	ldr	r3, [pc, #104]	@ (80056b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3304      	adds	r3, #4
 8005654:	4619      	mov	r1, r3
 8005656:	4819      	ldr	r0, [pc, #100]	@ (80056bc <prvAddCurrentTaskToDelayedList+0x98>)
 8005658:	f7fd ff53 	bl	8003502 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800565c:	e026      	b.n	80056ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4413      	add	r3, r2
 8005664:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005666:	4b14      	ldr	r3, [pc, #80]	@ (80056b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	429a      	cmp	r2, r3
 8005674:	d209      	bcs.n	800568a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005676:	4b12      	ldr	r3, [pc, #72]	@ (80056c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b0f      	ldr	r3, [pc, #60]	@ (80056b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3304      	adds	r3, #4
 8005680:	4619      	mov	r1, r3
 8005682:	4610      	mov	r0, r2
 8005684:	f7fd ff60 	bl	8003548 <vListInsert>
}
 8005688:	e010      	b.n	80056ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800568a:	4b0e      	ldr	r3, [pc, #56]	@ (80056c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	3304      	adds	r3, #4
 8005694:	4619      	mov	r1, r3
 8005696:	4610      	mov	r0, r2
 8005698:	f7fd ff56 	bl	8003548 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800569c:	4b0a      	ldr	r3, [pc, #40]	@ (80056c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68ba      	ldr	r2, [r7, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d202      	bcs.n	80056ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80056a6:	4a08      	ldr	r2, [pc, #32]	@ (80056c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	6013      	str	r3, [r2, #0]
}
 80056ac:	bf00      	nop
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000dc0 	.word	0x20000dc0
 80056b8:	200008e8 	.word	0x200008e8
 80056bc:	20000da8 	.word	0x20000da8
 80056c0:	20000d78 	.word	0x20000d78
 80056c4:	20000d74 	.word	0x20000d74
 80056c8:	20000ddc 	.word	0x20000ddc

080056cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08a      	sub	sp, #40	@ 0x28
 80056d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80056d6:	f000 fb11 	bl	8005cfc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80056da:	4b1d      	ldr	r3, [pc, #116]	@ (8005750 <xTimerCreateTimerTask+0x84>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d021      	beq.n	8005726 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80056ea:	1d3a      	adds	r2, r7, #4
 80056ec:	f107 0108 	add.w	r1, r7, #8
 80056f0:	f107 030c 	add.w	r3, r7, #12
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7fd febf 	bl	8003478 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	68fa      	ldr	r2, [r7, #12]
 8005700:	9202      	str	r2, [sp, #8]
 8005702:	9301      	str	r3, [sp, #4]
 8005704:	2302      	movs	r3, #2
 8005706:	9300      	str	r3, [sp, #0]
 8005708:	2300      	movs	r3, #0
 800570a:	460a      	mov	r2, r1
 800570c:	4911      	ldr	r1, [pc, #68]	@ (8005754 <xTimerCreateTimerTask+0x88>)
 800570e:	4812      	ldr	r0, [pc, #72]	@ (8005758 <xTimerCreateTimerTask+0x8c>)
 8005710:	f7fe ffa6 	bl	8004660 <xTaskCreateStatic>
 8005714:	4603      	mov	r3, r0
 8005716:	4a11      	ldr	r2, [pc, #68]	@ (800575c <xTimerCreateTimerTask+0x90>)
 8005718:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800571a:	4b10      	ldr	r3, [pc, #64]	@ (800575c <xTimerCreateTimerTask+0x90>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005722:	2301      	movs	r3, #1
 8005724:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10b      	bne.n	8005744 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800572c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	613b      	str	r3, [r7, #16]
}
 800573e:	bf00      	nop
 8005740:	bf00      	nop
 8005742:	e7fd      	b.n	8005740 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005744:	697b      	ldr	r3, [r7, #20]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3718      	adds	r7, #24
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
 800574e:	bf00      	nop
 8005750:	20000e18 	.word	0x20000e18
 8005754:	08006fc4 	.word	0x08006fc4
 8005758:	08005899 	.word	0x08005899
 800575c:	20000e1c 	.word	0x20000e1c

08005760 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08a      	sub	sp, #40	@ 0x28
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800576e:	2300      	movs	r3, #0
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d10b      	bne.n	8005790 <xTimerGenericCommand+0x30>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	623b      	str	r3, [r7, #32]
}
 800578a:	bf00      	nop
 800578c:	bf00      	nop
 800578e:	e7fd      	b.n	800578c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005790:	4b19      	ldr	r3, [pc, #100]	@ (80057f8 <xTimerGenericCommand+0x98>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d02a      	beq.n	80057ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b05      	cmp	r3, #5
 80057a8:	dc18      	bgt.n	80057dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80057aa:	f7ff fdad 	bl	8005308 <xTaskGetSchedulerState>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d109      	bne.n	80057c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80057b4:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <xTimerGenericCommand+0x98>)
 80057b6:	6818      	ldr	r0, [r3, #0]
 80057b8:	f107 0110 	add.w	r1, r7, #16
 80057bc:	2300      	movs	r3, #0
 80057be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057c0:	f7fe f8d8 	bl	8003974 <xQueueGenericSend>
 80057c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80057c6:	e012      	b.n	80057ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80057c8:	4b0b      	ldr	r3, [pc, #44]	@ (80057f8 <xTimerGenericCommand+0x98>)
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	f107 0110 	add.w	r1, r7, #16
 80057d0:	2300      	movs	r3, #0
 80057d2:	2200      	movs	r2, #0
 80057d4:	f7fe f8ce 	bl	8003974 <xQueueGenericSend>
 80057d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80057da:	e008      	b.n	80057ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80057dc:	4b06      	ldr	r3, [pc, #24]	@ (80057f8 <xTimerGenericCommand+0x98>)
 80057de:	6818      	ldr	r0, [r3, #0]
 80057e0:	f107 0110 	add.w	r1, r7, #16
 80057e4:	2300      	movs	r3, #0
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	f7fe f9c6 	bl	8003b78 <xQueueGenericSendFromISR>
 80057ec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80057ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3728      	adds	r7, #40	@ 0x28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	20000e18 	.word	0x20000e18

080057fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af02      	add	r7, sp, #8
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005806:	4b23      	ldr	r3, [pc, #140]	@ (8005894 <prvProcessExpiredTimer+0x98>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	3304      	adds	r3, #4
 8005814:	4618      	mov	r0, r3
 8005816:	f7fd fecf 	bl	80035b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d023      	beq.n	8005870 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	18d1      	adds	r1, r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	6978      	ldr	r0, [r7, #20]
 8005836:	f000 f8d3 	bl	80059e0 <prvInsertTimerInActiveList>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d020      	beq.n	8005882 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005840:	2300      	movs	r3, #0
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	2300      	movs	r3, #0
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	2100      	movs	r1, #0
 800584a:	6978      	ldr	r0, [r7, #20]
 800584c:	f7ff ff88 	bl	8005760 <xTimerGenericCommand>
 8005850:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d114      	bne.n	8005882 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	60fb      	str	r3, [r7, #12]
}
 800586a:	bf00      	nop
 800586c:	bf00      	nop
 800586e:	e7fd      	b.n	800586c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005876:	f023 0301 	bic.w	r3, r3, #1
 800587a:	b2da      	uxtb	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	6a1b      	ldr	r3, [r3, #32]
 8005886:	6978      	ldr	r0, [r7, #20]
 8005888:	4798      	blx	r3
}
 800588a:	bf00      	nop
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	20000e10 	.word	0x20000e10

08005898 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058a0:	f107 0308 	add.w	r3, r7, #8
 80058a4:	4618      	mov	r0, r3
 80058a6:	f000 f859 	bl	800595c <prvGetNextExpireTime>
 80058aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	4619      	mov	r1, r3
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 f805 	bl	80058c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80058b6:	f000 f8d5 	bl	8005a64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80058ba:	bf00      	nop
 80058bc:	e7f0      	b.n	80058a0 <prvTimerTask+0x8>
	...

080058c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80058ca:	f7ff f92d 	bl	8004b28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058ce:	f107 0308 	add.w	r3, r7, #8
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f864 	bl	80059a0 <prvSampleTimeNow>
 80058d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d130      	bne.n	8005942 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10a      	bne.n	80058fc <prvProcessTimerOrBlockTask+0x3c>
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d806      	bhi.n	80058fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80058ee:	f7ff f929 	bl	8004b44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f7ff ff81 	bl	80057fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80058fa:	e024      	b.n	8005946 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d008      	beq.n	8005914 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005902:	4b13      	ldr	r3, [pc, #76]	@ (8005950 <prvProcessTimerOrBlockTask+0x90>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <prvProcessTimerOrBlockTask+0x50>
 800590c:	2301      	movs	r3, #1
 800590e:	e000      	b.n	8005912 <prvProcessTimerOrBlockTask+0x52>
 8005910:	2300      	movs	r3, #0
 8005912:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005914:	4b0f      	ldr	r3, [pc, #60]	@ (8005954 <prvProcessTimerOrBlockTask+0x94>)
 8005916:	6818      	ldr	r0, [r3, #0]
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	4619      	mov	r1, r3
 8005922:	f7fe fe69 	bl	80045f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005926:	f7ff f90d 	bl	8004b44 <xTaskResumeAll>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d10a      	bne.n	8005946 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005930:	4b09      	ldr	r3, [pc, #36]	@ (8005958 <prvProcessTimerOrBlockTask+0x98>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
}
 8005940:	e001      	b.n	8005946 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005942:	f7ff f8ff 	bl	8004b44 <xTaskResumeAll>
}
 8005946:	bf00      	nop
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000e14 	.word	0x20000e14
 8005954:	20000e18 	.word	0x20000e18
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800595c:	b480      	push	{r7}
 800595e:	b085      	sub	sp, #20
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005964:	4b0d      	ldr	r3, [pc, #52]	@ (800599c <prvGetNextExpireTime+0x40>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <prvGetNextExpireTime+0x16>
 800596e:	2201      	movs	r2, #1
 8005970:	e000      	b.n	8005974 <prvGetNextExpireTime+0x18>
 8005972:	2200      	movs	r2, #0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d105      	bne.n	800598c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005980:	4b06      	ldr	r3, [pc, #24]	@ (800599c <prvGetNextExpireTime+0x40>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	e001      	b.n	8005990 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005990:	68fb      	ldr	r3, [r7, #12]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3714      	adds	r7, #20
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr
 800599c:	20000e10 	.word	0x20000e10

080059a0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80059a8:	f7ff f96a 	bl	8004c80 <xTaskGetTickCount>
 80059ac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80059ae:	4b0b      	ldr	r3, [pc, #44]	@ (80059dc <prvSampleTimeNow+0x3c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68fa      	ldr	r2, [r7, #12]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d205      	bcs.n	80059c4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80059b8:	f000 f93a 	bl	8005c30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	601a      	str	r2, [r3, #0]
 80059c2:	e002      	b.n	80059ca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80059ca:	4a04      	ldr	r2, [pc, #16]	@ (80059dc <prvSampleTimeNow+0x3c>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80059d0:	68fb      	ldr	r3, [r7, #12]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	20000e20 	.word	0x20000e20

080059e0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80059ee:	2300      	movs	r3, #0
 80059f0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d812      	bhi.n	8005a2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	1ad2      	subs	r2, r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d302      	bcc.n	8005a1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005a14:	2301      	movs	r3, #1
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e01b      	b.n	8005a52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a1a:	4b10      	ldr	r3, [pc, #64]	@ (8005a5c <prvInsertTimerInActiveList+0x7c>)
 8005a1c:	681a      	ldr	r2, [r3, #0]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	3304      	adds	r3, #4
 8005a22:	4619      	mov	r1, r3
 8005a24:	4610      	mov	r0, r2
 8005a26:	f7fd fd8f 	bl	8003548 <vListInsert>
 8005a2a:	e012      	b.n	8005a52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d206      	bcs.n	8005a42 <prvInsertTimerInActiveList+0x62>
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d302      	bcc.n	8005a42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	617b      	str	r3, [r7, #20]
 8005a40:	e007      	b.n	8005a52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a42:	4b07      	ldr	r3, [pc, #28]	@ (8005a60 <prvInsertTimerInActiveList+0x80>)
 8005a44:	681a      	ldr	r2, [r3, #0]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	3304      	adds	r3, #4
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4610      	mov	r0, r2
 8005a4e:	f7fd fd7b 	bl	8003548 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005a52:	697b      	ldr	r3, [r7, #20]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3718      	adds	r7, #24
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	20000e14 	.word	0x20000e14
 8005a60:	20000e10 	.word	0x20000e10

08005a64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08e      	sub	sp, #56	@ 0x38
 8005a68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a6a:	e0ce      	b.n	8005c0a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	da19      	bge.n	8005aa6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005a72:	1d3b      	adds	r3, r7, #4
 8005a74:	3304      	adds	r3, #4
 8005a76:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10b      	bne.n	8005a96 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	61fb      	str	r3, [r7, #28]
}
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	e7fd      	b.n	8005a92 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a9c:	6850      	ldr	r0, [r2, #4]
 8005a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005aa0:	6892      	ldr	r2, [r2, #8]
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f2c0 80ae 	blt.w	8005c0a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d004      	beq.n	8005ac4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005abc:	3304      	adds	r3, #4
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fd fd7a 	bl	80035b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005ac4:	463b      	mov	r3, r7
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7ff ff6a 	bl	80059a0 <prvSampleTimeNow>
 8005acc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b09      	cmp	r3, #9
 8005ad2:	f200 8097 	bhi.w	8005c04 <prvProcessReceivedCommands+0x1a0>
 8005ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8005adc <prvProcessReceivedCommands+0x78>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005b05 	.word	0x08005b05
 8005ae0:	08005b05 	.word	0x08005b05
 8005ae4:	08005b05 	.word	0x08005b05
 8005ae8:	08005b7b 	.word	0x08005b7b
 8005aec:	08005b8f 	.word	0x08005b8f
 8005af0:	08005bdb 	.word	0x08005bdb
 8005af4:	08005b05 	.word	0x08005b05
 8005af8:	08005b05 	.word	0x08005b05
 8005afc:	08005b7b 	.word	0x08005b7b
 8005b00:	08005b8f 	.word	0x08005b8f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b0a:	f043 0301 	orr.w	r3, r3, #1
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1a:	699b      	ldr	r3, [r3, #24]
 8005b1c:	18d1      	adds	r1, r2, r3
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b24:	f7ff ff5c 	bl	80059e0 <prvInsertTimerInActiveList>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d06c      	beq.n	8005c08 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b34:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d061      	beq.n	8005c08 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	441a      	add	r2, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	2300      	movs	r3, #0
 8005b52:	2100      	movs	r1, #0
 8005b54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b56:	f7ff fe03 	bl	8005760 <xTimerGenericCommand>
 8005b5a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d152      	bne.n	8005c08 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	61bb      	str	r3, [r7, #24]
}
 8005b74:	bf00      	nop
 8005b76:	bf00      	nop
 8005b78:	e7fd      	b.n	8005b76 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b80:	f023 0301 	bic.w	r3, r3, #1
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b88:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005b8c:	e03d      	b.n	8005c0a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b94:	f043 0301 	orr.w	r3, r3, #1
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ba0:	68ba      	ldr	r2, [r7, #8]
 8005ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10b      	bne.n	8005bc6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	617b      	str	r3, [r7, #20]
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	e7fd      	b.n	8005bc2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	18d1      	adds	r1, r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bd4:	f7ff ff04 	bl	80059e0 <prvInsertTimerInActiveList>
					break;
 8005bd8:	e017      	b.n	8005c0a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005be0:	f003 0302 	and.w	r3, r3, #2
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d103      	bne.n	8005bf0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005be8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bea:	f000 fb87 	bl	80062fc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005bee:	e00c      	b.n	8005c0a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bf6:	f023 0301 	bic.w	r3, r3, #1
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005c02:	e002      	b.n	8005c0a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005c04:	bf00      	nop
 8005c06:	e000      	b.n	8005c0a <prvProcessReceivedCommands+0x1a6>
					break;
 8005c08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c0a:	4b08      	ldr	r3, [pc, #32]	@ (8005c2c <prvProcessReceivedCommands+0x1c8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	1d39      	adds	r1, r7, #4
 8005c10:	2200      	movs	r2, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fe f8de 	bl	8003dd4 <xQueueReceive>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f47f af26 	bne.w	8005a6c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005c20:	bf00      	nop
 8005c22:	bf00      	nop
 8005c24:	3730      	adds	r7, #48	@ 0x30
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000e18 	.word	0x20000e18

08005c30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b088      	sub	sp, #32
 8005c34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c36:	e049      	b.n	8005ccc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c38:	4b2e      	ldr	r3, [pc, #184]	@ (8005cf4 <prvSwitchTimerLists+0xc4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c42:	4b2c      	ldr	r3, [pc, #176]	@ (8005cf4 <prvSwitchTimerLists+0xc4>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7fd fcb1 	bl	80035b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c64:	f003 0304 	and.w	r3, r3, #4
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d02f      	beq.n	8005ccc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	699b      	ldr	r3, [r3, #24]
 8005c70:	693a      	ldr	r2, [r7, #16]
 8005c72:	4413      	add	r3, r2
 8005c74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d90e      	bls.n	8005c9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005cf4 <prvSwitchTimerLists+0xc4>)
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4619      	mov	r1, r3
 8005c94:	4610      	mov	r0, r2
 8005c96:	f7fd fc57 	bl	8003548 <vListInsert>
 8005c9a:	e017      	b.n	8005ccc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	2100      	movs	r1, #0
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f7ff fd5a 	bl	8005760 <xTimerGenericCommand>
 8005cac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10b      	bne.n	8005ccc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	603b      	str	r3, [r7, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	bf00      	nop
 8005cca:	e7fd      	b.n	8005cc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ccc:	4b09      	ldr	r3, [pc, #36]	@ (8005cf4 <prvSwitchTimerLists+0xc4>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1b0      	bne.n	8005c38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005cd6:	4b07      	ldr	r3, [pc, #28]	@ (8005cf4 <prvSwitchTimerLists+0xc4>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005cdc:	4b06      	ldr	r3, [pc, #24]	@ (8005cf8 <prvSwitchTimerLists+0xc8>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a04      	ldr	r2, [pc, #16]	@ (8005cf4 <prvSwitchTimerLists+0xc4>)
 8005ce2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005ce4:	4a04      	ldr	r2, [pc, #16]	@ (8005cf8 <prvSwitchTimerLists+0xc8>)
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	6013      	str	r3, [r2, #0]
}
 8005cea:	bf00      	nop
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	20000e10 	.word	0x20000e10
 8005cf8:	20000e14 	.word	0x20000e14

08005cfc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005d02:	f000 f92b 	bl	8005f5c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005d06:	4b15      	ldr	r3, [pc, #84]	@ (8005d5c <prvCheckForValidListAndQueue+0x60>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d120      	bne.n	8005d50 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005d0e:	4814      	ldr	r0, [pc, #80]	@ (8005d60 <prvCheckForValidListAndQueue+0x64>)
 8005d10:	f7fd fbcc 	bl	80034ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005d14:	4813      	ldr	r0, [pc, #76]	@ (8005d64 <prvCheckForValidListAndQueue+0x68>)
 8005d16:	f7fd fbc9 	bl	80034ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005d1a:	4b13      	ldr	r3, [pc, #76]	@ (8005d68 <prvCheckForValidListAndQueue+0x6c>)
 8005d1c:	4a10      	ldr	r2, [pc, #64]	@ (8005d60 <prvCheckForValidListAndQueue+0x64>)
 8005d1e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005d20:	4b12      	ldr	r3, [pc, #72]	@ (8005d6c <prvCheckForValidListAndQueue+0x70>)
 8005d22:	4a10      	ldr	r2, [pc, #64]	@ (8005d64 <prvCheckForValidListAndQueue+0x68>)
 8005d24:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005d26:	2300      	movs	r3, #0
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	4b11      	ldr	r3, [pc, #68]	@ (8005d70 <prvCheckForValidListAndQueue+0x74>)
 8005d2c:	4a11      	ldr	r2, [pc, #68]	@ (8005d74 <prvCheckForValidListAndQueue+0x78>)
 8005d2e:	2110      	movs	r1, #16
 8005d30:	200a      	movs	r0, #10
 8005d32:	f7fd fcd5 	bl	80036e0 <xQueueGenericCreateStatic>
 8005d36:	4603      	mov	r3, r0
 8005d38:	4a08      	ldr	r2, [pc, #32]	@ (8005d5c <prvCheckForValidListAndQueue+0x60>)
 8005d3a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005d3c:	4b07      	ldr	r3, [pc, #28]	@ (8005d5c <prvCheckForValidListAndQueue+0x60>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d005      	beq.n	8005d50 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d44:	4b05      	ldr	r3, [pc, #20]	@ (8005d5c <prvCheckForValidListAndQueue+0x60>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	490b      	ldr	r1, [pc, #44]	@ (8005d78 <prvCheckForValidListAndQueue+0x7c>)
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7fe fc02 	bl	8004554 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d50:	f000 f934 	bl	8005fbc <vPortExitCritical>
}
 8005d54:	bf00      	nop
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000e18 	.word	0x20000e18
 8005d60:	20000de8 	.word	0x20000de8
 8005d64:	20000dfc 	.word	0x20000dfc
 8005d68:	20000e10 	.word	0x20000e10
 8005d6c:	20000e14 	.word	0x20000e14
 8005d70:	20000ec4 	.word	0x20000ec4
 8005d74:	20000e24 	.word	0x20000e24
 8005d78:	08006fcc 	.word	0x08006fcc

08005d7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	3b04      	subs	r3, #4
 8005d8c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f023 0201 	bic.w	r2, r3, #1
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3b04      	subs	r3, #4
 8005daa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005dac:	4a08      	ldr	r2, [pc, #32]	@ (8005dd0 <pxPortInitialiseStack+0x54>)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3b14      	subs	r3, #20
 8005db6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3b20      	subs	r3, #32
 8005dc2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bc80      	pop	{r7}
 8005dce:	4770      	bx	lr
 8005dd0:	08005dd5 	.word	0x08005dd5

08005dd4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005dde:	4b12      	ldr	r3, [pc, #72]	@ (8005e28 <prvTaskExitError+0x54>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de6:	d00b      	beq.n	8005e00 <prvTaskExitError+0x2c>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	60fb      	str	r3, [r7, #12]
}
 8005dfa:	bf00      	nop
 8005dfc:	bf00      	nop
 8005dfe:	e7fd      	b.n	8005dfc <prvTaskExitError+0x28>
	__asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	60bb      	str	r3, [r7, #8]
}
 8005e12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e14:	bf00      	nop
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0fc      	beq.n	8005e16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	3714      	adds	r7, #20
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bc80      	pop	{r7}
 8005e26:	4770      	bx	lr
 8005e28:	2000000c 	.word	0x2000000c
 8005e2c:	00000000 	.word	0x00000000

08005e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005e30:	4b07      	ldr	r3, [pc, #28]	@ (8005e50 <pxCurrentTCBConst2>)
 8005e32:	6819      	ldr	r1, [r3, #0]
 8005e34:	6808      	ldr	r0, [r1, #0]
 8005e36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005e3a:	f380 8809 	msr	PSP, r0
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f380 8811 	msr	BASEPRI, r0
 8005e4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005e4e:	4770      	bx	lr

08005e50 <pxCurrentTCBConst2>:
 8005e50:	200008e8 	.word	0x200008e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop

08005e58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005e58:	4806      	ldr	r0, [pc, #24]	@ (8005e74 <prvPortStartFirstTask+0x1c>)
 8005e5a:	6800      	ldr	r0, [r0, #0]
 8005e5c:	6800      	ldr	r0, [r0, #0]
 8005e5e:	f380 8808 	msr	MSP, r0
 8005e62:	b662      	cpsie	i
 8005e64:	b661      	cpsie	f
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	df00      	svc	0
 8005e70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005e72:	bf00      	nop
 8005e74:	e000ed08 	.word	0xe000ed08

08005e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005e7e:	4b32      	ldr	r3, [pc, #200]	@ (8005f48 <xPortStartScheduler+0xd0>)
 8005e80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	22ff      	movs	r2, #255	@ 0xff
 8005e8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005e98:	78fb      	ldrb	r3, [r7, #3]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005ea0:	b2da      	uxtb	r2, r3
 8005ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8005f4c <xPortStartScheduler+0xd4>)
 8005ea4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f50 <xPortStartScheduler+0xd8>)
 8005ea8:	2207      	movs	r2, #7
 8005eaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005eac:	e009      	b.n	8005ec2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005eae:	4b28      	ldr	r3, [pc, #160]	@ (8005f50 <xPortStartScheduler+0xd8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	4a26      	ldr	r2, [pc, #152]	@ (8005f50 <xPortStartScheduler+0xd8>)
 8005eb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	005b      	lsls	r3, r3, #1
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eca:	2b80      	cmp	r3, #128	@ 0x80
 8005ecc:	d0ef      	beq.n	8005eae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005ece:	4b20      	ldr	r3, [pc, #128]	@ (8005f50 <xPortStartScheduler+0xd8>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f1c3 0307 	rsb	r3, r3, #7
 8005ed6:	2b04      	cmp	r3, #4
 8005ed8:	d00b      	beq.n	8005ef2 <xPortStartScheduler+0x7a>
	__asm volatile
 8005eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	60bb      	str	r3, [r7, #8]
}
 8005eec:	bf00      	nop
 8005eee:	bf00      	nop
 8005ef0:	e7fd      	b.n	8005eee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ef2:	4b17      	ldr	r3, [pc, #92]	@ (8005f50 <xPortStartScheduler+0xd8>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	4a15      	ldr	r2, [pc, #84]	@ (8005f50 <xPortStartScheduler+0xd8>)
 8005efa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005efc:	4b14      	ldr	r3, [pc, #80]	@ (8005f50 <xPortStartScheduler+0xd8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f04:	4a12      	ldr	r2, [pc, #72]	@ (8005f50 <xPortStartScheduler+0xd8>)
 8005f06:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f10:	4b10      	ldr	r3, [pc, #64]	@ (8005f54 <xPortStartScheduler+0xdc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a0f      	ldr	r2, [pc, #60]	@ (8005f54 <xPortStartScheduler+0xdc>)
 8005f16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f1a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005f54 <xPortStartScheduler+0xdc>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a0c      	ldr	r2, [pc, #48]	@ (8005f54 <xPortStartScheduler+0xdc>)
 8005f22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005f26:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005f28:	f000 f8b8 	bl	800609c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f58 <xPortStartScheduler+0xe0>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005f32:	f7ff ff91 	bl	8005e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005f36:	f7fe ff6b 	bl	8004e10 <vTaskSwitchContext>
	prvTaskExitError();
 8005f3a:	f7ff ff4b 	bl	8005dd4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	e000e400 	.word	0xe000e400
 8005f4c:	20000f14 	.word	0x20000f14
 8005f50:	20000f18 	.word	0x20000f18
 8005f54:	e000ed20 	.word	0xe000ed20
 8005f58:	2000000c 	.word	0x2000000c

08005f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	607b      	str	r3, [r7, #4]
}
 8005f74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005f76:	4b0f      	ldr	r3, [pc, #60]	@ (8005fb4 <vPortEnterCritical+0x58>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8005fb4 <vPortEnterCritical+0x58>)
 8005f7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005f80:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb4 <vPortEnterCritical+0x58>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d110      	bne.n	8005faa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005f88:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb8 <vPortEnterCritical+0x5c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00b      	beq.n	8005faa <vPortEnterCritical+0x4e>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	603b      	str	r3, [r7, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	e7fd      	b.n	8005fa6 <vPortEnterCritical+0x4a>
	}
}
 8005faa:	bf00      	nop
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bc80      	pop	{r7}
 8005fb2:	4770      	bx	lr
 8005fb4:	2000000c 	.word	0x2000000c
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005fc2:	4b12      	ldr	r3, [pc, #72]	@ (800600c <vPortExitCritical+0x50>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10b      	bne.n	8005fe2 <vPortExitCritical+0x26>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	607b      	str	r3, [r7, #4]
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	e7fd      	b.n	8005fde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005fe2:	4b0a      	ldr	r3, [pc, #40]	@ (800600c <vPortExitCritical+0x50>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	4a08      	ldr	r2, [pc, #32]	@ (800600c <vPortExitCritical+0x50>)
 8005fea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005fec:	4b07      	ldr	r3, [pc, #28]	@ (800600c <vPortExitCritical+0x50>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d105      	bne.n	8006000 <vPortExitCritical+0x44>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	f383 8811 	msr	BASEPRI, r3
}
 8005ffe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	bc80      	pop	{r7}
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	2000000c 	.word	0x2000000c

08006010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006010:	f3ef 8009 	mrs	r0, PSP
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <pxCurrentTCBConst>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006020:	6010      	str	r0, [r2, #0]
 8006022:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006026:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800602a:	f380 8811 	msr	BASEPRI, r0
 800602e:	f7fe feef 	bl	8004e10 <vTaskSwitchContext>
 8006032:	f04f 0000 	mov.w	r0, #0
 8006036:	f380 8811 	msr	BASEPRI, r0
 800603a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800603e:	6819      	ldr	r1, [r3, #0]
 8006040:	6808      	ldr	r0, [r1, #0]
 8006042:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006046:	f380 8809 	msr	PSP, r0
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	4770      	bx	lr

08006050 <pxCurrentTCBConst>:
 8006050:	200008e8 	.word	0x200008e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006054:	bf00      	nop
 8006056:	bf00      	nop

08006058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b082      	sub	sp, #8
 800605c:	af00      	add	r7, sp, #0
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	607b      	str	r3, [r7, #4]
}
 8006070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006072:	f7fe fe13 	bl	8004c9c <xTaskIncrementTick>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800607c:	4b06      	ldr	r3, [pc, #24]	@ (8006098 <xPortSysTickHandler+0x40>)
 800607e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	2300      	movs	r3, #0
 8006086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	f383 8811 	msr	BASEPRI, r3
}
 800608e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006090:	bf00      	nop
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	e000ed04 	.word	0xe000ed04

0800609c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80060a0:	4b0a      	ldr	r3, [pc, #40]	@ (80060cc <vPortSetupTimerInterrupt+0x30>)
 80060a2:	2200      	movs	r2, #0
 80060a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80060a6:	4b0a      	ldr	r3, [pc, #40]	@ (80060d0 <vPortSetupTimerInterrupt+0x34>)
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80060ac:	4b09      	ldr	r3, [pc, #36]	@ (80060d4 <vPortSetupTimerInterrupt+0x38>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a09      	ldr	r2, [pc, #36]	@ (80060d8 <vPortSetupTimerInterrupt+0x3c>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	099b      	lsrs	r3, r3, #6
 80060b8:	4a08      	ldr	r2, [pc, #32]	@ (80060dc <vPortSetupTimerInterrupt+0x40>)
 80060ba:	3b01      	subs	r3, #1
 80060bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80060be:	4b03      	ldr	r3, [pc, #12]	@ (80060cc <vPortSetupTimerInterrupt+0x30>)
 80060c0:	2207      	movs	r2, #7
 80060c2:	601a      	str	r2, [r3, #0]
}
 80060c4:	bf00      	nop
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bc80      	pop	{r7}
 80060ca:	4770      	bx	lr
 80060cc:	e000e010 	.word	0xe000e010
 80060d0:	e000e018 	.word	0xe000e018
 80060d4:	20000000 	.word	0x20000000
 80060d8:	10624dd3 	.word	0x10624dd3
 80060dc:	e000e014 	.word	0xe000e014

080060e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80060e6:	f3ef 8305 	mrs	r3, IPSR
 80060ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b0f      	cmp	r3, #15
 80060f0:	d915      	bls.n	800611e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80060f2:	4a17      	ldr	r2, [pc, #92]	@ (8006150 <vPortValidateInterruptPriority+0x70>)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	4413      	add	r3, r2
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80060fc:	4b15      	ldr	r3, [pc, #84]	@ (8006154 <vPortValidateInterruptPriority+0x74>)
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	7afa      	ldrb	r2, [r7, #11]
 8006102:	429a      	cmp	r2, r3
 8006104:	d20b      	bcs.n	800611e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610a:	f383 8811 	msr	BASEPRI, r3
 800610e:	f3bf 8f6f 	isb	sy
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	607b      	str	r3, [r7, #4]
}
 8006118:	bf00      	nop
 800611a:	bf00      	nop
 800611c:	e7fd      	b.n	800611a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800611e:	4b0e      	ldr	r3, [pc, #56]	@ (8006158 <vPortValidateInterruptPriority+0x78>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006126:	4b0d      	ldr	r3, [pc, #52]	@ (800615c <vPortValidateInterruptPriority+0x7c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d90b      	bls.n	8006146 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	603b      	str	r3, [r7, #0]
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop
 8006144:	e7fd      	b.n	8006142 <vPortValidateInterruptPriority+0x62>
	}
 8006146:	bf00      	nop
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	bc80      	pop	{r7}
 800614e:	4770      	bx	lr
 8006150:	e000e3f0 	.word	0xe000e3f0
 8006154:	20000f14 	.word	0x20000f14
 8006158:	e000ed0c 	.word	0xe000ed0c
 800615c:	20000f18 	.word	0x20000f18

08006160 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	@ 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006168:	2300      	movs	r3, #0
 800616a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800616c:	f7fe fcdc 	bl	8004b28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006170:	4b5c      	ldr	r3, [pc, #368]	@ (80062e4 <pvPortMalloc+0x184>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006178:	f000 f924 	bl	80063c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800617c:	4b5a      	ldr	r3, [pc, #360]	@ (80062e8 <pvPortMalloc+0x188>)
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	f040 8095 	bne.w	80062b4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d01e      	beq.n	80061ce <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006190:	2208      	movs	r2, #8
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	4413      	add	r3, r2
 8006196:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f003 0307 	and.w	r3, r3, #7
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d015      	beq.n	80061ce <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f023 0307 	bic.w	r3, r3, #7
 80061a8:	3308      	adds	r3, #8
 80061aa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00b      	beq.n	80061ce <pvPortMalloc+0x6e>
	__asm volatile
 80061b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	617b      	str	r3, [r7, #20]
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop
 80061cc:	e7fd      	b.n	80061ca <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d06f      	beq.n	80062b4 <pvPortMalloc+0x154>
 80061d4:	4b45      	ldr	r3, [pc, #276]	@ (80062ec <pvPortMalloc+0x18c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d86a      	bhi.n	80062b4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80061de:	4b44      	ldr	r3, [pc, #272]	@ (80062f0 <pvPortMalloc+0x190>)
 80061e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80061e2:	4b43      	ldr	r3, [pc, #268]	@ (80062f0 <pvPortMalloc+0x190>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061e8:	e004      	b.n	80061f4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80061ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d903      	bls.n	8006206 <pvPortMalloc+0xa6>
 80061fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f1      	bne.n	80061ea <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006206:	4b37      	ldr	r3, [pc, #220]	@ (80062e4 <pvPortMalloc+0x184>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800620c:	429a      	cmp	r2, r3
 800620e:	d051      	beq.n	80062b4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2208      	movs	r2, #8
 8006216:	4413      	add	r3, r2
 8006218:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	1ad2      	subs	r2, r2, r3
 800622a:	2308      	movs	r3, #8
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	429a      	cmp	r2, r3
 8006230:	d920      	bls.n	8006274 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4413      	add	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	f003 0307 	and.w	r3, r3, #7
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00b      	beq.n	800625c <pvPortMalloc+0xfc>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	613b      	str	r3, [r7, #16]
}
 8006256:	bf00      	nop
 8006258:	bf00      	nop
 800625a:	e7fd      	b.n	8006258 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800625c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625e:	685a      	ldr	r2, [r3, #4]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	1ad2      	subs	r2, r2, r3
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800626e:	69b8      	ldr	r0, [r7, #24]
 8006270:	f000 f90a 	bl	8006488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006274:	4b1d      	ldr	r3, [pc, #116]	@ (80062ec <pvPortMalloc+0x18c>)
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	4a1b      	ldr	r2, [pc, #108]	@ (80062ec <pvPortMalloc+0x18c>)
 8006280:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006282:	4b1a      	ldr	r3, [pc, #104]	@ (80062ec <pvPortMalloc+0x18c>)
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4b1b      	ldr	r3, [pc, #108]	@ (80062f4 <pvPortMalloc+0x194>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	429a      	cmp	r2, r3
 800628c:	d203      	bcs.n	8006296 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800628e:	4b17      	ldr	r3, [pc, #92]	@ (80062ec <pvPortMalloc+0x18c>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a18      	ldr	r2, [pc, #96]	@ (80062f4 <pvPortMalloc+0x194>)
 8006294:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	4b13      	ldr	r3, [pc, #76]	@ (80062e8 <pvPortMalloc+0x188>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	431a      	orrs	r2, r3
 80062a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a6:	2200      	movs	r2, #0
 80062a8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80062aa:	4b13      	ldr	r3, [pc, #76]	@ (80062f8 <pvPortMalloc+0x198>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	3301      	adds	r3, #1
 80062b0:	4a11      	ldr	r2, [pc, #68]	@ (80062f8 <pvPortMalloc+0x198>)
 80062b2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80062b4:	f7fe fc46 	bl	8004b44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f003 0307 	and.w	r3, r3, #7
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00b      	beq.n	80062da <pvPortMalloc+0x17a>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	60fb      	str	r3, [r7, #12]
}
 80062d4:	bf00      	nop
 80062d6:	bf00      	nop
 80062d8:	e7fd      	b.n	80062d6 <pvPortMalloc+0x176>
	return pvReturn;
 80062da:	69fb      	ldr	r3, [r7, #28]
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3728      	adds	r7, #40	@ 0x28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20001b24 	.word	0x20001b24
 80062e8:	20001b38 	.word	0x20001b38
 80062ec:	20001b28 	.word	0x20001b28
 80062f0:	20001b1c 	.word	0x20001b1c
 80062f4:	20001b2c 	.word	0x20001b2c
 80062f8:	20001b30 	.word	0x20001b30

080062fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b086      	sub	sp, #24
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d04f      	beq.n	80063ae <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800630e:	2308      	movs	r3, #8
 8006310:	425b      	negs	r3, r3
 8006312:	697a      	ldr	r2, [r7, #20]
 8006314:	4413      	add	r3, r2
 8006316:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	685a      	ldr	r2, [r3, #4]
 8006320:	4b25      	ldr	r3, [pc, #148]	@ (80063b8 <vPortFree+0xbc>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4013      	ands	r3, r2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <vPortFree+0x46>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	60fb      	str	r3, [r7, #12]
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00b      	beq.n	8006362 <vPortFree+0x66>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634e:	f383 8811 	msr	BASEPRI, r3
 8006352:	f3bf 8f6f 	isb	sy
 8006356:	f3bf 8f4f 	dsb	sy
 800635a:	60bb      	str	r3, [r7, #8]
}
 800635c:	bf00      	nop
 800635e:	bf00      	nop
 8006360:	e7fd      	b.n	800635e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	4b14      	ldr	r3, [pc, #80]	@ (80063b8 <vPortFree+0xbc>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4013      	ands	r3, r2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d01e      	beq.n	80063ae <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d11a      	bne.n	80063ae <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	4b0e      	ldr	r3, [pc, #56]	@ (80063b8 <vPortFree+0xbc>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	43db      	mvns	r3, r3
 8006382:	401a      	ands	r2, r3
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006388:	f7fe fbce 	bl	8004b28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	685a      	ldr	r2, [r3, #4]
 8006390:	4b0a      	ldr	r3, [pc, #40]	@ (80063bc <vPortFree+0xc0>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4413      	add	r3, r2
 8006396:	4a09      	ldr	r2, [pc, #36]	@ (80063bc <vPortFree+0xc0>)
 8006398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800639a:	6938      	ldr	r0, [r7, #16]
 800639c:	f000 f874 	bl	8006488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80063a0:	4b07      	ldr	r3, [pc, #28]	@ (80063c0 <vPortFree+0xc4>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	3301      	adds	r3, #1
 80063a6:	4a06      	ldr	r2, [pc, #24]	@ (80063c0 <vPortFree+0xc4>)
 80063a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80063aa:	f7fe fbcb 	bl	8004b44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80063ae:	bf00      	nop
 80063b0:	3718      	adds	r7, #24
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20001b38 	.word	0x20001b38
 80063bc:	20001b28 	.word	0x20001b28
 80063c0:	20001b34 	.word	0x20001b34

080063c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80063ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80063ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80063d0:	4b27      	ldr	r3, [pc, #156]	@ (8006470 <prvHeapInit+0xac>)
 80063d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00c      	beq.n	80063f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3307      	adds	r3, #7
 80063e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f023 0307 	bic.w	r3, r3, #7
 80063ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	4a1f      	ldr	r2, [pc, #124]	@ (8006470 <prvHeapInit+0xac>)
 80063f4:	4413      	add	r3, r2
 80063f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80063fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006474 <prvHeapInit+0xb0>)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006402:	4b1c      	ldr	r3, [pc, #112]	@ (8006474 <prvHeapInit+0xb0>)
 8006404:	2200      	movs	r2, #0
 8006406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	68ba      	ldr	r2, [r7, #8]
 800640c:	4413      	add	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006410:	2208      	movs	r2, #8
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1a9b      	subs	r3, r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0307 	bic.w	r3, r3, #7
 800641e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a15      	ldr	r2, [pc, #84]	@ (8006478 <prvHeapInit+0xb4>)
 8006424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006426:	4b14      	ldr	r3, [pc, #80]	@ (8006478 <prvHeapInit+0xb4>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2200      	movs	r2, #0
 800642c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800642e:	4b12      	ldr	r3, [pc, #72]	@ (8006478 <prvHeapInit+0xb4>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	1ad2      	subs	r2, r2, r3
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006444:	4b0c      	ldr	r3, [pc, #48]	@ (8006478 <prvHeapInit+0xb4>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4a0a      	ldr	r2, [pc, #40]	@ (800647c <prvHeapInit+0xb8>)
 8006452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	4a09      	ldr	r2, [pc, #36]	@ (8006480 <prvHeapInit+0xbc>)
 800645a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800645c:	4b09      	ldr	r3, [pc, #36]	@ (8006484 <prvHeapInit+0xc0>)
 800645e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006462:	601a      	str	r2, [r3, #0]
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	20000f1c 	.word	0x20000f1c
 8006474:	20001b1c 	.word	0x20001b1c
 8006478:	20001b24 	.word	0x20001b24
 800647c:	20001b2c 	.word	0x20001b2c
 8006480:	20001b28 	.word	0x20001b28
 8006484:	20001b38 	.word	0x20001b38

08006488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006490:	4b27      	ldr	r3, [pc, #156]	@ (8006530 <prvInsertBlockIntoFreeList+0xa8>)
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e002      	b.n	800649c <prvInsertBlockIntoFreeList+0x14>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d8f7      	bhi.n	8006496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	4413      	add	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d108      	bne.n	80064ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	441a      	add	r2, r3
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	441a      	add	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d118      	bne.n	8006510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b14      	ldr	r3, [pc, #80]	@ (8006534 <prvInsertBlockIntoFreeList+0xac>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d00d      	beq.n	8006506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685a      	ldr	r2, [r3, #4]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	441a      	add	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	601a      	str	r2, [r3, #0]
 8006504:	e008      	b.n	8006518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006506:	4b0b      	ldr	r3, [pc, #44]	@ (8006534 <prvInsertBlockIntoFreeList+0xac>)
 8006508:	681a      	ldr	r2, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	e003      	b.n	8006518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006518:	68fa      	ldr	r2, [r7, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	429a      	cmp	r2, r3
 800651e:	d002      	beq.n	8006526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006526:	bf00      	nop
 8006528:	3714      	adds	r7, #20
 800652a:	46bd      	mov	sp, r7
 800652c:	bc80      	pop	{r7}
 800652e:	4770      	bx	lr
 8006530:	20001b1c 	.word	0x20001b1c
 8006534:	20001b24 	.word	0x20001b24

08006538 <siprintf>:
 8006538:	b40e      	push	{r1, r2, r3}
 800653a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800653e:	b500      	push	{lr}
 8006540:	b09c      	sub	sp, #112	@ 0x70
 8006542:	ab1d      	add	r3, sp, #116	@ 0x74
 8006544:	9002      	str	r0, [sp, #8]
 8006546:	9006      	str	r0, [sp, #24]
 8006548:	9107      	str	r1, [sp, #28]
 800654a:	9104      	str	r1, [sp, #16]
 800654c:	4808      	ldr	r0, [pc, #32]	@ (8006570 <siprintf+0x38>)
 800654e:	4909      	ldr	r1, [pc, #36]	@ (8006574 <siprintf+0x3c>)
 8006550:	f853 2b04 	ldr.w	r2, [r3], #4
 8006554:	9105      	str	r1, [sp, #20]
 8006556:	6800      	ldr	r0, [r0, #0]
 8006558:	a902      	add	r1, sp, #8
 800655a:	9301      	str	r3, [sp, #4]
 800655c:	f000 f9f6 	bl	800694c <_svfiprintf_r>
 8006560:	2200      	movs	r2, #0
 8006562:	9b02      	ldr	r3, [sp, #8]
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	b01c      	add	sp, #112	@ 0x70
 8006568:	f85d eb04 	ldr.w	lr, [sp], #4
 800656c:	b003      	add	sp, #12
 800656e:	4770      	bx	lr
 8006570:	20000010 	.word	0x20000010
 8006574:	ffff0208 	.word	0xffff0208

08006578 <memset>:
 8006578:	4603      	mov	r3, r0
 800657a:	4402      	add	r2, r0
 800657c:	4293      	cmp	r3, r2
 800657e:	d100      	bne.n	8006582 <memset+0xa>
 8006580:	4770      	bx	lr
 8006582:	f803 1b01 	strb.w	r1, [r3], #1
 8006586:	e7f9      	b.n	800657c <memset+0x4>

08006588 <_reclaim_reent>:
 8006588:	4b29      	ldr	r3, [pc, #164]	@ (8006630 <_reclaim_reent+0xa8>)
 800658a:	b570      	push	{r4, r5, r6, lr}
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4604      	mov	r4, r0
 8006590:	4283      	cmp	r3, r0
 8006592:	d04b      	beq.n	800662c <_reclaim_reent+0xa4>
 8006594:	69c3      	ldr	r3, [r0, #28]
 8006596:	b1ab      	cbz	r3, 80065c4 <_reclaim_reent+0x3c>
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	b16b      	cbz	r3, 80065b8 <_reclaim_reent+0x30>
 800659c:	2500      	movs	r5, #0
 800659e:	69e3      	ldr	r3, [r4, #28]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	5959      	ldr	r1, [r3, r5]
 80065a4:	2900      	cmp	r1, #0
 80065a6:	d13b      	bne.n	8006620 <_reclaim_reent+0x98>
 80065a8:	3504      	adds	r5, #4
 80065aa:	2d80      	cmp	r5, #128	@ 0x80
 80065ac:	d1f7      	bne.n	800659e <_reclaim_reent+0x16>
 80065ae:	69e3      	ldr	r3, [r4, #28]
 80065b0:	4620      	mov	r0, r4
 80065b2:	68d9      	ldr	r1, [r3, #12]
 80065b4:	f000 f878 	bl	80066a8 <_free_r>
 80065b8:	69e3      	ldr	r3, [r4, #28]
 80065ba:	6819      	ldr	r1, [r3, #0]
 80065bc:	b111      	cbz	r1, 80065c4 <_reclaim_reent+0x3c>
 80065be:	4620      	mov	r0, r4
 80065c0:	f000 f872 	bl	80066a8 <_free_r>
 80065c4:	6961      	ldr	r1, [r4, #20]
 80065c6:	b111      	cbz	r1, 80065ce <_reclaim_reent+0x46>
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 f86d 	bl	80066a8 <_free_r>
 80065ce:	69e1      	ldr	r1, [r4, #28]
 80065d0:	b111      	cbz	r1, 80065d8 <_reclaim_reent+0x50>
 80065d2:	4620      	mov	r0, r4
 80065d4:	f000 f868 	bl	80066a8 <_free_r>
 80065d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80065da:	b111      	cbz	r1, 80065e2 <_reclaim_reent+0x5a>
 80065dc:	4620      	mov	r0, r4
 80065de:	f000 f863 	bl	80066a8 <_free_r>
 80065e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80065e4:	b111      	cbz	r1, 80065ec <_reclaim_reent+0x64>
 80065e6:	4620      	mov	r0, r4
 80065e8:	f000 f85e 	bl	80066a8 <_free_r>
 80065ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80065ee:	b111      	cbz	r1, 80065f6 <_reclaim_reent+0x6e>
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 f859 	bl	80066a8 <_free_r>
 80065f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80065f8:	b111      	cbz	r1, 8006600 <_reclaim_reent+0x78>
 80065fa:	4620      	mov	r0, r4
 80065fc:	f000 f854 	bl	80066a8 <_free_r>
 8006600:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006602:	b111      	cbz	r1, 800660a <_reclaim_reent+0x82>
 8006604:	4620      	mov	r0, r4
 8006606:	f000 f84f 	bl	80066a8 <_free_r>
 800660a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800660c:	b111      	cbz	r1, 8006614 <_reclaim_reent+0x8c>
 800660e:	4620      	mov	r0, r4
 8006610:	f000 f84a 	bl	80066a8 <_free_r>
 8006614:	6a23      	ldr	r3, [r4, #32]
 8006616:	b14b      	cbz	r3, 800662c <_reclaim_reent+0xa4>
 8006618:	4620      	mov	r0, r4
 800661a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800661e:	4718      	bx	r3
 8006620:	680e      	ldr	r6, [r1, #0]
 8006622:	4620      	mov	r0, r4
 8006624:	f000 f840 	bl	80066a8 <_free_r>
 8006628:	4631      	mov	r1, r6
 800662a:	e7bb      	b.n	80065a4 <_reclaim_reent+0x1c>
 800662c:	bd70      	pop	{r4, r5, r6, pc}
 800662e:	bf00      	nop
 8006630:	20000010 	.word	0x20000010

08006634 <__errno>:
 8006634:	4b01      	ldr	r3, [pc, #4]	@ (800663c <__errno+0x8>)
 8006636:	6818      	ldr	r0, [r3, #0]
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop
 800663c:	20000010 	.word	0x20000010

08006640 <__libc_init_array>:
 8006640:	b570      	push	{r4, r5, r6, lr}
 8006642:	2600      	movs	r6, #0
 8006644:	4d0c      	ldr	r5, [pc, #48]	@ (8006678 <__libc_init_array+0x38>)
 8006646:	4c0d      	ldr	r4, [pc, #52]	@ (800667c <__libc_init_array+0x3c>)
 8006648:	1b64      	subs	r4, r4, r5
 800664a:	10a4      	asrs	r4, r4, #2
 800664c:	42a6      	cmp	r6, r4
 800664e:	d109      	bne.n	8006664 <__libc_init_array+0x24>
 8006650:	f000 fc78 	bl	8006f44 <_init>
 8006654:	2600      	movs	r6, #0
 8006656:	4d0a      	ldr	r5, [pc, #40]	@ (8006680 <__libc_init_array+0x40>)
 8006658:	4c0a      	ldr	r4, [pc, #40]	@ (8006684 <__libc_init_array+0x44>)
 800665a:	1b64      	subs	r4, r4, r5
 800665c:	10a4      	asrs	r4, r4, #2
 800665e:	42a6      	cmp	r6, r4
 8006660:	d105      	bne.n	800666e <__libc_init_array+0x2e>
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	f855 3b04 	ldr.w	r3, [r5], #4
 8006668:	4798      	blx	r3
 800666a:	3601      	adds	r6, #1
 800666c:	e7ee      	b.n	800664c <__libc_init_array+0xc>
 800666e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006672:	4798      	blx	r3
 8006674:	3601      	adds	r6, #1
 8006676:	e7f2      	b.n	800665e <__libc_init_array+0x1e>
 8006678:	080070b8 	.word	0x080070b8
 800667c:	080070b8 	.word	0x080070b8
 8006680:	080070b8 	.word	0x080070b8
 8006684:	080070bc 	.word	0x080070bc

08006688 <__retarget_lock_acquire_recursive>:
 8006688:	4770      	bx	lr

0800668a <__retarget_lock_release_recursive>:
 800668a:	4770      	bx	lr

0800668c <memcpy>:
 800668c:	440a      	add	r2, r1
 800668e:	4291      	cmp	r1, r2
 8006690:	f100 33ff 	add.w	r3, r0, #4294967295
 8006694:	d100      	bne.n	8006698 <memcpy+0xc>
 8006696:	4770      	bx	lr
 8006698:	b510      	push	{r4, lr}
 800669a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800669e:	4291      	cmp	r1, r2
 80066a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066a4:	d1f9      	bne.n	800669a <memcpy+0xe>
 80066a6:	bd10      	pop	{r4, pc}

080066a8 <_free_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4605      	mov	r5, r0
 80066ac:	2900      	cmp	r1, #0
 80066ae:	d040      	beq.n	8006732 <_free_r+0x8a>
 80066b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066b4:	1f0c      	subs	r4, r1, #4
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bfb8      	it	lt
 80066ba:	18e4      	addlt	r4, r4, r3
 80066bc:	f000 f8de 	bl	800687c <__malloc_lock>
 80066c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006734 <_free_r+0x8c>)
 80066c2:	6813      	ldr	r3, [r2, #0]
 80066c4:	b933      	cbnz	r3, 80066d4 <_free_r+0x2c>
 80066c6:	6063      	str	r3, [r4, #4]
 80066c8:	6014      	str	r4, [r2, #0]
 80066ca:	4628      	mov	r0, r5
 80066cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066d0:	f000 b8da 	b.w	8006888 <__malloc_unlock>
 80066d4:	42a3      	cmp	r3, r4
 80066d6:	d908      	bls.n	80066ea <_free_r+0x42>
 80066d8:	6820      	ldr	r0, [r4, #0]
 80066da:	1821      	adds	r1, r4, r0
 80066dc:	428b      	cmp	r3, r1
 80066de:	bf01      	itttt	eq
 80066e0:	6819      	ldreq	r1, [r3, #0]
 80066e2:	685b      	ldreq	r3, [r3, #4]
 80066e4:	1809      	addeq	r1, r1, r0
 80066e6:	6021      	streq	r1, [r4, #0]
 80066e8:	e7ed      	b.n	80066c6 <_free_r+0x1e>
 80066ea:	461a      	mov	r2, r3
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	b10b      	cbz	r3, 80066f4 <_free_r+0x4c>
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	d9fa      	bls.n	80066ea <_free_r+0x42>
 80066f4:	6811      	ldr	r1, [r2, #0]
 80066f6:	1850      	adds	r0, r2, r1
 80066f8:	42a0      	cmp	r0, r4
 80066fa:	d10b      	bne.n	8006714 <_free_r+0x6c>
 80066fc:	6820      	ldr	r0, [r4, #0]
 80066fe:	4401      	add	r1, r0
 8006700:	1850      	adds	r0, r2, r1
 8006702:	4283      	cmp	r3, r0
 8006704:	6011      	str	r1, [r2, #0]
 8006706:	d1e0      	bne.n	80066ca <_free_r+0x22>
 8006708:	6818      	ldr	r0, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4408      	add	r0, r1
 800670e:	6010      	str	r0, [r2, #0]
 8006710:	6053      	str	r3, [r2, #4]
 8006712:	e7da      	b.n	80066ca <_free_r+0x22>
 8006714:	d902      	bls.n	800671c <_free_r+0x74>
 8006716:	230c      	movs	r3, #12
 8006718:	602b      	str	r3, [r5, #0]
 800671a:	e7d6      	b.n	80066ca <_free_r+0x22>
 800671c:	6820      	ldr	r0, [r4, #0]
 800671e:	1821      	adds	r1, r4, r0
 8006720:	428b      	cmp	r3, r1
 8006722:	bf01      	itttt	eq
 8006724:	6819      	ldreq	r1, [r3, #0]
 8006726:	685b      	ldreq	r3, [r3, #4]
 8006728:	1809      	addeq	r1, r1, r0
 800672a:	6021      	streq	r1, [r4, #0]
 800672c:	6063      	str	r3, [r4, #4]
 800672e:	6054      	str	r4, [r2, #4]
 8006730:	e7cb      	b.n	80066ca <_free_r+0x22>
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	20001c80 	.word	0x20001c80

08006738 <sbrk_aligned>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	4e0f      	ldr	r6, [pc, #60]	@ (8006778 <sbrk_aligned+0x40>)
 800673c:	460c      	mov	r4, r1
 800673e:	6831      	ldr	r1, [r6, #0]
 8006740:	4605      	mov	r5, r0
 8006742:	b911      	cbnz	r1, 800674a <sbrk_aligned+0x12>
 8006744:	f000 fbaa 	bl	8006e9c <_sbrk_r>
 8006748:	6030      	str	r0, [r6, #0]
 800674a:	4621      	mov	r1, r4
 800674c:	4628      	mov	r0, r5
 800674e:	f000 fba5 	bl	8006e9c <_sbrk_r>
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	d103      	bne.n	800675e <sbrk_aligned+0x26>
 8006756:	f04f 34ff 	mov.w	r4, #4294967295
 800675a:	4620      	mov	r0, r4
 800675c:	bd70      	pop	{r4, r5, r6, pc}
 800675e:	1cc4      	adds	r4, r0, #3
 8006760:	f024 0403 	bic.w	r4, r4, #3
 8006764:	42a0      	cmp	r0, r4
 8006766:	d0f8      	beq.n	800675a <sbrk_aligned+0x22>
 8006768:	1a21      	subs	r1, r4, r0
 800676a:	4628      	mov	r0, r5
 800676c:	f000 fb96 	bl	8006e9c <_sbrk_r>
 8006770:	3001      	adds	r0, #1
 8006772:	d1f2      	bne.n	800675a <sbrk_aligned+0x22>
 8006774:	e7ef      	b.n	8006756 <sbrk_aligned+0x1e>
 8006776:	bf00      	nop
 8006778:	20001c7c 	.word	0x20001c7c

0800677c <_malloc_r>:
 800677c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006780:	1ccd      	adds	r5, r1, #3
 8006782:	f025 0503 	bic.w	r5, r5, #3
 8006786:	3508      	adds	r5, #8
 8006788:	2d0c      	cmp	r5, #12
 800678a:	bf38      	it	cc
 800678c:	250c      	movcc	r5, #12
 800678e:	2d00      	cmp	r5, #0
 8006790:	4606      	mov	r6, r0
 8006792:	db01      	blt.n	8006798 <_malloc_r+0x1c>
 8006794:	42a9      	cmp	r1, r5
 8006796:	d904      	bls.n	80067a2 <_malloc_r+0x26>
 8006798:	230c      	movs	r3, #12
 800679a:	6033      	str	r3, [r6, #0]
 800679c:	2000      	movs	r0, #0
 800679e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006878 <_malloc_r+0xfc>
 80067a6:	f000 f869 	bl	800687c <__malloc_lock>
 80067aa:	f8d8 3000 	ldr.w	r3, [r8]
 80067ae:	461c      	mov	r4, r3
 80067b0:	bb44      	cbnz	r4, 8006804 <_malloc_r+0x88>
 80067b2:	4629      	mov	r1, r5
 80067b4:	4630      	mov	r0, r6
 80067b6:	f7ff ffbf 	bl	8006738 <sbrk_aligned>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	4604      	mov	r4, r0
 80067be:	d158      	bne.n	8006872 <_malloc_r+0xf6>
 80067c0:	f8d8 4000 	ldr.w	r4, [r8]
 80067c4:	4627      	mov	r7, r4
 80067c6:	2f00      	cmp	r7, #0
 80067c8:	d143      	bne.n	8006852 <_malloc_r+0xd6>
 80067ca:	2c00      	cmp	r4, #0
 80067cc:	d04b      	beq.n	8006866 <_malloc_r+0xea>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	4639      	mov	r1, r7
 80067d2:	4630      	mov	r0, r6
 80067d4:	eb04 0903 	add.w	r9, r4, r3
 80067d8:	f000 fb60 	bl	8006e9c <_sbrk_r>
 80067dc:	4581      	cmp	r9, r0
 80067de:	d142      	bne.n	8006866 <_malloc_r+0xea>
 80067e0:	6821      	ldr	r1, [r4, #0]
 80067e2:	4630      	mov	r0, r6
 80067e4:	1a6d      	subs	r5, r5, r1
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7ff ffa6 	bl	8006738 <sbrk_aligned>
 80067ec:	3001      	adds	r0, #1
 80067ee:	d03a      	beq.n	8006866 <_malloc_r+0xea>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	442b      	add	r3, r5
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	f8d8 3000 	ldr.w	r3, [r8]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	bb62      	cbnz	r2, 8006858 <_malloc_r+0xdc>
 80067fe:	f8c8 7000 	str.w	r7, [r8]
 8006802:	e00f      	b.n	8006824 <_malloc_r+0xa8>
 8006804:	6822      	ldr	r2, [r4, #0]
 8006806:	1b52      	subs	r2, r2, r5
 8006808:	d420      	bmi.n	800684c <_malloc_r+0xd0>
 800680a:	2a0b      	cmp	r2, #11
 800680c:	d917      	bls.n	800683e <_malloc_r+0xc2>
 800680e:	1961      	adds	r1, r4, r5
 8006810:	42a3      	cmp	r3, r4
 8006812:	6025      	str	r5, [r4, #0]
 8006814:	bf18      	it	ne
 8006816:	6059      	strne	r1, [r3, #4]
 8006818:	6863      	ldr	r3, [r4, #4]
 800681a:	bf08      	it	eq
 800681c:	f8c8 1000 	streq.w	r1, [r8]
 8006820:	5162      	str	r2, [r4, r5]
 8006822:	604b      	str	r3, [r1, #4]
 8006824:	4630      	mov	r0, r6
 8006826:	f000 f82f 	bl	8006888 <__malloc_unlock>
 800682a:	f104 000b 	add.w	r0, r4, #11
 800682e:	1d23      	adds	r3, r4, #4
 8006830:	f020 0007 	bic.w	r0, r0, #7
 8006834:	1ac2      	subs	r2, r0, r3
 8006836:	bf1c      	itt	ne
 8006838:	1a1b      	subne	r3, r3, r0
 800683a:	50a3      	strne	r3, [r4, r2]
 800683c:	e7af      	b.n	800679e <_malloc_r+0x22>
 800683e:	6862      	ldr	r2, [r4, #4]
 8006840:	42a3      	cmp	r3, r4
 8006842:	bf0c      	ite	eq
 8006844:	f8c8 2000 	streq.w	r2, [r8]
 8006848:	605a      	strne	r2, [r3, #4]
 800684a:	e7eb      	b.n	8006824 <_malloc_r+0xa8>
 800684c:	4623      	mov	r3, r4
 800684e:	6864      	ldr	r4, [r4, #4]
 8006850:	e7ae      	b.n	80067b0 <_malloc_r+0x34>
 8006852:	463c      	mov	r4, r7
 8006854:	687f      	ldr	r7, [r7, #4]
 8006856:	e7b6      	b.n	80067c6 <_malloc_r+0x4a>
 8006858:	461a      	mov	r2, r3
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	42a3      	cmp	r3, r4
 800685e:	d1fb      	bne.n	8006858 <_malloc_r+0xdc>
 8006860:	2300      	movs	r3, #0
 8006862:	6053      	str	r3, [r2, #4]
 8006864:	e7de      	b.n	8006824 <_malloc_r+0xa8>
 8006866:	230c      	movs	r3, #12
 8006868:	4630      	mov	r0, r6
 800686a:	6033      	str	r3, [r6, #0]
 800686c:	f000 f80c 	bl	8006888 <__malloc_unlock>
 8006870:	e794      	b.n	800679c <_malloc_r+0x20>
 8006872:	6005      	str	r5, [r0, #0]
 8006874:	e7d6      	b.n	8006824 <_malloc_r+0xa8>
 8006876:	bf00      	nop
 8006878:	20001c80 	.word	0x20001c80

0800687c <__malloc_lock>:
 800687c:	4801      	ldr	r0, [pc, #4]	@ (8006884 <__malloc_lock+0x8>)
 800687e:	f7ff bf03 	b.w	8006688 <__retarget_lock_acquire_recursive>
 8006882:	bf00      	nop
 8006884:	20001c78 	.word	0x20001c78

08006888 <__malloc_unlock>:
 8006888:	4801      	ldr	r0, [pc, #4]	@ (8006890 <__malloc_unlock+0x8>)
 800688a:	f7ff befe 	b.w	800668a <__retarget_lock_release_recursive>
 800688e:	bf00      	nop
 8006890:	20001c78 	.word	0x20001c78

08006894 <__ssputs_r>:
 8006894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006898:	461f      	mov	r7, r3
 800689a:	688e      	ldr	r6, [r1, #8]
 800689c:	4682      	mov	sl, r0
 800689e:	42be      	cmp	r6, r7
 80068a0:	460c      	mov	r4, r1
 80068a2:	4690      	mov	r8, r2
 80068a4:	680b      	ldr	r3, [r1, #0]
 80068a6:	d82d      	bhi.n	8006904 <__ssputs_r+0x70>
 80068a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80068ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80068b0:	d026      	beq.n	8006900 <__ssputs_r+0x6c>
 80068b2:	6965      	ldr	r5, [r4, #20]
 80068b4:	6909      	ldr	r1, [r1, #16]
 80068b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80068ba:	eba3 0901 	sub.w	r9, r3, r1
 80068be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80068c2:	1c7b      	adds	r3, r7, #1
 80068c4:	444b      	add	r3, r9
 80068c6:	106d      	asrs	r5, r5, #1
 80068c8:	429d      	cmp	r5, r3
 80068ca:	bf38      	it	cc
 80068cc:	461d      	movcc	r5, r3
 80068ce:	0553      	lsls	r3, r2, #21
 80068d0:	d527      	bpl.n	8006922 <__ssputs_r+0x8e>
 80068d2:	4629      	mov	r1, r5
 80068d4:	f7ff ff52 	bl	800677c <_malloc_r>
 80068d8:	4606      	mov	r6, r0
 80068da:	b360      	cbz	r0, 8006936 <__ssputs_r+0xa2>
 80068dc:	464a      	mov	r2, r9
 80068de:	6921      	ldr	r1, [r4, #16]
 80068e0:	f7ff fed4 	bl	800668c <memcpy>
 80068e4:	89a3      	ldrh	r3, [r4, #12]
 80068e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80068ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ee:	81a3      	strh	r3, [r4, #12]
 80068f0:	6126      	str	r6, [r4, #16]
 80068f2:	444e      	add	r6, r9
 80068f4:	6026      	str	r6, [r4, #0]
 80068f6:	463e      	mov	r6, r7
 80068f8:	6165      	str	r5, [r4, #20]
 80068fa:	eba5 0509 	sub.w	r5, r5, r9
 80068fe:	60a5      	str	r5, [r4, #8]
 8006900:	42be      	cmp	r6, r7
 8006902:	d900      	bls.n	8006906 <__ssputs_r+0x72>
 8006904:	463e      	mov	r6, r7
 8006906:	4632      	mov	r2, r6
 8006908:	4641      	mov	r1, r8
 800690a:	6820      	ldr	r0, [r4, #0]
 800690c:	f000 faac 	bl	8006e68 <memmove>
 8006910:	2000      	movs	r0, #0
 8006912:	68a3      	ldr	r3, [r4, #8]
 8006914:	1b9b      	subs	r3, r3, r6
 8006916:	60a3      	str	r3, [r4, #8]
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	4433      	add	r3, r6
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006922:	462a      	mov	r2, r5
 8006924:	f000 fad8 	bl	8006ed8 <_realloc_r>
 8006928:	4606      	mov	r6, r0
 800692a:	2800      	cmp	r0, #0
 800692c:	d1e0      	bne.n	80068f0 <__ssputs_r+0x5c>
 800692e:	4650      	mov	r0, sl
 8006930:	6921      	ldr	r1, [r4, #16]
 8006932:	f7ff feb9 	bl	80066a8 <_free_r>
 8006936:	230c      	movs	r3, #12
 8006938:	f8ca 3000 	str.w	r3, [sl]
 800693c:	89a3      	ldrh	r3, [r4, #12]
 800693e:	f04f 30ff 	mov.w	r0, #4294967295
 8006942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006946:	81a3      	strh	r3, [r4, #12]
 8006948:	e7e9      	b.n	800691e <__ssputs_r+0x8a>
	...

0800694c <_svfiprintf_r>:
 800694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006950:	4698      	mov	r8, r3
 8006952:	898b      	ldrh	r3, [r1, #12]
 8006954:	4607      	mov	r7, r0
 8006956:	061b      	lsls	r3, r3, #24
 8006958:	460d      	mov	r5, r1
 800695a:	4614      	mov	r4, r2
 800695c:	b09d      	sub	sp, #116	@ 0x74
 800695e:	d510      	bpl.n	8006982 <_svfiprintf_r+0x36>
 8006960:	690b      	ldr	r3, [r1, #16]
 8006962:	b973      	cbnz	r3, 8006982 <_svfiprintf_r+0x36>
 8006964:	2140      	movs	r1, #64	@ 0x40
 8006966:	f7ff ff09 	bl	800677c <_malloc_r>
 800696a:	6028      	str	r0, [r5, #0]
 800696c:	6128      	str	r0, [r5, #16]
 800696e:	b930      	cbnz	r0, 800697e <_svfiprintf_r+0x32>
 8006970:	230c      	movs	r3, #12
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	f04f 30ff 	mov.w	r0, #4294967295
 8006978:	b01d      	add	sp, #116	@ 0x74
 800697a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697e:	2340      	movs	r3, #64	@ 0x40
 8006980:	616b      	str	r3, [r5, #20]
 8006982:	2300      	movs	r3, #0
 8006984:	9309      	str	r3, [sp, #36]	@ 0x24
 8006986:	2320      	movs	r3, #32
 8006988:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800698c:	2330      	movs	r3, #48	@ 0x30
 800698e:	f04f 0901 	mov.w	r9, #1
 8006992:	f8cd 800c 	str.w	r8, [sp, #12]
 8006996:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006b30 <_svfiprintf_r+0x1e4>
 800699a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800699e:	4623      	mov	r3, r4
 80069a0:	469a      	mov	sl, r3
 80069a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069a6:	b10a      	cbz	r2, 80069ac <_svfiprintf_r+0x60>
 80069a8:	2a25      	cmp	r2, #37	@ 0x25
 80069aa:	d1f9      	bne.n	80069a0 <_svfiprintf_r+0x54>
 80069ac:	ebba 0b04 	subs.w	fp, sl, r4
 80069b0:	d00b      	beq.n	80069ca <_svfiprintf_r+0x7e>
 80069b2:	465b      	mov	r3, fp
 80069b4:	4622      	mov	r2, r4
 80069b6:	4629      	mov	r1, r5
 80069b8:	4638      	mov	r0, r7
 80069ba:	f7ff ff6b 	bl	8006894 <__ssputs_r>
 80069be:	3001      	adds	r0, #1
 80069c0:	f000 80a7 	beq.w	8006b12 <_svfiprintf_r+0x1c6>
 80069c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069c6:	445a      	add	r2, fp
 80069c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80069ca:	f89a 3000 	ldrb.w	r3, [sl]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	f000 809f 	beq.w	8006b12 <_svfiprintf_r+0x1c6>
 80069d4:	2300      	movs	r3, #0
 80069d6:	f04f 32ff 	mov.w	r2, #4294967295
 80069da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069de:	f10a 0a01 	add.w	sl, sl, #1
 80069e2:	9304      	str	r3, [sp, #16]
 80069e4:	9307      	str	r3, [sp, #28]
 80069e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80069ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80069ec:	4654      	mov	r4, sl
 80069ee:	2205      	movs	r2, #5
 80069f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069f4:	484e      	ldr	r0, [pc, #312]	@ (8006b30 <_svfiprintf_r+0x1e4>)
 80069f6:	f000 fa61 	bl	8006ebc <memchr>
 80069fa:	9a04      	ldr	r2, [sp, #16]
 80069fc:	b9d8      	cbnz	r0, 8006a36 <_svfiprintf_r+0xea>
 80069fe:	06d0      	lsls	r0, r2, #27
 8006a00:	bf44      	itt	mi
 8006a02:	2320      	movmi	r3, #32
 8006a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a08:	0711      	lsls	r1, r2, #28
 8006a0a:	bf44      	itt	mi
 8006a0c:	232b      	movmi	r3, #43	@ 0x2b
 8006a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a12:	f89a 3000 	ldrb.w	r3, [sl]
 8006a16:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a18:	d015      	beq.n	8006a46 <_svfiprintf_r+0xfa>
 8006a1a:	4654      	mov	r4, sl
 8006a1c:	2000      	movs	r0, #0
 8006a1e:	f04f 0c0a 	mov.w	ip, #10
 8006a22:	9a07      	ldr	r2, [sp, #28]
 8006a24:	4621      	mov	r1, r4
 8006a26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a2a:	3b30      	subs	r3, #48	@ 0x30
 8006a2c:	2b09      	cmp	r3, #9
 8006a2e:	d94b      	bls.n	8006ac8 <_svfiprintf_r+0x17c>
 8006a30:	b1b0      	cbz	r0, 8006a60 <_svfiprintf_r+0x114>
 8006a32:	9207      	str	r2, [sp, #28]
 8006a34:	e014      	b.n	8006a60 <_svfiprintf_r+0x114>
 8006a36:	eba0 0308 	sub.w	r3, r0, r8
 8006a3a:	fa09 f303 	lsl.w	r3, r9, r3
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	46a2      	mov	sl, r4
 8006a42:	9304      	str	r3, [sp, #16]
 8006a44:	e7d2      	b.n	80069ec <_svfiprintf_r+0xa0>
 8006a46:	9b03      	ldr	r3, [sp, #12]
 8006a48:	1d19      	adds	r1, r3, #4
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	9103      	str	r1, [sp, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bfbb      	ittet	lt
 8006a52:	425b      	neglt	r3, r3
 8006a54:	f042 0202 	orrlt.w	r2, r2, #2
 8006a58:	9307      	strge	r3, [sp, #28]
 8006a5a:	9307      	strlt	r3, [sp, #28]
 8006a5c:	bfb8      	it	lt
 8006a5e:	9204      	strlt	r2, [sp, #16]
 8006a60:	7823      	ldrb	r3, [r4, #0]
 8006a62:	2b2e      	cmp	r3, #46	@ 0x2e
 8006a64:	d10a      	bne.n	8006a7c <_svfiprintf_r+0x130>
 8006a66:	7863      	ldrb	r3, [r4, #1]
 8006a68:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a6a:	d132      	bne.n	8006ad2 <_svfiprintf_r+0x186>
 8006a6c:	9b03      	ldr	r3, [sp, #12]
 8006a6e:	3402      	adds	r4, #2
 8006a70:	1d1a      	adds	r2, r3, #4
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	9203      	str	r2, [sp, #12]
 8006a76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006a7a:	9305      	str	r3, [sp, #20]
 8006a7c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006b34 <_svfiprintf_r+0x1e8>
 8006a80:	2203      	movs	r2, #3
 8006a82:	4650      	mov	r0, sl
 8006a84:	7821      	ldrb	r1, [r4, #0]
 8006a86:	f000 fa19 	bl	8006ebc <memchr>
 8006a8a:	b138      	cbz	r0, 8006a9c <_svfiprintf_r+0x150>
 8006a8c:	2240      	movs	r2, #64	@ 0x40
 8006a8e:	9b04      	ldr	r3, [sp, #16]
 8006a90:	eba0 000a 	sub.w	r0, r0, sl
 8006a94:	4082      	lsls	r2, r0
 8006a96:	4313      	orrs	r3, r2
 8006a98:	3401      	adds	r4, #1
 8006a9a:	9304      	str	r3, [sp, #16]
 8006a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006aa0:	2206      	movs	r2, #6
 8006aa2:	4825      	ldr	r0, [pc, #148]	@ (8006b38 <_svfiprintf_r+0x1ec>)
 8006aa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006aa8:	f000 fa08 	bl	8006ebc <memchr>
 8006aac:	2800      	cmp	r0, #0
 8006aae:	d036      	beq.n	8006b1e <_svfiprintf_r+0x1d2>
 8006ab0:	4b22      	ldr	r3, [pc, #136]	@ (8006b3c <_svfiprintf_r+0x1f0>)
 8006ab2:	bb1b      	cbnz	r3, 8006afc <_svfiprintf_r+0x1b0>
 8006ab4:	9b03      	ldr	r3, [sp, #12]
 8006ab6:	3307      	adds	r3, #7
 8006ab8:	f023 0307 	bic.w	r3, r3, #7
 8006abc:	3308      	adds	r3, #8
 8006abe:	9303      	str	r3, [sp, #12]
 8006ac0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ac2:	4433      	add	r3, r6
 8006ac4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ac6:	e76a      	b.n	800699e <_svfiprintf_r+0x52>
 8006ac8:	460c      	mov	r4, r1
 8006aca:	2001      	movs	r0, #1
 8006acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ad0:	e7a8      	b.n	8006a24 <_svfiprintf_r+0xd8>
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f04f 0c0a 	mov.w	ip, #10
 8006ad8:	4619      	mov	r1, r3
 8006ada:	3401      	adds	r4, #1
 8006adc:	9305      	str	r3, [sp, #20]
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ae4:	3a30      	subs	r2, #48	@ 0x30
 8006ae6:	2a09      	cmp	r2, #9
 8006ae8:	d903      	bls.n	8006af2 <_svfiprintf_r+0x1a6>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d0c6      	beq.n	8006a7c <_svfiprintf_r+0x130>
 8006aee:	9105      	str	r1, [sp, #20]
 8006af0:	e7c4      	b.n	8006a7c <_svfiprintf_r+0x130>
 8006af2:	4604      	mov	r4, r0
 8006af4:	2301      	movs	r3, #1
 8006af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006afa:	e7f0      	b.n	8006ade <_svfiprintf_r+0x192>
 8006afc:	ab03      	add	r3, sp, #12
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	462a      	mov	r2, r5
 8006b02:	4638      	mov	r0, r7
 8006b04:	4b0e      	ldr	r3, [pc, #56]	@ (8006b40 <_svfiprintf_r+0x1f4>)
 8006b06:	a904      	add	r1, sp, #16
 8006b08:	f3af 8000 	nop.w
 8006b0c:	1c42      	adds	r2, r0, #1
 8006b0e:	4606      	mov	r6, r0
 8006b10:	d1d6      	bne.n	8006ac0 <_svfiprintf_r+0x174>
 8006b12:	89ab      	ldrh	r3, [r5, #12]
 8006b14:	065b      	lsls	r3, r3, #25
 8006b16:	f53f af2d 	bmi.w	8006974 <_svfiprintf_r+0x28>
 8006b1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b1c:	e72c      	b.n	8006978 <_svfiprintf_r+0x2c>
 8006b1e:	ab03      	add	r3, sp, #12
 8006b20:	9300      	str	r3, [sp, #0]
 8006b22:	462a      	mov	r2, r5
 8006b24:	4638      	mov	r0, r7
 8006b26:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <_svfiprintf_r+0x1f4>)
 8006b28:	a904      	add	r1, sp, #16
 8006b2a:	f000 f87d 	bl	8006c28 <_printf_i>
 8006b2e:	e7ed      	b.n	8006b0c <_svfiprintf_r+0x1c0>
 8006b30:	0800707a 	.word	0x0800707a
 8006b34:	08007080 	.word	0x08007080
 8006b38:	08007084 	.word	0x08007084
 8006b3c:	00000000 	.word	0x00000000
 8006b40:	08006895 	.word	0x08006895

08006b44 <_printf_common>:
 8006b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	4616      	mov	r6, r2
 8006b4a:	4698      	mov	r8, r3
 8006b4c:	688a      	ldr	r2, [r1, #8]
 8006b4e:	690b      	ldr	r3, [r1, #16]
 8006b50:	4607      	mov	r7, r0
 8006b52:	4293      	cmp	r3, r2
 8006b54:	bfb8      	it	lt
 8006b56:	4613      	movlt	r3, r2
 8006b58:	6033      	str	r3, [r6, #0]
 8006b5a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b5e:	460c      	mov	r4, r1
 8006b60:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b64:	b10a      	cbz	r2, 8006b6a <_printf_common+0x26>
 8006b66:	3301      	adds	r3, #1
 8006b68:	6033      	str	r3, [r6, #0]
 8006b6a:	6823      	ldr	r3, [r4, #0]
 8006b6c:	0699      	lsls	r1, r3, #26
 8006b6e:	bf42      	ittt	mi
 8006b70:	6833      	ldrmi	r3, [r6, #0]
 8006b72:	3302      	addmi	r3, #2
 8006b74:	6033      	strmi	r3, [r6, #0]
 8006b76:	6825      	ldr	r5, [r4, #0]
 8006b78:	f015 0506 	ands.w	r5, r5, #6
 8006b7c:	d106      	bne.n	8006b8c <_printf_common+0x48>
 8006b7e:	f104 0a19 	add.w	sl, r4, #25
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	6832      	ldr	r2, [r6, #0]
 8006b86:	1a9b      	subs	r3, r3, r2
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	dc2b      	bgt.n	8006be4 <_printf_common+0xa0>
 8006b8c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b90:	6822      	ldr	r2, [r4, #0]
 8006b92:	3b00      	subs	r3, #0
 8006b94:	bf18      	it	ne
 8006b96:	2301      	movne	r3, #1
 8006b98:	0692      	lsls	r2, r2, #26
 8006b9a:	d430      	bmi.n	8006bfe <_printf_common+0xba>
 8006b9c:	4641      	mov	r1, r8
 8006b9e:	4638      	mov	r0, r7
 8006ba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ba4:	47c8      	blx	r9
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	d023      	beq.n	8006bf2 <_printf_common+0xae>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	6922      	ldr	r2, [r4, #16]
 8006bae:	f003 0306 	and.w	r3, r3, #6
 8006bb2:	2b04      	cmp	r3, #4
 8006bb4:	bf14      	ite	ne
 8006bb6:	2500      	movne	r5, #0
 8006bb8:	6833      	ldreq	r3, [r6, #0]
 8006bba:	f04f 0600 	mov.w	r6, #0
 8006bbe:	bf08      	it	eq
 8006bc0:	68e5      	ldreq	r5, [r4, #12]
 8006bc2:	f104 041a 	add.w	r4, r4, #26
 8006bc6:	bf08      	it	eq
 8006bc8:	1aed      	subeq	r5, r5, r3
 8006bca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006bce:	bf08      	it	eq
 8006bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	bfc4      	itt	gt
 8006bd8:	1a9b      	subgt	r3, r3, r2
 8006bda:	18ed      	addgt	r5, r5, r3
 8006bdc:	42b5      	cmp	r5, r6
 8006bde:	d11a      	bne.n	8006c16 <_printf_common+0xd2>
 8006be0:	2000      	movs	r0, #0
 8006be2:	e008      	b.n	8006bf6 <_printf_common+0xb2>
 8006be4:	2301      	movs	r3, #1
 8006be6:	4652      	mov	r2, sl
 8006be8:	4641      	mov	r1, r8
 8006bea:	4638      	mov	r0, r7
 8006bec:	47c8      	blx	r9
 8006bee:	3001      	adds	r0, #1
 8006bf0:	d103      	bne.n	8006bfa <_printf_common+0xb6>
 8006bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfa:	3501      	adds	r5, #1
 8006bfc:	e7c1      	b.n	8006b82 <_printf_common+0x3e>
 8006bfe:	2030      	movs	r0, #48	@ 0x30
 8006c00:	18e1      	adds	r1, r4, r3
 8006c02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c0c:	4422      	add	r2, r4
 8006c0e:	3302      	adds	r3, #2
 8006c10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c14:	e7c2      	b.n	8006b9c <_printf_common+0x58>
 8006c16:	2301      	movs	r3, #1
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4641      	mov	r1, r8
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	47c8      	blx	r9
 8006c20:	3001      	adds	r0, #1
 8006c22:	d0e6      	beq.n	8006bf2 <_printf_common+0xae>
 8006c24:	3601      	adds	r6, #1
 8006c26:	e7d9      	b.n	8006bdc <_printf_common+0x98>

08006c28 <_printf_i>:
 8006c28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c2c:	7e0f      	ldrb	r7, [r1, #24]
 8006c2e:	4691      	mov	r9, r2
 8006c30:	2f78      	cmp	r7, #120	@ 0x78
 8006c32:	4680      	mov	r8, r0
 8006c34:	460c      	mov	r4, r1
 8006c36:	469a      	mov	sl, r3
 8006c38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c3e:	d807      	bhi.n	8006c50 <_printf_i+0x28>
 8006c40:	2f62      	cmp	r7, #98	@ 0x62
 8006c42:	d80a      	bhi.n	8006c5a <_printf_i+0x32>
 8006c44:	2f00      	cmp	r7, #0
 8006c46:	f000 80d3 	beq.w	8006df0 <_printf_i+0x1c8>
 8006c4a:	2f58      	cmp	r7, #88	@ 0x58
 8006c4c:	f000 80ba 	beq.w	8006dc4 <_printf_i+0x19c>
 8006c50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c58:	e03a      	b.n	8006cd0 <_printf_i+0xa8>
 8006c5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c5e:	2b15      	cmp	r3, #21
 8006c60:	d8f6      	bhi.n	8006c50 <_printf_i+0x28>
 8006c62:	a101      	add	r1, pc, #4	@ (adr r1, 8006c68 <_printf_i+0x40>)
 8006c64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c68:	08006cc1 	.word	0x08006cc1
 8006c6c:	08006cd5 	.word	0x08006cd5
 8006c70:	08006c51 	.word	0x08006c51
 8006c74:	08006c51 	.word	0x08006c51
 8006c78:	08006c51 	.word	0x08006c51
 8006c7c:	08006c51 	.word	0x08006c51
 8006c80:	08006cd5 	.word	0x08006cd5
 8006c84:	08006c51 	.word	0x08006c51
 8006c88:	08006c51 	.word	0x08006c51
 8006c8c:	08006c51 	.word	0x08006c51
 8006c90:	08006c51 	.word	0x08006c51
 8006c94:	08006dd7 	.word	0x08006dd7
 8006c98:	08006cff 	.word	0x08006cff
 8006c9c:	08006d91 	.word	0x08006d91
 8006ca0:	08006c51 	.word	0x08006c51
 8006ca4:	08006c51 	.word	0x08006c51
 8006ca8:	08006df9 	.word	0x08006df9
 8006cac:	08006c51 	.word	0x08006c51
 8006cb0:	08006cff 	.word	0x08006cff
 8006cb4:	08006c51 	.word	0x08006c51
 8006cb8:	08006c51 	.word	0x08006c51
 8006cbc:	08006d99 	.word	0x08006d99
 8006cc0:	6833      	ldr	r3, [r6, #0]
 8006cc2:	1d1a      	adds	r2, r3, #4
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6032      	str	r2, [r6, #0]
 8006cc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ccc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e09e      	b.n	8006e12 <_printf_i+0x1ea>
 8006cd4:	6833      	ldr	r3, [r6, #0]
 8006cd6:	6820      	ldr	r0, [r4, #0]
 8006cd8:	1d19      	adds	r1, r3, #4
 8006cda:	6031      	str	r1, [r6, #0]
 8006cdc:	0606      	lsls	r6, r0, #24
 8006cde:	d501      	bpl.n	8006ce4 <_printf_i+0xbc>
 8006ce0:	681d      	ldr	r5, [r3, #0]
 8006ce2:	e003      	b.n	8006cec <_printf_i+0xc4>
 8006ce4:	0645      	lsls	r5, r0, #25
 8006ce6:	d5fb      	bpl.n	8006ce0 <_printf_i+0xb8>
 8006ce8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cec:	2d00      	cmp	r5, #0
 8006cee:	da03      	bge.n	8006cf8 <_printf_i+0xd0>
 8006cf0:	232d      	movs	r3, #45	@ 0x2d
 8006cf2:	426d      	negs	r5, r5
 8006cf4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cf8:	230a      	movs	r3, #10
 8006cfa:	4859      	ldr	r0, [pc, #356]	@ (8006e60 <_printf_i+0x238>)
 8006cfc:	e011      	b.n	8006d22 <_printf_i+0xfa>
 8006cfe:	6821      	ldr	r1, [r4, #0]
 8006d00:	6833      	ldr	r3, [r6, #0]
 8006d02:	0608      	lsls	r0, r1, #24
 8006d04:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d08:	d402      	bmi.n	8006d10 <_printf_i+0xe8>
 8006d0a:	0649      	lsls	r1, r1, #25
 8006d0c:	bf48      	it	mi
 8006d0e:	b2ad      	uxthmi	r5, r5
 8006d10:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d12:	6033      	str	r3, [r6, #0]
 8006d14:	bf14      	ite	ne
 8006d16:	230a      	movne	r3, #10
 8006d18:	2308      	moveq	r3, #8
 8006d1a:	4851      	ldr	r0, [pc, #324]	@ (8006e60 <_printf_i+0x238>)
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d22:	6866      	ldr	r6, [r4, #4]
 8006d24:	2e00      	cmp	r6, #0
 8006d26:	bfa8      	it	ge
 8006d28:	6821      	ldrge	r1, [r4, #0]
 8006d2a:	60a6      	str	r6, [r4, #8]
 8006d2c:	bfa4      	itt	ge
 8006d2e:	f021 0104 	bicge.w	r1, r1, #4
 8006d32:	6021      	strge	r1, [r4, #0]
 8006d34:	b90d      	cbnz	r5, 8006d3a <_printf_i+0x112>
 8006d36:	2e00      	cmp	r6, #0
 8006d38:	d04b      	beq.n	8006dd2 <_printf_i+0x1aa>
 8006d3a:	4616      	mov	r6, r2
 8006d3c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d40:	fb03 5711 	mls	r7, r3, r1, r5
 8006d44:	5dc7      	ldrb	r7, [r0, r7]
 8006d46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d4a:	462f      	mov	r7, r5
 8006d4c:	42bb      	cmp	r3, r7
 8006d4e:	460d      	mov	r5, r1
 8006d50:	d9f4      	bls.n	8006d3c <_printf_i+0x114>
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d10b      	bne.n	8006d6e <_printf_i+0x146>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	07df      	lsls	r7, r3, #31
 8006d5a:	d508      	bpl.n	8006d6e <_printf_i+0x146>
 8006d5c:	6923      	ldr	r3, [r4, #16]
 8006d5e:	6861      	ldr	r1, [r4, #4]
 8006d60:	4299      	cmp	r1, r3
 8006d62:	bfde      	ittt	le
 8006d64:	2330      	movle	r3, #48	@ 0x30
 8006d66:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d6e:	1b92      	subs	r2, r2, r6
 8006d70:	6122      	str	r2, [r4, #16]
 8006d72:	464b      	mov	r3, r9
 8006d74:	4621      	mov	r1, r4
 8006d76:	4640      	mov	r0, r8
 8006d78:	f8cd a000 	str.w	sl, [sp]
 8006d7c:	aa03      	add	r2, sp, #12
 8006d7e:	f7ff fee1 	bl	8006b44 <_printf_common>
 8006d82:	3001      	adds	r0, #1
 8006d84:	d14a      	bne.n	8006e1c <_printf_i+0x1f4>
 8006d86:	f04f 30ff 	mov.w	r0, #4294967295
 8006d8a:	b004      	add	sp, #16
 8006d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	f043 0320 	orr.w	r3, r3, #32
 8006d96:	6023      	str	r3, [r4, #0]
 8006d98:	2778      	movs	r7, #120	@ 0x78
 8006d9a:	4832      	ldr	r0, [pc, #200]	@ (8006e64 <_printf_i+0x23c>)
 8006d9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	6831      	ldr	r1, [r6, #0]
 8006da4:	061f      	lsls	r7, r3, #24
 8006da6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006daa:	d402      	bmi.n	8006db2 <_printf_i+0x18a>
 8006dac:	065f      	lsls	r7, r3, #25
 8006dae:	bf48      	it	mi
 8006db0:	b2ad      	uxthmi	r5, r5
 8006db2:	6031      	str	r1, [r6, #0]
 8006db4:	07d9      	lsls	r1, r3, #31
 8006db6:	bf44      	itt	mi
 8006db8:	f043 0320 	orrmi.w	r3, r3, #32
 8006dbc:	6023      	strmi	r3, [r4, #0]
 8006dbe:	b11d      	cbz	r5, 8006dc8 <_printf_i+0x1a0>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	e7ab      	b.n	8006d1c <_printf_i+0xf4>
 8006dc4:	4826      	ldr	r0, [pc, #152]	@ (8006e60 <_printf_i+0x238>)
 8006dc6:	e7e9      	b.n	8006d9c <_printf_i+0x174>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	f023 0320 	bic.w	r3, r3, #32
 8006dce:	6023      	str	r3, [r4, #0]
 8006dd0:	e7f6      	b.n	8006dc0 <_printf_i+0x198>
 8006dd2:	4616      	mov	r6, r2
 8006dd4:	e7bd      	b.n	8006d52 <_printf_i+0x12a>
 8006dd6:	6833      	ldr	r3, [r6, #0]
 8006dd8:	6825      	ldr	r5, [r4, #0]
 8006dda:	1d18      	adds	r0, r3, #4
 8006ddc:	6961      	ldr	r1, [r4, #20]
 8006dde:	6030      	str	r0, [r6, #0]
 8006de0:	062e      	lsls	r6, r5, #24
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	d501      	bpl.n	8006dea <_printf_i+0x1c2>
 8006de6:	6019      	str	r1, [r3, #0]
 8006de8:	e002      	b.n	8006df0 <_printf_i+0x1c8>
 8006dea:	0668      	lsls	r0, r5, #25
 8006dec:	d5fb      	bpl.n	8006de6 <_printf_i+0x1be>
 8006dee:	8019      	strh	r1, [r3, #0]
 8006df0:	2300      	movs	r3, #0
 8006df2:	4616      	mov	r6, r2
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	e7bc      	b.n	8006d72 <_printf_i+0x14a>
 8006df8:	6833      	ldr	r3, [r6, #0]
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	1d1a      	adds	r2, r3, #4
 8006dfe:	6032      	str	r2, [r6, #0]
 8006e00:	681e      	ldr	r6, [r3, #0]
 8006e02:	6862      	ldr	r2, [r4, #4]
 8006e04:	4630      	mov	r0, r6
 8006e06:	f000 f859 	bl	8006ebc <memchr>
 8006e0a:	b108      	cbz	r0, 8006e10 <_printf_i+0x1e8>
 8006e0c:	1b80      	subs	r0, r0, r6
 8006e0e:	6060      	str	r0, [r4, #4]
 8006e10:	6863      	ldr	r3, [r4, #4]
 8006e12:	6123      	str	r3, [r4, #16]
 8006e14:	2300      	movs	r3, #0
 8006e16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e1a:	e7aa      	b.n	8006d72 <_printf_i+0x14a>
 8006e1c:	4632      	mov	r2, r6
 8006e1e:	4649      	mov	r1, r9
 8006e20:	4640      	mov	r0, r8
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	47d0      	blx	sl
 8006e26:	3001      	adds	r0, #1
 8006e28:	d0ad      	beq.n	8006d86 <_printf_i+0x15e>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	079b      	lsls	r3, r3, #30
 8006e2e:	d413      	bmi.n	8006e58 <_printf_i+0x230>
 8006e30:	68e0      	ldr	r0, [r4, #12]
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	4298      	cmp	r0, r3
 8006e36:	bfb8      	it	lt
 8006e38:	4618      	movlt	r0, r3
 8006e3a:	e7a6      	b.n	8006d8a <_printf_i+0x162>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	4632      	mov	r2, r6
 8006e40:	4649      	mov	r1, r9
 8006e42:	4640      	mov	r0, r8
 8006e44:	47d0      	blx	sl
 8006e46:	3001      	adds	r0, #1
 8006e48:	d09d      	beq.n	8006d86 <_printf_i+0x15e>
 8006e4a:	3501      	adds	r5, #1
 8006e4c:	68e3      	ldr	r3, [r4, #12]
 8006e4e:	9903      	ldr	r1, [sp, #12]
 8006e50:	1a5b      	subs	r3, r3, r1
 8006e52:	42ab      	cmp	r3, r5
 8006e54:	dcf2      	bgt.n	8006e3c <_printf_i+0x214>
 8006e56:	e7eb      	b.n	8006e30 <_printf_i+0x208>
 8006e58:	2500      	movs	r5, #0
 8006e5a:	f104 0619 	add.w	r6, r4, #25
 8006e5e:	e7f5      	b.n	8006e4c <_printf_i+0x224>
 8006e60:	0800708b 	.word	0x0800708b
 8006e64:	0800709c 	.word	0x0800709c

08006e68 <memmove>:
 8006e68:	4288      	cmp	r0, r1
 8006e6a:	b510      	push	{r4, lr}
 8006e6c:	eb01 0402 	add.w	r4, r1, r2
 8006e70:	d902      	bls.n	8006e78 <memmove+0x10>
 8006e72:	4284      	cmp	r4, r0
 8006e74:	4623      	mov	r3, r4
 8006e76:	d807      	bhi.n	8006e88 <memmove+0x20>
 8006e78:	1e43      	subs	r3, r0, #1
 8006e7a:	42a1      	cmp	r1, r4
 8006e7c:	d008      	beq.n	8006e90 <memmove+0x28>
 8006e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e86:	e7f8      	b.n	8006e7a <memmove+0x12>
 8006e88:	4601      	mov	r1, r0
 8006e8a:	4402      	add	r2, r0
 8006e8c:	428a      	cmp	r2, r1
 8006e8e:	d100      	bne.n	8006e92 <memmove+0x2a>
 8006e90:	bd10      	pop	{r4, pc}
 8006e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e9a:	e7f7      	b.n	8006e8c <memmove+0x24>

08006e9c <_sbrk_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	4d05      	ldr	r5, [pc, #20]	@ (8006eb8 <_sbrk_r+0x1c>)
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7f9 fc96 	bl	80007d8 <_sbrk>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_sbrk_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_sbrk_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	20001c74 	.word	0x20001c74

08006ebc <memchr>:
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	b510      	push	{r4, lr}
 8006ec0:	b2c9      	uxtb	r1, r1
 8006ec2:	4402      	add	r2, r0
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	d101      	bne.n	8006ece <memchr+0x12>
 8006eca:	2000      	movs	r0, #0
 8006ecc:	e003      	b.n	8006ed6 <memchr+0x1a>
 8006ece:	7804      	ldrb	r4, [r0, #0]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	428c      	cmp	r4, r1
 8006ed4:	d1f6      	bne.n	8006ec4 <memchr+0x8>
 8006ed6:	bd10      	pop	{r4, pc}

08006ed8 <_realloc_r>:
 8006ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006edc:	4680      	mov	r8, r0
 8006ede:	4615      	mov	r5, r2
 8006ee0:	460c      	mov	r4, r1
 8006ee2:	b921      	cbnz	r1, 8006eee <_realloc_r+0x16>
 8006ee4:	4611      	mov	r1, r2
 8006ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006eea:	f7ff bc47 	b.w	800677c <_malloc_r>
 8006eee:	b92a      	cbnz	r2, 8006efc <_realloc_r+0x24>
 8006ef0:	f7ff fbda 	bl	80066a8 <_free_r>
 8006ef4:	2400      	movs	r4, #0
 8006ef6:	4620      	mov	r0, r4
 8006ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006efc:	f000 f81a 	bl	8006f34 <_malloc_usable_size_r>
 8006f00:	4285      	cmp	r5, r0
 8006f02:	4606      	mov	r6, r0
 8006f04:	d802      	bhi.n	8006f0c <_realloc_r+0x34>
 8006f06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006f0a:	d8f4      	bhi.n	8006ef6 <_realloc_r+0x1e>
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	4640      	mov	r0, r8
 8006f10:	f7ff fc34 	bl	800677c <_malloc_r>
 8006f14:	4607      	mov	r7, r0
 8006f16:	2800      	cmp	r0, #0
 8006f18:	d0ec      	beq.n	8006ef4 <_realloc_r+0x1c>
 8006f1a:	42b5      	cmp	r5, r6
 8006f1c:	462a      	mov	r2, r5
 8006f1e:	4621      	mov	r1, r4
 8006f20:	bf28      	it	cs
 8006f22:	4632      	movcs	r2, r6
 8006f24:	f7ff fbb2 	bl	800668c <memcpy>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4640      	mov	r0, r8
 8006f2c:	f7ff fbbc 	bl	80066a8 <_free_r>
 8006f30:	463c      	mov	r4, r7
 8006f32:	e7e0      	b.n	8006ef6 <_realloc_r+0x1e>

08006f34 <_malloc_usable_size_r>:
 8006f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f38:	1f18      	subs	r0, r3, #4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bfbc      	itt	lt
 8006f3e:	580b      	ldrlt	r3, [r1, r0]
 8006f40:	18c0      	addlt	r0, r0, r3
 8006f42:	4770      	bx	lr

08006f44 <_init>:
 8006f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f46:	bf00      	nop
 8006f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f4a:	bc08      	pop	{r3}
 8006f4c:	469e      	mov	lr, r3
 8006f4e:	4770      	bx	lr

08006f50 <_fini>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	bf00      	nop
 8006f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f56:	bc08      	pop	{r3}
 8006f58:	469e      	mov	lr, r3
 8006f5a:	4770      	bx	lr
