
Test_thutu_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000554c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800565c  0800565c  0000665c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800579c  0800579c  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  0800579c  0800579c  0000679c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057a4  080057a4  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057a4  080057a4  000067a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057a8  080057a8  000067a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080057ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be8  20000060  0800580c  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c48  0800580c  00007c48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d7d  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032b2  00000000  00000000  0001de06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000210b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f8d  00000000  00000000  000224b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002e96  00000000  00000000  0002343d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c82  00000000  00000000  000262d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000945ad  00000000  00000000  0003bf55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0502  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  000d0548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000d5c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005644 	.word	0x08005644

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005644 	.word	0x08005644

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa88 	bl	8000678 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f83e 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8a2 	bl	80002b4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000170:	f000 f876 	bl	8000260 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000174:	f002 fac4 	bl	8002700 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myBinarySem01 */
  myBinarySem01Handle = osSemaphoreNew(1, 1, &myBinarySem01_attributes);
 8000178:	4a11      	ldr	r2, [pc, #68]	@ (80001c0 <main+0x60>)
 800017a:	2101      	movs	r1, #1
 800017c:	2001      	movs	r0, #1
 800017e:	f002 fbb4 	bl	80028ea <osSemaphoreNew>
 8000182:	4603      	mov	r3, r0
 8000184:	4a0f      	ldr	r2, [pc, #60]	@ (80001c4 <main+0x64>)
 8000186:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000188:	4a0f      	ldr	r2, [pc, #60]	@ (80001c8 <main+0x68>)
 800018a:	2100      	movs	r1, #0
 800018c:	480f      	ldr	r0, [pc, #60]	@ (80001cc <main+0x6c>)
 800018e:	f002 faff 	bl	8002790 <osThreadNew>
 8000192:	4603      	mov	r3, r0
 8000194:	4a0e      	ldr	r2, [pc, #56]	@ (80001d0 <main+0x70>)
 8000196:	6013      	str	r3, [r2, #0]

  /* creation of myTask01 */
  myTask01Handle = osThreadNew(StartTask02, NULL, &myTask01_attributes);
 8000198:	4a0e      	ldr	r2, [pc, #56]	@ (80001d4 <main+0x74>)
 800019a:	2100      	movs	r1, #0
 800019c:	480e      	ldr	r0, [pc, #56]	@ (80001d8 <main+0x78>)
 800019e:	f002 faf7 	bl	8002790 <osThreadNew>
 80001a2:	4603      	mov	r3, r0
 80001a4:	4a0d      	ldr	r2, [pc, #52]	@ (80001dc <main+0x7c>)
 80001a6:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 80001a8:	4a0d      	ldr	r2, [pc, #52]	@ (80001e0 <main+0x80>)
 80001aa:	2100      	movs	r1, #0
 80001ac:	480a      	ldr	r0, [pc, #40]	@ (80001d8 <main+0x78>)
 80001ae:	f002 faef 	bl	8002790 <osThreadNew>
 80001b2:	4603      	mov	r3, r0
 80001b4:	4a0b      	ldr	r2, [pc, #44]	@ (80001e4 <main+0x84>)
 80001b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001b8:	f002 fac4 	bl	8002744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001bc:	bf00      	nop
 80001be:	e7fd      	b.n	80001bc <main+0x5c>
 80001c0:	08005760 	.word	0x08005760
 80001c4:	200000d0 	.word	0x200000d0
 80001c8:	080056f4 	.word	0x080056f4
 80001cc:	080002e1 	.word	0x080002e1
 80001d0:	200000c4 	.word	0x200000c4
 80001d4:	08005718 	.word	0x08005718
 80001d8:	0800033d 	.word	0x0800033d
 80001dc:	200000c8 	.word	0x200000c8
 80001e0:	0800573c 	.word	0x0800573c
 80001e4:	200000cc 	.word	0x200000cc

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b090      	sub	sp, #64	@ 0x40
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	2228      	movs	r2, #40	@ 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f005 f93e 	bl	8005478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
 8000208:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020a:	2302      	movs	r3, #2
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000212:	2310      	movs	r3, #16
 8000214:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000216:	2300      	movs	r3, #0
 8000218:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	4618      	mov	r0, r3
 8000220:	f000 fd96 	bl	8000d50 <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800022a:	f000 f8c7 	bl	80003bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000232:	2300      	movs	r3, #0
 8000234:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800023a:	2300      	movs	r3, #0
 800023c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2100      	movs	r1, #0
 8000246:	4618      	mov	r0, r3
 8000248:	f001 f804 	bl	8001254 <HAL_RCC_ClockConfig>
 800024c:	4603      	mov	r3, r0
 800024e:	2b00      	cmp	r3, #0
 8000250:	d001      	beq.n	8000256 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000252:	f000 f8b3 	bl	80003bc <Error_Handler>
  }
}
 8000256:	bf00      	nop
 8000258:	3740      	adds	r7, #64	@ 0x40
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}
	...

08000260 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000264:	4b11      	ldr	r3, [pc, #68]	@ (80002ac <MX_USART1_UART_Init+0x4c>)
 8000266:	4a12      	ldr	r2, [pc, #72]	@ (80002b0 <MX_USART1_UART_Init+0x50>)
 8000268:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800026a:	4b10      	ldr	r3, [pc, #64]	@ (80002ac <MX_USART1_UART_Init+0x4c>)
 800026c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000270:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000272:	4b0e      	ldr	r3, [pc, #56]	@ (80002ac <MX_USART1_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000278:	4b0c      	ldr	r3, [pc, #48]	@ (80002ac <MX_USART1_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800027e:	4b0b      	ldr	r3, [pc, #44]	@ (80002ac <MX_USART1_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000284:	4b09      	ldr	r3, [pc, #36]	@ (80002ac <MX_USART1_UART_Init+0x4c>)
 8000286:	220c      	movs	r2, #12
 8000288:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028a:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <MX_USART1_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000290:	4b06      	ldr	r3, [pc, #24]	@ (80002ac <MX_USART1_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000296:	4805      	ldr	r0, [pc, #20]	@ (80002ac <MX_USART1_UART_Init+0x4c>)
 8000298:	f001 fbd8 	bl	8001a4c <HAL_UART_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002a2:	f000 f88b 	bl	80003bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000007c 	.word	0x2000007c
 80002b0:	40013800 	.word	0x40013800

080002b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ba:	4b08      	ldr	r3, [pc, #32]	@ (80002dc <MX_GPIO_Init+0x28>)
 80002bc:	699b      	ldr	r3, [r3, #24]
 80002be:	4a07      	ldr	r2, [pc, #28]	@ (80002dc <MX_GPIO_Init+0x28>)
 80002c0:	f043 0304 	orr.w	r3, r3, #4
 80002c4:	6193      	str	r3, [r2, #24]
 80002c6:	4b05      	ldr	r3, [pc, #20]	@ (80002dc <MX_GPIO_Init+0x28>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	f003 0304 	and.w	r3, r3, #4
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40021000 	.word	0x40021000

080002e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	const char* start_task="Default Task is started\r\n";
 80002e8:	4b11      	ldr	r3, [pc, #68]	@ (8000330 <StartDefaultTask+0x50>)
 80002ea:	60fb      	str	r3, [r7, #12]
	const char*	end_task="Default Task is ended\r\n";
 80002ec:	4b11      	ldr	r3, [pc, #68]	@ (8000334 <StartDefaultTask+0x54>)
 80002ee:	60bb      	str	r3, [r7, #8]
	HAL_UART_Transmit(&huart1, (uint8_t*)start_task, strlen(start_task), HAL_MAX_DELAY);
 80002f0:	68f8      	ldr	r0, [r7, #12]
 80002f2:	f7ff ff2d 	bl	8000150 <strlen>
 80002f6:	4603      	mov	r3, r0
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	f04f 33ff 	mov.w	r3, #4294967295
 80002fe:	68f9      	ldr	r1, [r7, #12]
 8000300:	480d      	ldr	r0, [pc, #52]	@ (8000338 <StartDefaultTask+0x58>)
 8000302:	f001 fbf3 	bl	8001aec <HAL_UART_Transmit>
	HAL_Delay(4000);
 8000306:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 800030a:	f000 f9e7 	bl	80006dc <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)end_task, strlen(end_task), HAL_MAX_DELAY);
 800030e:	68b8      	ldr	r0, [r7, #8]
 8000310:	f7ff ff1e 	bl	8000150 <strlen>
 8000314:	4603      	mov	r3, r0
 8000316:	b29a      	uxth	r2, r3
 8000318:	f04f 33ff 	mov.w	r3, #4294967295
 800031c:	68b9      	ldr	r1, [r7, #8]
 800031e:	4806      	ldr	r0, [pc, #24]	@ (8000338 <StartDefaultTask+0x58>)
 8000320:	f001 fbe4 	bl	8001aec <HAL_UART_Transmit>
    osDelay(1);
 8000324:	2001      	movs	r0, #1
 8000326:	f002 fac5 	bl	80028b4 <osDelay>
  {
 800032a:	bf00      	nop
 800032c:	e7dc      	b.n	80002e8 <StartDefaultTask+0x8>
 800032e:	bf00      	nop
 8000330:	08005690 	.word	0x08005690
 8000334:	080056ac 	.word	0x080056ac
 8000338:	2000007c 	.word	0x2000007c

0800033c <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  const char* start_task="Task 02 is started\r\n";
 8000344:	4b11      	ldr	r3, [pc, #68]	@ (800038c <StartTask02+0x50>)
 8000346:	60fb      	str	r3, [r7, #12]
	  const char* end_task="Default Task is ended\r\n";
 8000348:	4b11      	ldr	r3, [pc, #68]	@ (8000390 <StartTask02+0x54>)
 800034a:	60bb      	str	r3, [r7, #8]
	  HAL_UART_Transmit(&huart1, (uint8_t*)start_task, strlen(start_task), HAL_MAX_DELAY);
 800034c:	68f8      	ldr	r0, [r7, #12]
 800034e:	f7ff feff 	bl	8000150 <strlen>
 8000352:	4603      	mov	r3, r0
 8000354:	b29a      	uxth	r2, r3
 8000356:	f04f 33ff 	mov.w	r3, #4294967295
 800035a:	68f9      	ldr	r1, [r7, #12]
 800035c:	480d      	ldr	r0, [pc, #52]	@ (8000394 <StartTask02+0x58>)
 800035e:	f001 fbc5 	bl	8001aec <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000362:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000366:	f000 f9b9 	bl	80006dc <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)end_task, strlen(end_task), HAL_MAX_DELAY);
 800036a:	68b8      	ldr	r0, [r7, #8]
 800036c:	f7ff fef0 	bl	8000150 <strlen>
 8000370:	4603      	mov	r3, r0
 8000372:	b29a      	uxth	r2, r3
 8000374:	f04f 33ff 	mov.w	r3, #4294967295
 8000378:	68b9      	ldr	r1, [r7, #8]
 800037a:	4806      	ldr	r0, [pc, #24]	@ (8000394 <StartTask02+0x58>)
 800037c:	f001 fbb6 	bl	8001aec <HAL_UART_Transmit>
	  osDelay(1);
 8000380:	2001      	movs	r0, #1
 8000382:	f002 fa97 	bl	80028b4 <osDelay>
  {
 8000386:	bf00      	nop
 8000388:	e7dc      	b.n	8000344 <StartTask02+0x8>
 800038a:	bf00      	nop
 800038c:	080056c4 	.word	0x080056c4
 8000390:	080056ac 	.word	0x080056ac
 8000394:	2000007c 	.word	0x2000007c

08000398 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a04      	ldr	r2, [pc, #16]	@ (80003b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d101      	bne.n	80003ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003aa:	f000 f97b 	bl	80006a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40012c00 	.word	0x40012c00

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c4:	bf00      	nop
 80003c6:	e7fd      	b.n	80003c4 <Error_Handler+0x8>

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ce:	4b18      	ldr	r3, [pc, #96]	@ (8000430 <HAL_MspInit+0x68>)
 80003d0:	699b      	ldr	r3, [r3, #24]
 80003d2:	4a17      	ldr	r2, [pc, #92]	@ (8000430 <HAL_MspInit+0x68>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6193      	str	r3, [r2, #24]
 80003da:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <HAL_MspInit+0x68>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	60bb      	str	r3, [r7, #8]
 80003e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <HAL_MspInit+0x68>)
 80003e8:	69db      	ldr	r3, [r3, #28]
 80003ea:	4a11      	ldr	r2, [pc, #68]	@ (8000430 <HAL_MspInit+0x68>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003f0:	61d3      	str	r3, [r2, #28]
 80003f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000430 <HAL_MspInit+0x68>)
 80003f4:	69db      	ldr	r3, [r3, #28]
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003fa:	607b      	str	r3, [r7, #4]
 80003fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	210f      	movs	r1, #15
 8000402:	f06f 0001 	mvn.w	r0, #1
 8000406:	f000 fa42 	bl	800088e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800040a:	4b0a      	ldr	r3, [pc, #40]	@ (8000434 <HAL_MspInit+0x6c>)
 800040c:	685b      	ldr	r3, [r3, #4]
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
 800041a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800041e:	60fb      	str	r3, [r7, #12]
 8000420:	4a04      	ldr	r2, [pc, #16]	@ (8000434 <HAL_MspInit+0x6c>)
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000426:	bf00      	nop
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40021000 	.word	0x40021000
 8000434:	40010000 	.word	0x40010000

08000438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b088      	sub	sp, #32
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000440:	f107 0310 	add.w	r3, r7, #16
 8000444:	2200      	movs	r2, #0
 8000446:	601a      	str	r2, [r3, #0]
 8000448:	605a      	str	r2, [r3, #4]
 800044a:	609a      	str	r2, [r3, #8]
 800044c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	681b      	ldr	r3, [r3, #0]
 8000452:	4a20      	ldr	r2, [pc, #128]	@ (80004d4 <HAL_UART_MspInit+0x9c>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d139      	bne.n	80004cc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000458:	4b1f      	ldr	r3, [pc, #124]	@ (80004d8 <HAL_UART_MspInit+0xa0>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a1e      	ldr	r2, [pc, #120]	@ (80004d8 <HAL_UART_MspInit+0xa0>)
 800045e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b1c      	ldr	r3, [pc, #112]	@ (80004d8 <HAL_UART_MspInit+0xa0>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000470:	4b19      	ldr	r3, [pc, #100]	@ (80004d8 <HAL_UART_MspInit+0xa0>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a18      	ldr	r2, [pc, #96]	@ (80004d8 <HAL_UART_MspInit+0xa0>)
 8000476:	f043 0304 	orr.w	r3, r3, #4
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b16      	ldr	r3, [pc, #88]	@ (80004d8 <HAL_UART_MspInit+0xa0>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0304 	and.w	r3, r3, #4
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000488:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800048c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800048e:	2302      	movs	r3, #2
 8000490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000492:	2303      	movs	r3, #3
 8000494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000496:	f107 0310 	add.w	r3, r7, #16
 800049a:	4619      	mov	r1, r3
 800049c:	480f      	ldr	r0, [pc, #60]	@ (80004dc <HAL_UART_MspInit+0xa4>)
 800049e:	f000 fad3 	bl	8000a48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004a8:	2300      	movs	r3, #0
 80004aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4809      	ldr	r0, [pc, #36]	@ (80004dc <HAL_UART_MspInit+0xa4>)
 80004b8:	f000 fac6 	bl	8000a48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80004bc:	2200      	movs	r2, #0
 80004be:	2105      	movs	r1, #5
 80004c0:	2025      	movs	r0, #37	@ 0x25
 80004c2:	f000 f9e4 	bl	800088e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004c6:	2025      	movs	r0, #37	@ 0x25
 80004c8:	f000 f9fd 	bl	80008c6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80004cc:	bf00      	nop
 80004ce:	3720      	adds	r7, #32
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40013800 	.word	0x40013800
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010800 	.word	0x40010800

080004e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08c      	sub	sp, #48	@ 0x30
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80004ec:	2300      	movs	r3, #0
 80004ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80004f6:	4b2e      	ldr	r3, [pc, #184]	@ (80005b0 <HAL_InitTick+0xd0>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	4a2d      	ldr	r2, [pc, #180]	@ (80005b0 <HAL_InitTick+0xd0>)
 80004fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000500:	6193      	str	r3, [r2, #24]
 8000502:	4b2b      	ldr	r3, [pc, #172]	@ (80005b0 <HAL_InitTick+0xd0>)
 8000504:	699b      	ldr	r3, [r3, #24]
 8000506:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800050e:	f107 020c 	add.w	r2, r7, #12
 8000512:	f107 0310 	add.w	r3, r7, #16
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f001 f80b 	bl	8001534 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800051e:	f000 fff5 	bl	800150c <HAL_RCC_GetPCLK2Freq>
 8000522:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000526:	4a23      	ldr	r2, [pc, #140]	@ (80005b4 <HAL_InitTick+0xd4>)
 8000528:	fba2 2303 	umull	r2, r3, r2, r3
 800052c:	0c9b      	lsrs	r3, r3, #18
 800052e:	3b01      	subs	r3, #1
 8000530:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000532:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <HAL_InitTick+0xd8>)
 8000534:	4a21      	ldr	r2, [pc, #132]	@ (80005bc <HAL_InitTick+0xdc>)
 8000536:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000538:	4b1f      	ldr	r3, [pc, #124]	@ (80005b8 <HAL_InitTick+0xd8>)
 800053a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800053e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000540:	4a1d      	ldr	r2, [pc, #116]	@ (80005b8 <HAL_InitTick+0xd8>)
 8000542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000544:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000546:	4b1c      	ldr	r3, [pc, #112]	@ (80005b8 <HAL_InitTick+0xd8>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800054c:	4b1a      	ldr	r3, [pc, #104]	@ (80005b8 <HAL_InitTick+0xd8>)
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000552:	4b19      	ldr	r3, [pc, #100]	@ (80005b8 <HAL_InitTick+0xd8>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000558:	4817      	ldr	r0, [pc, #92]	@ (80005b8 <HAL_InitTick+0xd8>)
 800055a:	f001 f839 	bl	80015d0 <HAL_TIM_Base_Init>
 800055e:	4603      	mov	r3, r0
 8000560:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000564:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000568:	2b00      	cmp	r3, #0
 800056a:	d11b      	bne.n	80005a4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800056c:	4812      	ldr	r0, [pc, #72]	@ (80005b8 <HAL_InitTick+0xd8>)
 800056e:	f001 f887 	bl	8001680 <HAL_TIM_Base_Start_IT>
 8000572:	4603      	mov	r3, r0
 8000574:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000578:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800057c:	2b00      	cmp	r3, #0
 800057e:	d111      	bne.n	80005a4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000580:	2019      	movs	r0, #25
 8000582:	f000 f9a0 	bl	80008c6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d808      	bhi.n	800059e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	2019      	movs	r0, #25
 8000592:	f000 f97c 	bl	800088e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000596:	4a0a      	ldr	r2, [pc, #40]	@ (80005c0 <HAL_InitTick+0xe0>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6013      	str	r3, [r2, #0]
 800059c:	e002      	b.n	80005a4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80005a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3730      	adds	r7, #48	@ 0x30
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	431bde83 	.word	0x431bde83
 80005b8:	200000d4 	.word	0x200000d4
 80005bc:	40012c00 	.word	0x40012c00
 80005c0:	20000004 	.word	0x20000004

080005c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005c4:	b480      	push	{r7}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005c8:	bf00      	nop
 80005ca:	e7fd      	b.n	80005c8 <NMI_Handler+0x4>

080005cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <HardFault_Handler+0x4>

080005d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005d8:	bf00      	nop
 80005da:	e7fd      	b.n	80005d8 <MemManage_Handler+0x4>

080005dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <BusFault_Handler+0x4>

080005e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <UsageFault_Handler+0x4>

080005ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bc80      	pop	{r7}
 80005f6:	4770      	bx	lr

080005f8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80005fc:	4802      	ldr	r0, [pc, #8]	@ (8000608 <TIM1_UP_IRQHandler+0x10>)
 80005fe:	f001 f891 	bl	8001724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	200000d4 	.word	0x200000d4

0800060c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000610:	4802      	ldr	r0, [pc, #8]	@ (800061c <USART1_IRQHandler+0x10>)
 8000612:	f001 faf7 	bl	8001c04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000007c 	.word	0x2000007c

08000620 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000624:	bf00      	nop
 8000626:	46bd      	mov	sp, r7
 8000628:	bc80      	pop	{r7}
 800062a:	4770      	bx	lr

0800062c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800062c:	f7ff fff8 	bl	8000620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000630:	480b      	ldr	r0, [pc, #44]	@ (8000660 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000632:	490c      	ldr	r1, [pc, #48]	@ (8000664 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000634:	4a0c      	ldr	r2, [pc, #48]	@ (8000668 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000638:	e002      	b.n	8000640 <LoopCopyDataInit>

0800063a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800063a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800063c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063e:	3304      	adds	r3, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000644:	d3f9      	bcc.n	800063a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000646:	4a09      	ldr	r2, [pc, #36]	@ (800066c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000648:	4c09      	ldr	r4, [pc, #36]	@ (8000670 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800064c:	e001      	b.n	8000652 <LoopFillZerobss>

0800064e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000650:	3204      	adds	r2, #4

08000652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000654:	d3fb      	bcc.n	800064e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000656:	f004 ff6d 	bl	8005534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800065a:	f7ff fd81 	bl	8000160 <main>
  bx lr
 800065e:	4770      	bx	lr
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000668:	080057ac 	.word	0x080057ac
  ldr r2, =_sbss
 800066c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000670:	20001c48 	.word	0x20001c48

08000674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC1_2_IRQHandler>
	...

08000678 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800067c:	4b08      	ldr	r3, [pc, #32]	@ (80006a0 <HAL_Init+0x28>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a07      	ldr	r2, [pc, #28]	@ (80006a0 <HAL_Init+0x28>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000688:	2003      	movs	r0, #3
 800068a:	f000 f8f5 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800068e:	200f      	movs	r0, #15
 8000690:	f7ff ff26 	bl	80004e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000694:	f7ff fe98 	bl	80003c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40022000 	.word	0x40022000

080006a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <HAL_IncTick+0x1c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <HAL_IncTick+0x20>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	4a03      	ldr	r2, [pc, #12]	@ (80006c4 <HAL_IncTick+0x20>)
 80006b6:	6013      	str	r3, [r2, #0]
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	20000008 	.word	0x20000008
 80006c4:	2000011c 	.word	0x2000011c

080006c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return uwTick;
 80006cc:	4b02      	ldr	r3, [pc, #8]	@ (80006d8 <HAL_GetTick+0x10>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	2000011c 	.word	0x2000011c

080006dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006e4:	f7ff fff0 	bl	80006c8 <HAL_GetTick>
 80006e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006f4:	d005      	beq.n	8000702 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000720 <HAL_Delay+0x44>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	461a      	mov	r2, r3
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	4413      	add	r3, r2
 8000700:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000702:	bf00      	nop
 8000704:	f7ff ffe0 	bl	80006c8 <HAL_GetTick>
 8000708:	4602      	mov	r2, r0
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	1ad3      	subs	r3, r2, r3
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	429a      	cmp	r2, r3
 8000712:	d8f7      	bhi.n	8000704 <HAL_Delay+0x28>
  {
  }
}
 8000714:	bf00      	nop
 8000716:	bf00      	nop
 8000718:	3710      	adds	r7, #16
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000008 	.word	0x20000008

08000724 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000736:	68db      	ldr	r3, [r3, #12]
 8000738:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800073a:	68ba      	ldr	r2, [r7, #8]
 800073c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000740:	4013      	ands	r3, r2
 8000742:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800074c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000756:	4a04      	ldr	r2, [pc, #16]	@ (8000768 <__NVIC_SetPriorityGrouping+0x44>)
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	60d3      	str	r3, [r2, #12]
}
 800075c:	bf00      	nop
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000ed00 	.word	0xe000ed00

0800076c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000770:	4b04      	ldr	r3, [pc, #16]	@ (8000784 <__NVIC_GetPriorityGrouping+0x18>)
 8000772:	68db      	ldr	r3, [r3, #12]
 8000774:	0a1b      	lsrs	r3, r3, #8
 8000776:	f003 0307 	and.w	r3, r3, #7
}
 800077a:	4618      	mov	r0, r3
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	2b00      	cmp	r3, #0
 8000798:	db0b      	blt.n	80007b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	f003 021f 	and.w	r2, r3, #31
 80007a0:	4906      	ldr	r1, [pc, #24]	@ (80007bc <__NVIC_EnableIRQ+0x34>)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	095b      	lsrs	r3, r3, #5
 80007a8:	2001      	movs	r0, #1
 80007aa:	fa00 f202 	lsl.w	r2, r0, r2
 80007ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr
 80007bc:	e000e100 	.word	0xe000e100

080007c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	6039      	str	r1, [r7, #0]
 80007ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	db0a      	blt.n	80007ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	490c      	ldr	r1, [pc, #48]	@ (800080c <__NVIC_SetPriority+0x4c>)
 80007da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007de:	0112      	lsls	r2, r2, #4
 80007e0:	b2d2      	uxtb	r2, r2
 80007e2:	440b      	add	r3, r1
 80007e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e8:	e00a      	b.n	8000800 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4908      	ldr	r1, [pc, #32]	@ (8000810 <__NVIC_SetPriority+0x50>)
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	f003 030f 	and.w	r3, r3, #15
 80007f6:	3b04      	subs	r3, #4
 80007f8:	0112      	lsls	r2, r2, #4
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	440b      	add	r3, r1
 80007fe:	761a      	strb	r2, [r3, #24]
}
 8000800:	bf00      	nop
 8000802:	370c      	adds	r7, #12
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	e000e100 	.word	0xe000e100
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000814:	b480      	push	{r7}
 8000816:	b089      	sub	sp, #36	@ 0x24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	f003 0307 	and.w	r3, r3, #7
 8000826:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000828:	69fb      	ldr	r3, [r7, #28]
 800082a:	f1c3 0307 	rsb	r3, r3, #7
 800082e:	2b04      	cmp	r3, #4
 8000830:	bf28      	it	cs
 8000832:	2304      	movcs	r3, #4
 8000834:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3304      	adds	r3, #4
 800083a:	2b06      	cmp	r3, #6
 800083c:	d902      	bls.n	8000844 <NVIC_EncodePriority+0x30>
 800083e:	69fb      	ldr	r3, [r7, #28]
 8000840:	3b03      	subs	r3, #3
 8000842:	e000      	b.n	8000846 <NVIC_EncodePriority+0x32>
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000848:	f04f 32ff 	mov.w	r2, #4294967295
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	fa02 f303 	lsl.w	r3, r2, r3
 8000852:	43da      	mvns	r2, r3
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	401a      	ands	r2, r3
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800085c:	f04f 31ff 	mov.w	r1, #4294967295
 8000860:	697b      	ldr	r3, [r7, #20]
 8000862:	fa01 f303 	lsl.w	r3, r1, r3
 8000866:	43d9      	mvns	r1, r3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800086c:	4313      	orrs	r3, r2
         );
}
 800086e:	4618      	mov	r0, r3
 8000870:	3724      	adds	r7, #36	@ 0x24
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff4f 	bl	8000724 <__NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff64 	bl	800076c <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ffb2 	bl	8000814 <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff81 	bl	80007c0 <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff57 	bl	8000788 <__NVIC_EnableIRQ>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b085      	sub	sp, #20
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d008      	beq.n	800090c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2204      	movs	r2, #4
 80008fe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2200      	movs	r2, #0
 8000904:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	e020      	b.n	800094e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f022 020e 	bic.w	r2, r2, #14
 800091a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	681a      	ldr	r2, [r3, #0]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f022 0201 	bic.w	r2, r2, #1
 800092a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000934:	2101      	movs	r1, #1
 8000936:	fa01 f202 	lsl.w	r2, r1, r2
 800093a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2201      	movs	r2, #1
 8000940:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800094c:	7bfb      	ldrb	r3, [r7, #15]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3714      	adds	r7, #20
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr

08000958 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000960:	2300      	movs	r3, #0
 8000962:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b02      	cmp	r3, #2
 800096e:	d005      	beq.n	800097c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2204      	movs	r2, #4
 8000974:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	73fb      	strb	r3, [r7, #15]
 800097a:	e051      	b.n	8000a20 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f022 020e 	bic.w	r2, r2, #14
 800098a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f022 0201 	bic.w	r2, r2, #1
 800099a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a22      	ldr	r2, [pc, #136]	@ (8000a2c <HAL_DMA_Abort_IT+0xd4>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d029      	beq.n	80009fa <HAL_DMA_Abort_IT+0xa2>
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4a21      	ldr	r2, [pc, #132]	@ (8000a30 <HAL_DMA_Abort_IT+0xd8>)
 80009ac:	4293      	cmp	r3, r2
 80009ae:	d022      	beq.n	80009f6 <HAL_DMA_Abort_IT+0x9e>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000a34 <HAL_DMA_Abort_IT+0xdc>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d01a      	beq.n	80009f0 <HAL_DMA_Abort_IT+0x98>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a1e      	ldr	r2, [pc, #120]	@ (8000a38 <HAL_DMA_Abort_IT+0xe0>)
 80009c0:	4293      	cmp	r3, r2
 80009c2:	d012      	beq.n	80009ea <HAL_DMA_Abort_IT+0x92>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a3c <HAL_DMA_Abort_IT+0xe4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d00a      	beq.n	80009e4 <HAL_DMA_Abort_IT+0x8c>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000a40 <HAL_DMA_Abort_IT+0xe8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d102      	bne.n	80009de <HAL_DMA_Abort_IT+0x86>
 80009d8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80009dc:	e00e      	b.n	80009fc <HAL_DMA_Abort_IT+0xa4>
 80009de:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80009e2:	e00b      	b.n	80009fc <HAL_DMA_Abort_IT+0xa4>
 80009e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e8:	e008      	b.n	80009fc <HAL_DMA_Abort_IT+0xa4>
 80009ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ee:	e005      	b.n	80009fc <HAL_DMA_Abort_IT+0xa4>
 80009f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009f4:	e002      	b.n	80009fc <HAL_DMA_Abort_IT+0xa4>
 80009f6:	2310      	movs	r3, #16
 80009f8:	e000      	b.n	80009fc <HAL_DMA_Abort_IT+0xa4>
 80009fa:	2301      	movs	r3, #1
 80009fc:	4a11      	ldr	r2, [pc, #68]	@ (8000a44 <HAL_DMA_Abort_IT+0xec>)
 80009fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2201      	movs	r2, #1
 8000a04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	4798      	blx	r3
    } 
  }
  return status;
 8000a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3710      	adds	r7, #16
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40020008 	.word	0x40020008
 8000a30:	4002001c 	.word	0x4002001c
 8000a34:	40020030 	.word	0x40020030
 8000a38:	40020044 	.word	0x40020044
 8000a3c:	40020058 	.word	0x40020058
 8000a40:	4002006c 	.word	0x4002006c
 8000a44:	40020000 	.word	0x40020000

08000a48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b08b      	sub	sp, #44	@ 0x2c
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a56:	2300      	movs	r3, #0
 8000a58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5a:	e169      	b.n	8000d30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	69fa      	ldr	r2, [r7, #28]
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	f040 8158 	bne.w	8000d2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ce8 <HAL_GPIO_Init+0x2a0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d05e      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a84:	4a98      	ldr	r2, [pc, #608]	@ (8000ce8 <HAL_GPIO_Init+0x2a0>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d875      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000a8a:	4a98      	ldr	r2, [pc, #608]	@ (8000cec <HAL_GPIO_Init+0x2a4>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d058      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a90:	4a96      	ldr	r2, [pc, #600]	@ (8000cec <HAL_GPIO_Init+0x2a4>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d86f      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000a96:	4a96      	ldr	r2, [pc, #600]	@ (8000cf0 <HAL_GPIO_Init+0x2a8>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d052      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000a9c:	4a94      	ldr	r2, [pc, #592]	@ (8000cf0 <HAL_GPIO_Init+0x2a8>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	d869      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aa2:	4a94      	ldr	r2, [pc, #592]	@ (8000cf4 <HAL_GPIO_Init+0x2ac>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d04c      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000aa8:	4a92      	ldr	r2, [pc, #584]	@ (8000cf4 <HAL_GPIO_Init+0x2ac>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d863      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aae:	4a92      	ldr	r2, [pc, #584]	@ (8000cf8 <HAL_GPIO_Init+0x2b0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d046      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
 8000ab4:	4a90      	ldr	r2, [pc, #576]	@ (8000cf8 <HAL_GPIO_Init+0x2b0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d85d      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000aba:	2b12      	cmp	r3, #18
 8000abc:	d82a      	bhi.n	8000b14 <HAL_GPIO_Init+0xcc>
 8000abe:	2b12      	cmp	r3, #18
 8000ac0:	d859      	bhi.n	8000b76 <HAL_GPIO_Init+0x12e>
 8000ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac8 <HAL_GPIO_Init+0x80>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	08000b43 	.word	0x08000b43
 8000acc:	08000b1d 	.word	0x08000b1d
 8000ad0:	08000b2f 	.word	0x08000b2f
 8000ad4:	08000b71 	.word	0x08000b71
 8000ad8:	08000b77 	.word	0x08000b77
 8000adc:	08000b77 	.word	0x08000b77
 8000ae0:	08000b77 	.word	0x08000b77
 8000ae4:	08000b77 	.word	0x08000b77
 8000ae8:	08000b77 	.word	0x08000b77
 8000aec:	08000b77 	.word	0x08000b77
 8000af0:	08000b77 	.word	0x08000b77
 8000af4:	08000b77 	.word	0x08000b77
 8000af8:	08000b77 	.word	0x08000b77
 8000afc:	08000b77 	.word	0x08000b77
 8000b00:	08000b77 	.word	0x08000b77
 8000b04:	08000b77 	.word	0x08000b77
 8000b08:	08000b77 	.word	0x08000b77
 8000b0c:	08000b25 	.word	0x08000b25
 8000b10:	08000b39 	.word	0x08000b39
 8000b14:	4a79      	ldr	r2, [pc, #484]	@ (8000cfc <HAL_GPIO_Init+0x2b4>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d013      	beq.n	8000b42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b1a:	e02c      	b.n	8000b76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	623b      	str	r3, [r7, #32]
          break;
 8000b22:	e029      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	3304      	adds	r3, #4
 8000b2a:	623b      	str	r3, [r7, #32]
          break;
 8000b2c:	e024      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	3308      	adds	r3, #8
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e01f      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	330c      	adds	r3, #12
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e01a      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d102      	bne.n	8000b50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b4a:	2304      	movs	r3, #4
 8000b4c:	623b      	str	r3, [r7, #32]
          break;
 8000b4e:	e013      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d105      	bne.n	8000b64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	69fa      	ldr	r2, [r7, #28]
 8000b60:	611a      	str	r2, [r3, #16]
          break;
 8000b62:	e009      	b.n	8000b78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b64:	2308      	movs	r3, #8
 8000b66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	615a      	str	r2, [r3, #20]
          break;
 8000b6e:	e003      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
          break;
 8000b74:	e000      	b.n	8000b78 <HAL_GPIO_Init+0x130>
          break;
 8000b76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b78:	69bb      	ldr	r3, [r7, #24]
 8000b7a:	2bff      	cmp	r3, #255	@ 0xff
 8000b7c:	d801      	bhi.n	8000b82 <HAL_GPIO_Init+0x13a>
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	e001      	b.n	8000b86 <HAL_GPIO_Init+0x13e>
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	3304      	adds	r3, #4
 8000b86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	2bff      	cmp	r3, #255	@ 0xff
 8000b8c:	d802      	bhi.n	8000b94 <HAL_GPIO_Init+0x14c>
 8000b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	e002      	b.n	8000b9a <HAL_GPIO_Init+0x152>
 8000b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b96:	3b08      	subs	r3, #8
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	681a      	ldr	r2, [r3, #0]
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	693b      	ldr	r3, [r7, #16]
 8000ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	401a      	ands	r2, r3
 8000bac:	6a39      	ldr	r1, [r7, #32]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	431a      	orrs	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f000 80b1 	beq.w	8000d2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8000d00 <HAL_GPIO_Init+0x2b8>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a4c      	ldr	r2, [pc, #304]	@ (8000d00 <HAL_GPIO_Init+0x2b8>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b4a      	ldr	r3, [pc, #296]	@ (8000d00 <HAL_GPIO_Init+0x2b8>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000be0:	4a48      	ldr	r2, [pc, #288]	@ (8000d04 <HAL_GPIO_Init+0x2bc>)
 8000be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be4:	089b      	lsrs	r3, r3, #2
 8000be6:	3302      	adds	r3, #2
 8000be8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	220f      	movs	r2, #15
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	4013      	ands	r3, r2
 8000c02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a40      	ldr	r2, [pc, #256]	@ (8000d08 <HAL_GPIO_Init+0x2c0>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d013      	beq.n	8000c34 <HAL_GPIO_Init+0x1ec>
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d0c <HAL_GPIO_Init+0x2c4>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d00d      	beq.n	8000c30 <HAL_GPIO_Init+0x1e8>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4a3e      	ldr	r2, [pc, #248]	@ (8000d10 <HAL_GPIO_Init+0x2c8>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d007      	beq.n	8000c2c <HAL_GPIO_Init+0x1e4>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d14 <HAL_GPIO_Init+0x2cc>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d101      	bne.n	8000c28 <HAL_GPIO_Init+0x1e0>
 8000c24:	2303      	movs	r3, #3
 8000c26:	e006      	b.n	8000c36 <HAL_GPIO_Init+0x1ee>
 8000c28:	2304      	movs	r3, #4
 8000c2a:	e004      	b.n	8000c36 <HAL_GPIO_Init+0x1ee>
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	e002      	b.n	8000c36 <HAL_GPIO_Init+0x1ee>
 8000c30:	2301      	movs	r3, #1
 8000c32:	e000      	b.n	8000c36 <HAL_GPIO_Init+0x1ee>
 8000c34:	2300      	movs	r3, #0
 8000c36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c38:	f002 0203 	and.w	r2, r2, #3
 8000c3c:	0092      	lsls	r2, r2, #2
 8000c3e:	4093      	lsls	r3, r2
 8000c40:	68fa      	ldr	r2, [r7, #12]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c46:	492f      	ldr	r1, [pc, #188]	@ (8000d04 <HAL_GPIO_Init+0x2bc>)
 8000c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4a:	089b      	lsrs	r3, r3, #2
 8000c4c:	3302      	adds	r3, #2
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d006      	beq.n	8000c6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c60:	4b2d      	ldr	r3, [pc, #180]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c62:	689a      	ldr	r2, [r3, #8]
 8000c64:	492c      	ldr	r1, [pc, #176]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	608b      	str	r3, [r1, #8]
 8000c6c:	e006      	b.n	8000c7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	4928      	ldr	r1, [pc, #160]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c78:	4013      	ands	r3, r2
 8000c7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d006      	beq.n	8000c96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c88:	4b23      	ldr	r3, [pc, #140]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c8a:	68da      	ldr	r2, [r3, #12]
 8000c8c:	4922      	ldr	r1, [pc, #136]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60cb      	str	r3, [r1, #12]
 8000c94:	e006      	b.n	8000ca4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c96:	4b20      	ldr	r3, [pc, #128]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000c98:	68da      	ldr	r2, [r3, #12]
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	491e      	ldr	r1, [pc, #120]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d006      	beq.n	8000cbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cb0:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cb2:	685a      	ldr	r2, [r3, #4]
 8000cb4:	4918      	ldr	r1, [pc, #96]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	604b      	str	r3, [r1, #4]
 8000cbc:	e006      	b.n	8000ccc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cbe:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cc0:	685a      	ldr	r2, [r3, #4]
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	43db      	mvns	r3, r3
 8000cc6:	4914      	ldr	r1, [pc, #80]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	4013      	ands	r3, r2
 8000cca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d021      	beq.n	8000d1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	490e      	ldr	r1, [pc, #56]	@ (8000d18 <HAL_GPIO_Init+0x2d0>)
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	600b      	str	r3, [r1, #0]
 8000ce4:	e021      	b.n	8000d2a <HAL_GPIO_Init+0x2e2>
 8000ce6:	bf00      	nop
 8000ce8:	10320000 	.word	0x10320000
 8000cec:	10310000 	.word	0x10310000
 8000cf0:	10220000 	.word	0x10220000
 8000cf4:	10210000 	.word	0x10210000
 8000cf8:	10120000 	.word	0x10120000
 8000cfc:	10110000 	.word	0x10110000
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40010000 	.word	0x40010000
 8000d08:	40010800 	.word	0x40010800
 8000d0c:	40010c00 	.word	0x40010c00
 8000d10:	40011000 	.word	0x40011000
 8000d14:	40011400 	.word	0x40011400
 8000d18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <HAL_GPIO_Init+0x304>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	43db      	mvns	r3, r3
 8000d24:	4909      	ldr	r1, [pc, #36]	@ (8000d4c <HAL_GPIO_Init+0x304>)
 8000d26:	4013      	ands	r3, r2
 8000d28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d36:	fa22 f303 	lsr.w	r3, r2, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f47f ae8e 	bne.w	8000a5c <HAL_GPIO_Init+0x14>
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	372c      	adds	r7, #44	@ 0x2c
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	40010400 	.word	0x40010400

08000d50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d101      	bne.n	8000d62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e272      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 8087 	beq.w	8000e7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d70:	4b92      	ldr	r3, [pc, #584]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d00c      	beq.n	8000d96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d7c:	4b8f      	ldr	r3, [pc, #572]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 030c 	and.w	r3, r3, #12
 8000d84:	2b08      	cmp	r3, #8
 8000d86:	d112      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
 8000d88:	4b8c      	ldr	r3, [pc, #560]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d94:	d10b      	bne.n	8000dae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d96:	4b89      	ldr	r3, [pc, #548]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d06c      	beq.n	8000e7c <HAL_RCC_OscConfig+0x12c>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d168      	bne.n	8000e7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e24c      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000db6:	d106      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x76>
 8000db8:	4b80      	ldr	r3, [pc, #512]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a7f      	ldr	r2, [pc, #508]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	e02e      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d10c      	bne.n	8000de8 <HAL_RCC_OscConfig+0x98>
 8000dce:	4b7b      	ldr	r3, [pc, #492]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a7a      	ldr	r2, [pc, #488]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	4b78      	ldr	r3, [pc, #480]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a77      	ldr	r2, [pc, #476]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000de0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e01d      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000df0:	d10c      	bne.n	8000e0c <HAL_RCC_OscConfig+0xbc>
 8000df2:	4b72      	ldr	r3, [pc, #456]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a71      	ldr	r2, [pc, #452]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a6e      	ldr	r2, [pc, #440]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e08:	6013      	str	r3, [r2, #0]
 8000e0a:	e00b      	b.n	8000e24 <HAL_RCC_OscConfig+0xd4>
 8000e0c:	4b6b      	ldr	r3, [pc, #428]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a6a      	ldr	r2, [pc, #424]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	4b68      	ldr	r3, [pc, #416]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a67      	ldr	r2, [pc, #412]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d013      	beq.n	8000e54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e2c:	f7ff fc4c 	bl	80006c8 <HAL_GetTick>
 8000e30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e32:	e008      	b.n	8000e46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e34:	f7ff fc48 	bl	80006c8 <HAL_GetTick>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	2b64      	cmp	r3, #100	@ 0x64
 8000e40:	d901      	bls.n	8000e46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e200      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e46:	4b5d      	ldr	r3, [pc, #372]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d0f0      	beq.n	8000e34 <HAL_RCC_OscConfig+0xe4>
 8000e52:	e014      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fc38 	bl	80006c8 <HAL_GetTick>
 8000e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e5a:	e008      	b.n	8000e6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e5c:	f7ff fc34 	bl	80006c8 <HAL_GetTick>
 8000e60:	4602      	mov	r2, r0
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	2b64      	cmp	r3, #100	@ 0x64
 8000e68:	d901      	bls.n	8000e6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	e1ec      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e6e:	4b53      	ldr	r3, [pc, #332]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d1f0      	bne.n	8000e5c <HAL_RCC_OscConfig+0x10c>
 8000e7a:	e000      	b.n	8000e7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0302 	and.w	r3, r3, #2
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d063      	beq.n	8000f52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e8a:	4b4c      	ldr	r3, [pc, #304]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d00b      	beq.n	8000eae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e96:	4b49      	ldr	r3, [pc, #292]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f003 030c 	and.w	r3, r3, #12
 8000e9e:	2b08      	cmp	r3, #8
 8000ea0:	d11c      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
 8000ea2:	4b46      	ldr	r3, [pc, #280]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d116      	bne.n	8000edc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eae:	4b43      	ldr	r3, [pc, #268]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f003 0302 	and.w	r3, r3, #2
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d005      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	691b      	ldr	r3, [r3, #16]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d001      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e1c0      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	695b      	ldr	r3, [r3, #20]
 8000ed2:	00db      	lsls	r3, r3, #3
 8000ed4:	4939      	ldr	r1, [pc, #228]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	e03a      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d020      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ee4:	4b36      	ldr	r3, [pc, #216]	@ (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eea:	f7ff fbed 	bl	80006c8 <HAL_GetTick>
 8000eee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fbe9 	bl	80006c8 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e1a1      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f04:	4b2d      	ldr	r3, [pc, #180]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f0      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f10:	4b2a      	ldr	r3, [pc, #168]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4927      	ldr	r1, [pc, #156]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f20:	4313      	orrs	r3, r2
 8000f22:	600b      	str	r3, [r1, #0]
 8000f24:	e015      	b.n	8000f52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f26:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <HAL_RCC_OscConfig+0x270>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fbcc 	bl	80006c8 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f34:	f7ff fbc8 	bl	80006c8 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e180      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d03a      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	699b      	ldr	r3, [r3, #24]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d019      	beq.n	8000f9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f66:	4b17      	ldr	r3, [pc, #92]	@ (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f6c:	f7ff fbac 	bl	80006c8 <HAL_GetTick>
 8000f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f72:	e008      	b.n	8000f86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f74:	f7ff fba8 	bl	80006c8 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d901      	bls.n	8000f86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f82:	2303      	movs	r3, #3
 8000f84:	e160      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_RCC_OscConfig+0x26c>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d0f0      	beq.n	8000f74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f92:	2001      	movs	r0, #1
 8000f94:	f000 fafe 	bl	8001594 <RCC_Delay>
 8000f98:	e01c      	b.n	8000fd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <HAL_RCC_OscConfig+0x274>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fb92 	bl	80006c8 <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fa6:	e00f      	b.n	8000fc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa8:	f7ff fb8e 	bl	80006c8 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d908      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e146      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	42420000 	.word	0x42420000
 8000fc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fc8:	4b92      	ldr	r3, [pc, #584]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fcc:	f003 0302 	and.w	r3, r3, #2
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e9      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80a6 	beq.w	800112e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fe6:	4b8b      	ldr	r3, [pc, #556]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d10d      	bne.n	800100e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b88      	ldr	r3, [pc, #544]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	4a87      	ldr	r2, [pc, #540]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	61d3      	str	r3, [r2, #28]
 8000ffe:	4b85      	ldr	r3, [pc, #532]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800100a:	2301      	movs	r3, #1
 800100c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800100e:	4b82      	ldr	r3, [pc, #520]	@ (8001218 <HAL_RCC_OscConfig+0x4c8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001016:	2b00      	cmp	r3, #0
 8001018:	d118      	bne.n	800104c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800101a:	4b7f      	ldr	r3, [pc, #508]	@ (8001218 <HAL_RCC_OscConfig+0x4c8>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a7e      	ldr	r2, [pc, #504]	@ (8001218 <HAL_RCC_OscConfig+0x4c8>)
 8001020:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001024:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001026:	f7ff fb4f 	bl	80006c8 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800102e:	f7ff fb4b 	bl	80006c8 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b64      	cmp	r3, #100	@ 0x64
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e103      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001040:	4b75      	ldr	r3, [pc, #468]	@ (8001218 <HAL_RCC_OscConfig+0x4c8>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d106      	bne.n	8001062 <HAL_RCC_OscConfig+0x312>
 8001054:	4b6f      	ldr	r3, [pc, #444]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	4a6e      	ldr	r2, [pc, #440]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6213      	str	r3, [r2, #32]
 8001060:	e02d      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x334>
 800106a:	4b6a      	ldr	r3, [pc, #424]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a69      	ldr	r2, [pc, #420]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4b67      	ldr	r3, [pc, #412]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a66      	ldr	r2, [pc, #408]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800107c:	f023 0304 	bic.w	r3, r3, #4
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	e01c      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b05      	cmp	r3, #5
 800108a:	d10c      	bne.n	80010a6 <HAL_RCC_OscConfig+0x356>
 800108c:	4b61      	ldr	r3, [pc, #388]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a60      	ldr	r2, [pc, #384]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	f043 0304 	orr.w	r3, r3, #4
 8001096:	6213      	str	r3, [r2, #32]
 8001098:	4b5e      	ldr	r3, [pc, #376]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800109a:	6a1b      	ldr	r3, [r3, #32]
 800109c:	4a5d      	ldr	r2, [pc, #372]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6213      	str	r3, [r2, #32]
 80010a4:	e00b      	b.n	80010be <HAL_RCC_OscConfig+0x36e>
 80010a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 0301 	bic.w	r3, r3, #1
 80010b0:	6213      	str	r3, [r2, #32]
 80010b2:	4b58      	ldr	r3, [pc, #352]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a57      	ldr	r2, [pc, #348]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	f023 0304 	bic.w	r3, r3, #4
 80010bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d015      	beq.n	80010f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c6:	f7ff faff 	bl	80006c8 <HAL_GetTick>
 80010ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010cc:	e00a      	b.n	80010e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ce:	f7ff fafb 	bl	80006c8 <HAL_GetTick>
 80010d2:	4602      	mov	r2, r0
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	1ad3      	subs	r3, r2, r3
 80010d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010dc:	4293      	cmp	r3, r2
 80010de:	d901      	bls.n	80010e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e0b1      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	f003 0302 	and.w	r3, r3, #2
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0ee      	beq.n	80010ce <HAL_RCC_OscConfig+0x37e>
 80010f0:	e014      	b.n	800111c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fae9 	bl	80006c8 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fae5 	bl	80006c8 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e09b      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001110:	4b40      	ldr	r3, [pc, #256]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1ee      	bne.n	80010fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d105      	bne.n	800112e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001122:	4b3c      	ldr	r3, [pc, #240]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	4a3b      	ldr	r2, [pc, #236]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800112c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69db      	ldr	r3, [r3, #28]
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 8087 	beq.w	8001246 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001138:	4b36      	ldr	r3, [pc, #216]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b08      	cmp	r3, #8
 8001142:	d061      	beq.n	8001208 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69db      	ldr	r3, [r3, #28]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d146      	bne.n	80011da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800114c:	4b33      	ldr	r3, [pc, #204]	@ (800121c <HAL_RCC_OscConfig+0x4cc>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff fab9 	bl	80006c8 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115a:	f7ff fab5 	bl	80006c8 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e06d      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800116c:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1f0      	bne.n	800115a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001180:	d108      	bne.n	8001194 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001182:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	4921      	ldr	r1, [pc, #132]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001194:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6a19      	ldr	r1, [r3, #32]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a4:	430b      	orrs	r3, r1
 80011a6:	491b      	ldr	r1, [pc, #108]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80011a8:	4313      	orrs	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <HAL_RCC_OscConfig+0x4cc>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fa89 	bl	80006c8 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011b8:	e008      	b.n	80011cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ba:	f7ff fa85 	bl	80006c8 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d901      	bls.n	80011cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011c8:	2303      	movs	r3, #3
 80011ca:	e03d      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011cc:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0f0      	beq.n	80011ba <HAL_RCC_OscConfig+0x46a>
 80011d8:	e035      	b.n	8001246 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <HAL_RCC_OscConfig+0x4cc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fa72 	bl	80006c8 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e8:	f7ff fa6e 	bl	80006c8 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e026      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_RCC_OscConfig+0x4c4>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f0      	bne.n	80011e8 <HAL_RCC_OscConfig+0x498>
 8001206:	e01e      	b.n	8001246 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d107      	bne.n	8001220 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e019      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
 8001214:	40021000 	.word	0x40021000
 8001218:	40007000 	.word	0x40007000
 800121c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001220:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <HAL_RCC_OscConfig+0x500>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a1b      	ldr	r3, [r3, #32]
 8001230:	429a      	cmp	r2, r3
 8001232:	d106      	bne.n	8001242 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800123e:	429a      	cmp	r2, r3
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e000      	b.n	8001248 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001246:	2300      	movs	r3, #0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3718      	adds	r7, #24
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40021000 	.word	0x40021000

08001254 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0d0      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001268:	4b6a      	ldr	r3, [pc, #424]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d910      	bls.n	8001298 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b67      	ldr	r3, [pc, #412]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 0207 	bic.w	r2, r3, #7
 800127e:	4965      	ldr	r1, [pc, #404]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	4313      	orrs	r3, r2
 8001284:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001286:	4b63      	ldr	r3, [pc, #396]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e0b8      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d005      	beq.n	80012bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012b0:	4b59      	ldr	r3, [pc, #356]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4a58      	ldr	r2, [pc, #352]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d005      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c8:	4b53      	ldr	r3, [pc, #332]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	4a52      	ldr	r2, [pc, #328]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012ce:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80012d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012d4:	4b50      	ldr	r3, [pc, #320]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	494d      	ldr	r1, [pc, #308]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d040      	beq.n	8001374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d107      	bne.n	800130a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fa:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d115      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e07f      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b41      	ldr	r3, [pc, #260]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e073      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	4b3d      	ldr	r3, [pc, #244]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e06b      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001332:	4b39      	ldr	r3, [pc, #228]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f023 0203 	bic.w	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4936      	ldr	r1, [pc, #216]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001344:	f7ff f9c0 	bl	80006c8 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134a:	e00a      	b.n	8001362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	f7ff f9bc 	bl	80006c8 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e053      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	4b2d      	ldr	r3, [pc, #180]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 020c 	and.w	r2, r3, #12
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	429a      	cmp	r2, r3
 8001372:	d1eb      	bne.n	800134c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d210      	bcs.n	80013a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f023 0207 	bic.w	r2, r3, #7
 800138a:	4922      	ldr	r1, [pc, #136]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	4313      	orrs	r3, r2
 8001390:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001392:	4b20      	ldr	r3, [pc, #128]	@ (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	683a      	ldr	r2, [r7, #0]
 800139c:	429a      	cmp	r2, r3
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e032      	b.n	800140a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d008      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013b0:	4b19      	ldr	r3, [pc, #100]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4916      	ldr	r1, [pc, #88]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013ce:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	490e      	ldr	r1, [pc, #56]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013e2:	f000 f821 	bl	8001428 <HAL_RCC_GetSysClockFreq>
 80013e6:	4602      	mov	r2, r0
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	091b      	lsrs	r3, r3, #4
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	490a      	ldr	r1, [pc, #40]	@ (800141c <HAL_RCC_ClockConfig+0x1c8>)
 80013f4:	5ccb      	ldrb	r3, [r1, r3]
 80013f6:	fa22 f303 	lsr.w	r3, r2, r3
 80013fa:	4a09      	ldr	r2, [pc, #36]	@ (8001420 <HAL_RCC_ClockConfig+0x1cc>)
 80013fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013fe:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_RCC_ClockConfig+0x1d0>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f86c 	bl	80004e0 <HAL_InitTick>

  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40022000 	.word	0x40022000
 8001418:	40021000 	.word	0x40021000
 800141c:	08005770 	.word	0x08005770
 8001420:	20000000 	.word	0x20000000
 8001424:	20000004 	.word	0x20000004

08001428 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b04      	cmp	r3, #4
 8001450:	d002      	beq.n	8001458 <HAL_RCC_GetSysClockFreq+0x30>
 8001452:	2b08      	cmp	r3, #8
 8001454:	d003      	beq.n	800145e <HAL_RCC_GetSysClockFreq+0x36>
 8001456:	e027      	b.n	80014a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800145a:	613b      	str	r3, [r7, #16]
      break;
 800145c:	e027      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	0c9b      	lsrs	r3, r3, #18
 8001462:	f003 030f 	and.w	r3, r3, #15
 8001466:	4a17      	ldr	r2, [pc, #92]	@ (80014c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001468:	5cd3      	ldrb	r3, [r2, r3]
 800146a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d010      	beq.n	8001498 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <HAL_RCC_GetSysClockFreq+0x94>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	0c5b      	lsrs	r3, r3, #17
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	4a11      	ldr	r2, [pc, #68]	@ (80014c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001482:	5cd3      	ldrb	r3, [r2, r3]
 8001484:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800148a:	fb03 f202 	mul.w	r2, r3, r2
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	fbb2 f3f3 	udiv	r3, r2, r3
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	e004      	b.n	80014a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a0c      	ldr	r2, [pc, #48]	@ (80014cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800149c:	fb02 f303 	mul.w	r3, r2, r3
 80014a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	613b      	str	r3, [r7, #16]
      break;
 80014a6:	e002      	b.n	80014ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014a8:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80014aa:	613b      	str	r3, [r7, #16]
      break;
 80014ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ae:	693b      	ldr	r3, [r7, #16]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	007a1200 	.word	0x007a1200
 80014c4:	08005788 	.word	0x08005788
 80014c8:	08005798 	.word	0x08005798
 80014cc:	003d0900 	.word	0x003d0900

080014d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014d4:	4b02      	ldr	r3, [pc, #8]	@ (80014e0 <HAL_RCC_GetHCLKFreq+0x10>)
 80014d6:	681b      	ldr	r3, [r3, #0]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr
 80014e0:	20000000 	.word	0x20000000

080014e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014e8:	f7ff fff2 	bl	80014d0 <HAL_RCC_GetHCLKFreq>
 80014ec:	4602      	mov	r2, r0
 80014ee:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	0a1b      	lsrs	r3, r3, #8
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	4903      	ldr	r1, [pc, #12]	@ (8001508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014fa:	5ccb      	ldrb	r3, [r1, r3]
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	08005780 	.word	0x08005780

0800150c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001510:	f7ff ffde 	bl	80014d0 <HAL_RCC_GetHCLKFreq>
 8001514:	4602      	mov	r2, r0
 8001516:	4b05      	ldr	r3, [pc, #20]	@ (800152c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	0adb      	lsrs	r3, r3, #11
 800151c:	f003 0307 	and.w	r3, r3, #7
 8001520:	4903      	ldr	r1, [pc, #12]	@ (8001530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001522:	5ccb      	ldrb	r3, [r1, r3]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001528:	4618      	mov	r0, r3
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40021000 	.word	0x40021000
 8001530:	08005780 	.word	0x08005780

08001534 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	220f      	movs	r2, #15
 8001542:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001544:	4b11      	ldr	r3, [pc, #68]	@ (800158c <HAL_RCC_GetClockConfig+0x58>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0203 	and.w	r2, r3, #3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001550:	4b0e      	ldr	r3, [pc, #56]	@ (800158c <HAL_RCC_GetClockConfig+0x58>)
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800155c:	4b0b      	ldr	r3, [pc, #44]	@ (800158c <HAL_RCC_GetClockConfig+0x58>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001568:	4b08      	ldr	r3, [pc, #32]	@ (800158c <HAL_RCC_GetClockConfig+0x58>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	08db      	lsrs	r3, r3, #3
 800156e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_RCC_GetClockConfig+0x5c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0207 	and.w	r2, r3, #7
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40021000 	.word	0x40021000
 8001590:	40022000 	.word	0x40022000

08001594 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800159c:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <RCC_Delay+0x34>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <RCC_Delay+0x38>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	0a5b      	lsrs	r3, r3, #9
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	fb02 f303 	mul.w	r3, r2, r3
 80015ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015b0:	bf00      	nop
  }
  while (Delay --);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1e5a      	subs	r2, r3, #1
 80015b6:	60fa      	str	r2, [r7, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d1f9      	bne.n	80015b0 <RCC_Delay+0x1c>
}
 80015bc:	bf00      	nop
 80015be:	bf00      	nop
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bc80      	pop	{r7}
 80015c6:	4770      	bx	lr
 80015c8:	20000000 	.word	0x20000000
 80015cc:	10624dd3 	.word	0x10624dd3

080015d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e041      	b.n	8001666 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d106      	bne.n	80015fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 f839 	bl	800166e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2202      	movs	r2, #2
 8001600:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3304      	adds	r3, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f000 f99c 	bl	800194c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2201      	movs	r2, #1
 8001618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2201      	movs	r2, #1
 8001620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2201      	movs	r2, #1
 8001628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2201      	movs	r2, #1
 8001660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800166e:	b480      	push	{r7}
 8001670:	b083      	sub	sp, #12
 8001672:	af00      	add	r7, sp, #0
 8001674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001676:	bf00      	nop
 8001678:	370c      	adds	r7, #12
 800167a:	46bd      	mov	sp, r7
 800167c:	bc80      	pop	{r7}
 800167e:	4770      	bx	lr

08001680 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b01      	cmp	r3, #1
 8001692:	d001      	beq.n	8001698 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e03a      	b.n	800170e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2202      	movs	r2, #2
 800169c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f042 0201 	orr.w	r2, r2, #1
 80016ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a18      	ldr	r2, [pc, #96]	@ (8001718 <HAL_TIM_Base_Start_IT+0x98>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d00e      	beq.n	80016d8 <HAL_TIM_Base_Start_IT+0x58>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c2:	d009      	beq.n	80016d8 <HAL_TIM_Base_Start_IT+0x58>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a14      	ldr	r2, [pc, #80]	@ (800171c <HAL_TIM_Base_Start_IT+0x9c>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d004      	beq.n	80016d8 <HAL_TIM_Base_Start_IT+0x58>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a13      	ldr	r2, [pc, #76]	@ (8001720 <HAL_TIM_Base_Start_IT+0xa0>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d111      	bne.n	80016fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d010      	beq.n	800170c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0201 	orr.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016fa:	e007      	b.n	800170c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3714      	adds	r7, #20
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	40012c00 	.word	0x40012c00
 800171c:	40000400 	.word	0x40000400
 8001720:	40000800 	.word	0x40000800

08001724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d020      	beq.n	8001788 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d01b      	beq.n	8001788 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0202 	mvn.w	r2, #2
 8001758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f000 f8d1 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 8001774:	e005      	b.n	8001782 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f000 f8c4 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f000 f8d3 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	2b00      	cmp	r3, #0
 8001790:	d020      	beq.n	80017d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01b      	beq.n	80017d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f06f 0204 	mvn.w	r2, #4
 80017a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2202      	movs	r2, #2
 80017aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f8ab 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 80017c0:	e005      	b.n	80017ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 f89e 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f000 f8ad 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d020      	beq.n	8001820 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01b      	beq.n	8001820 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0208 	mvn.w	r2, #8
 80017f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2204      	movs	r2, #4
 80017f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 0303 	and.w	r3, r3, #3
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f885 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 800180c:	e005      	b.n	800181a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f878 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f887 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	f003 0310 	and.w	r3, r3, #16
 8001826:	2b00      	cmp	r3, #0
 8001828:	d020      	beq.n	800186c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01b      	beq.n	800186c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f06f 0210 	mvn.w	r2, #16
 800183c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2208      	movs	r2, #8
 8001842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f85f 	bl	8001916 <HAL_TIM_IC_CaptureCallback>
 8001858:	e005      	b.n	8001866 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f852 	bl	8001904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f000 f861 	bl	8001928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2200      	movs	r2, #0
 800186a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d00c      	beq.n	8001890 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d007      	beq.n	8001890 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f06f 0201 	mvn.w	r2, #1
 8001888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7fe fd84 	bl	8000398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00c      	beq.n	80018b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d007      	beq.n	80018b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80018ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f8c3 	bl	8001a3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00c      	beq.n	80018d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80018d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f000 f831 	bl	800193a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00c      	beq.n	80018fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f003 0320 	and.w	r3, r3, #32
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d007      	beq.n	80018fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0220 	mvn.w	r2, #32
 80018f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f896 	bl	8001a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a2f      	ldr	r2, [pc, #188]	@ (8001a1c <TIM_Base_SetConfig+0xd0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d00b      	beq.n	800197c <TIM_Base_SetConfig+0x30>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800196a:	d007      	beq.n	800197c <TIM_Base_SetConfig+0x30>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a2c      	ldr	r2, [pc, #176]	@ (8001a20 <TIM_Base_SetConfig+0xd4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d003      	beq.n	800197c <TIM_Base_SetConfig+0x30>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a2b      	ldr	r2, [pc, #172]	@ (8001a24 <TIM_Base_SetConfig+0xd8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d108      	bne.n	800198e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a22      	ldr	r2, [pc, #136]	@ (8001a1c <TIM_Base_SetConfig+0xd0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00b      	beq.n	80019ae <TIM_Base_SetConfig+0x62>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800199c:	d007      	beq.n	80019ae <TIM_Base_SetConfig+0x62>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a20 <TIM_Base_SetConfig+0xd4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d003      	beq.n	80019ae <TIM_Base_SetConfig+0x62>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <TIM_Base_SetConfig+0xd8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d108      	bne.n	80019c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a0d      	ldr	r2, [pc, #52]	@ (8001a1c <TIM_Base_SetConfig+0xd0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d103      	bne.n	80019f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	691a      	ldr	r2, [r3, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	691b      	ldr	r3, [r3, #16]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d005      	beq.n	8001a12 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	f023 0201 	bic.w	r2, r3, #1
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	611a      	str	r2, [r3, #16]
  }
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	40012c00 	.word	0x40012c00
 8001a20:	40000400 	.word	0x40000400
 8001a24:	40000800 	.word	0x40000800

08001a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr

08001a3a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	b083      	sub	sp, #12
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e042      	b.n	8001ae4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d106      	bne.n	8001a78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7fe fce0 	bl	8000438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2224      	movs	r2, #36	@ 0x24
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 fd63 	bl	800255c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001aa4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	695a      	ldr	r2, [r3, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ab4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	68da      	ldr	r2, [r3, #12]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ac4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2220      	movs	r2, #32
 8001ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08a      	sub	sp, #40	@ 0x28
 8001af0:	af02      	add	r7, sp, #8
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	603b      	str	r3, [r7, #0]
 8001af8:	4613      	mov	r3, r2
 8001afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b20      	cmp	r3, #32
 8001b0a:	d175      	bne.n	8001bf8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_UART_Transmit+0x2c>
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e06e      	b.n	8001bfa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2221      	movs	r2, #33	@ 0x21
 8001b26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b2a:	f7fe fdcd 	bl	80006c8 <HAL_GetTick>
 8001b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	88fa      	ldrh	r2, [r7, #6]
 8001b34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	88fa      	ldrh	r2, [r7, #6]
 8001b3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b44:	d108      	bne.n	8001b58 <HAL_UART_Transmit+0x6c>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	691b      	ldr	r3, [r3, #16]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d104      	bne.n	8001b58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	61bb      	str	r3, [r7, #24]
 8001b56:	e003      	b.n	8001b60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b60:	e02e      	b.n	8001bc0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	2180      	movs	r1, #128	@ 0x80
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f000 fb01 	bl	8002174 <UART_WaitOnFlagUntilTimeout>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e03a      	b.n	8001bfa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10b      	bne.n	8001ba2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	881b      	ldrh	r3, [r3, #0]
 8001b8e:	461a      	mov	r2, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	3302      	adds	r3, #2
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	e007      	b.n	8001bb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	781a      	ldrb	r2, [r3, #0]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1cb      	bne.n	8001b62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	9300      	str	r3, [sp, #0]
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2140      	movs	r1, #64	@ 0x40
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 facd 	bl	8002174 <UART_WaitOnFlagUntilTimeout>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2220      	movs	r2, #32
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e006      	b.n	8001bfa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e000      	b.n	8001bfa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001bf8:	2302      	movs	r3, #2
  }
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
	...

08001c04 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0ba      	sub	sp, #232	@ 0xe8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c3a:	f003 030f 	and.w	r3, r3, #15
 8001c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10f      	bne.n	8001c6a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c4e:	f003 0320 	and.w	r3, r3, #32
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_UART_IRQHandler+0x66>
 8001c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c5a:	f003 0320 	and.w	r3, r3, #32
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 fbbc 	bl	80023e0 <UART_Receive_IT>
      return;
 8001c68:	e25b      	b.n	8002122 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001c6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f000 80de 	beq.w	8001e30 <HAL_UART_IRQHandler+0x22c>
 8001c74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001c78:	f003 0301 	and.w	r3, r3, #1
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d106      	bne.n	8001c8e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c84:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80d1 	beq.w	8001e30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00b      	beq.n	8001cb2 <HAL_UART_IRQHandler+0xae>
 8001c9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d005      	beq.n	8001cb2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00b      	beq.n	8001cd6 <HAL_UART_IRQHandler+0xd2>
 8001cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cce:	f043 0202 	orr.w	r2, r3, #2
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_UART_IRQHandler+0xf6>
 8001ce2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d005      	beq.n	8001cfa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf2:	f043 0204 	orr.w	r2, r3, #4
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d011      	beq.n	8001d2a <HAL_UART_IRQHandler+0x126>
 8001d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d105      	bne.n	8001d1e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001d12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d22:	f043 0208 	orr.w	r2, r3, #8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 81f2 	beq.w	8002118 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001d38:	f003 0320 	and.w	r3, r3, #32
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d008      	beq.n	8001d52 <HAL_UART_IRQHandler+0x14e>
 8001d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001d44:	f003 0320 	and.w	r3, r3, #32
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 fb47 	bl	80023e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf14      	ite	ne
 8001d60:	2301      	movne	r3, #1
 8001d62:	2300      	moveq	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d103      	bne.n	8001d7e <HAL_UART_IRQHandler+0x17a>
 8001d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d04f      	beq.n	8001e1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fa51 	bl	8002226 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d041      	beq.n	8001e16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	3314      	adds	r3, #20
 8001d98:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001da0:	e853 3f00 	ldrex	r3, [r3]
 8001da4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001da8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3314      	adds	r3, #20
 8001dba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001dbe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001dc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001dca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8001dce:	e841 2300 	strex	r3, r2, [r1]
 8001dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8001dd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1d9      	bne.n	8001d92 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d013      	beq.n	8001e0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dea:	4a7e      	ldr	r2, [pc, #504]	@ (8001fe4 <HAL_UART_IRQHandler+0x3e0>)
 8001dec:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7fe fdb0 	bl	8000958 <HAL_DMA_Abort_IT>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d016      	beq.n	8001e2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e04:	687a      	ldr	r2, [r7, #4]
 8001e06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001e08:	4610      	mov	r0, r2
 8001e0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e0c:	e00e      	b.n	8001e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f99c 	bl	800214c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e14:	e00a      	b.n	8001e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f998 	bl	800214c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e1c:	e006      	b.n	8001e2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f994 	bl	800214c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8001e2a:	e175      	b.n	8002118 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e2c:	bf00      	nop
    return;
 8001e2e:	e173      	b.n	8002118 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	f040 814f 	bne.w	80020d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e3e:	f003 0310 	and.w	r3, r3, #16
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 8148 	beq.w	80020d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e4c:	f003 0310 	and.w	r3, r3, #16
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	f000 8141 	beq.w	80020d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	60bb      	str	r3, [r7, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	60bb      	str	r3, [r7, #8]
 8001e6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 80b6 	beq.w	8001fe8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8001e88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8145 	beq.w	800211c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001e96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	f080 813e 	bcs.w	800211c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8001ea6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	f000 8088 	beq.w	8001fc4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	330c      	adds	r3, #12
 8001eba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ebe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001ec2:	e853 3f00 	ldrex	r3, [r3]
 8001ec6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8001eca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ece:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ed2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	330c      	adds	r3, #12
 8001edc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001ee0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8001ee4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ee8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8001eec:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001ef0:	e841 2300 	strex	r3, r2, [r1]
 8001ef4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8001ef8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1d9      	bne.n	8001eb4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	3314      	adds	r3, #20
 8001f06:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f0a:	e853 3f00 	ldrex	r3, [r3]
 8001f0e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8001f10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3314      	adds	r3, #20
 8001f20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001f24:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001f28:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f2a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001f2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001f30:	e841 2300 	strex	r3, r2, [r1]
 8001f34:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8001f36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d1e1      	bne.n	8001f00 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3314      	adds	r3, #20
 8001f42:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f46:	e853 3f00 	ldrex	r3, [r3]
 8001f4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8001f4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001f52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	3314      	adds	r3, #20
 8001f5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001f60:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001f62:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f64:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8001f66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001f68:	e841 2300 	strex	r3, r2, [r1]
 8001f6c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8001f6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e3      	bne.n	8001f3c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2220      	movs	r2, #32
 8001f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	330c      	adds	r3, #12
 8001f88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f8c:	e853 3f00 	ldrex	r3, [r3]
 8001f90:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8001f92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f94:	f023 0310 	bic.w	r3, r3, #16
 8001f98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8001fa6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8001fa8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001faa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001fac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001fae:	e841 2300 	strex	r3, r2, [r1]
 8001fb2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8001fb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1e3      	bne.n	8001f82 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fc8f 	bl	80008e2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f8bf 	bl	800215e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8001fe0:	e09c      	b.n	800211c <HAL_UART_IRQHandler+0x518>
 8001fe2:	bf00      	nop
 8001fe4:	080022eb 	.word	0x080022eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 808e 	beq.w	8002120 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002008:	2b00      	cmp	r3, #0
 800200a:	f000 8089 	beq.w	8002120 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	330c      	adds	r3, #12
 8002014:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002018:	e853 3f00 	ldrex	r3, [r3]
 800201c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800201e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002020:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	330c      	adds	r3, #12
 800202e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002032:	647a      	str	r2, [r7, #68]	@ 0x44
 8002034:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002036:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002038:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800203a:	e841 2300 	strex	r3, r2, [r1]
 800203e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d1e3      	bne.n	800200e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	3314      	adds	r3, #20
 800204c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	e853 3f00 	ldrex	r3, [r3]
 8002054:	623b      	str	r3, [r7, #32]
   return(result);
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	3314      	adds	r3, #20
 8002066:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800206a:	633a      	str	r2, [r7, #48]	@ 0x30
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800206e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002070:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002072:	e841 2300 	strex	r3, r2, [r1]
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1e3      	bne.n	8002046 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	330c      	adds	r3, #12
 8002092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	e853 3f00 	ldrex	r3, [r3]
 800209a:	60fb      	str	r3, [r7, #12]
   return(result);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f023 0310 	bic.w	r3, r3, #16
 80020a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	330c      	adds	r3, #12
 80020ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80020b0:	61fa      	str	r2, [r7, #28]
 80020b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020b4:	69b9      	ldr	r1, [r7, #24]
 80020b6:	69fa      	ldr	r2, [r7, #28]
 80020b8:	e841 2300 	strex	r3, r2, [r1]
 80020bc:	617b      	str	r3, [r7, #20]
   return(result);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1e3      	bne.n	800208c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80020ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f844 	bl	800215e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80020d6:	e023      	b.n	8002120 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d009      	beq.n	80020f8 <HAL_UART_IRQHandler+0x4f4>
 80020e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f90e 	bl	8002312 <UART_Transmit_IT>
    return;
 80020f6:	e014      	b.n	8002122 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80020f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00e      	beq.n	8002122 <HAL_UART_IRQHandler+0x51e>
 8002104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002108:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210c:	2b00      	cmp	r3, #0
 800210e:	d008      	beq.n	8002122 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f94d 	bl	80023b0 <UART_EndTransmit_IT>
    return;
 8002116:	e004      	b.n	8002122 <HAL_UART_IRQHandler+0x51e>
    return;
 8002118:	bf00      	nop
 800211a:	e002      	b.n	8002122 <HAL_UART_IRQHandler+0x51e>
      return;
 800211c:	bf00      	nop
 800211e:	e000      	b.n	8002122 <HAL_UART_IRQHandler+0x51e>
      return;
 8002120:	bf00      	nop
  }
}
 8002122:	37e8      	adds	r7, #232	@ 0xe8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	bc80      	pop	{r7}
 8002138:	4770      	bx	lr

0800213a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002142:	bf00      	nop
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	bc80      	pop	{r7}
 800214a:	4770      	bx	lr

0800214c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
 8002166:	460b      	mov	r3, r1
 8002168:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	4613      	mov	r3, r2
 8002182:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002184:	e03b      	b.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218c:	d037      	beq.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800218e:	f7fe fa9b 	bl	80006c8 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	6a3a      	ldr	r2, [r7, #32]
 800219a:	429a      	cmp	r2, r3
 800219c:	d302      	bcc.n	80021a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800219e:	6a3b      	ldr	r3, [r7, #32]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e03a      	b.n	800221e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d023      	beq.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	2b80      	cmp	r3, #128	@ 0x80
 80021ba:	d020      	beq.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b40      	cmp	r3, #64	@ 0x40
 80021c0:	d01d      	beq.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0308 	and.w	r3, r3, #8
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d116      	bne.n	80021fe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	617b      	str	r3, [r7, #20]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	617b      	str	r3, [r7, #20]
 80021e4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f81d 	bl	8002226 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2208      	movs	r2, #8
 80021f0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e00f      	b.n	800221e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4013      	ands	r3, r2
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	429a      	cmp	r2, r3
 800220c:	bf0c      	ite	eq
 800220e:	2301      	moveq	r3, #1
 8002210:	2300      	movne	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	429a      	cmp	r2, r3
 800221a:	d0b4      	beq.n	8002186 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002226:	b480      	push	{r7}
 8002228:	b095      	sub	sp, #84	@ 0x54
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	330c      	adds	r3, #12
 8002234:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002238:	e853 3f00 	ldrex	r3, [r3]
 800223c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800223e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	330c      	adds	r3, #12
 800224c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800224e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002250:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002256:	e841 2300 	strex	r3, r2, [r1]
 800225a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800225c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1e5      	bne.n	800222e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	3314      	adds	r3, #20
 8002268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	e853 3f00 	ldrex	r3, [r3]
 8002270:	61fb      	str	r3, [r7, #28]
   return(result);
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	64bb      	str	r3, [r7, #72]	@ 0x48
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3314      	adds	r3, #20
 8002280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800228a:	e841 2300 	strex	r3, r2, [r1]
 800228e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1e5      	bne.n	8002262 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	2b01      	cmp	r3, #1
 800229c:	d119      	bne.n	80022d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	330c      	adds	r3, #12
 80022a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	e853 3f00 	ldrex	r3, [r3]
 80022ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f023 0310 	bic.w	r3, r3, #16
 80022b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	330c      	adds	r3, #12
 80022bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022be:	61ba      	str	r2, [r7, #24]
 80022c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c2:	6979      	ldr	r1, [r7, #20]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	e841 2300 	strex	r3, r2, [r1]
 80022ca:	613b      	str	r3, [r7, #16]
   return(result);
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1e5      	bne.n	800229e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2220      	movs	r2, #32
 80022d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80022e0:	bf00      	nop
 80022e2:	3754      	adds	r7, #84	@ 0x54
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f7ff ff21 	bl	800214c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800230a:	bf00      	nop
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b21      	cmp	r3, #33	@ 0x21
 8002324:	d13e      	bne.n	80023a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800232e:	d114      	bne.n	800235a <UART_Transmit_IT+0x48>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d110      	bne.n	800235a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a1b      	ldr	r3, [r3, #32]
 800233c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	881b      	ldrh	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800234c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	1c9a      	adds	r2, r3, #2
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	621a      	str	r2, [r3, #32]
 8002358:	e008      	b.n	800236c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	1c59      	adds	r1, r3, #1
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6211      	str	r1, [r2, #32]
 8002364:	781a      	ldrb	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002370:	b29b      	uxth	r3, r3
 8002372:	3b01      	subs	r3, #1
 8002374:	b29b      	uxth	r3, r3
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4619      	mov	r1, r3
 800237a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10f      	bne.n	80023a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800238e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68da      	ldr	r2, [r3, #12]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800239e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e000      	b.n	80023a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80023a4:	2302      	movs	r3, #2
  }
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3714      	adds	r7, #20
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr

080023b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff fea9 	bl	8002128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08c      	sub	sp, #48	@ 0x30
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b22      	cmp	r3, #34	@ 0x22
 80023f2:	f040 80ae 	bne.w	8002552 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023fe:	d117      	bne.n	8002430 <UART_Receive_IT+0x50>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d113      	bne.n	8002430 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002408:	2300      	movs	r3, #0
 800240a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002410:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	b29b      	uxth	r3, r3
 800241a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800241e:	b29a      	uxth	r2, r3
 8002420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002422:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002428:	1c9a      	adds	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	@ 0x28
 800242e:	e026      	b.n	800247e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002436:	2300      	movs	r3, #0
 8002438:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002442:	d007      	beq.n	8002454 <UART_Receive_IT+0x74>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10a      	bne.n	8002462 <UART_Receive_IT+0x82>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d106      	bne.n	8002462 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	b2da      	uxtb	r2, r3
 800245c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800245e:	701a      	strb	r2, [r3, #0]
 8002460:	e008      	b.n	8002474 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800246e:	b2da      	uxtb	r2, r3
 8002470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002472:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b29b      	uxth	r3, r3
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4619      	mov	r1, r3
 800248c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800248e:	2b00      	cmp	r3, #0
 8002490:	d15d      	bne.n	800254e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0220 	bic.w	r2, r2, #32
 80024a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68da      	ldr	r2, [r3, #12]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80024b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	695a      	ldr	r2, [r3, #20]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 0201 	bic.w	r2, r2, #1
 80024c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d135      	bne.n	8002544 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	330c      	adds	r3, #12
 80024e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	e853 3f00 	ldrex	r3, [r3]
 80024ec:	613b      	str	r3, [r7, #16]
   return(result);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	f023 0310 	bic.w	r3, r3, #16
 80024f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	330c      	adds	r3, #12
 80024fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024fe:	623a      	str	r2, [r7, #32]
 8002500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002502:	69f9      	ldr	r1, [r7, #28]
 8002504:	6a3a      	ldr	r2, [r7, #32]
 8002506:	e841 2300 	strex	r3, r2, [r1]
 800250a:	61bb      	str	r3, [r7, #24]
   return(result);
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d1e5      	bne.n	80024de <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b10      	cmp	r3, #16
 800251e:	d10a      	bne.n	8002536 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002520:	2300      	movs	r3, #0
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800253a:	4619      	mov	r1, r3
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff fe0e 	bl	800215e <HAL_UARTEx_RxEventCallback>
 8002542:	e002      	b.n	800254a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff fdf8 	bl	800213a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800254a:	2300      	movs	r3, #0
 800254c:	e002      	b.n	8002554 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e000      	b.n	8002554 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002552:	2302      	movs	r3, #2
  }
}
 8002554:	4618      	mov	r0, r3
 8002556:	3730      	adds	r7, #48	@ 0x30
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b084      	sub	sp, #16
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	68da      	ldr	r2, [r3, #12]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	430a      	orrs	r2, r1
 8002578:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	4313      	orrs	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002596:	f023 030c 	bic.w	r3, r3, #12
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	68b9      	ldr	r1, [r7, #8]
 80025a0:	430b      	orrs	r3, r1
 80025a2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a2c      	ldr	r2, [pc, #176]	@ (8002670 <UART_SetConfig+0x114>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d103      	bne.n	80025cc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025c4:	f7fe ffa2 	bl	800150c <HAL_RCC_GetPCLK2Freq>
 80025c8:	60f8      	str	r0, [r7, #12]
 80025ca:	e002      	b.n	80025d2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025cc:	f7fe ff8a 	bl	80014e4 <HAL_RCC_GetPCLK1Freq>
 80025d0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	4613      	mov	r3, r2
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	009a      	lsls	r2, r3, #2
 80025dc:	441a      	add	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e8:	4a22      	ldr	r2, [pc, #136]	@ (8002674 <UART_SetConfig+0x118>)
 80025ea:	fba2 2303 	umull	r2, r3, r2, r3
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	0119      	lsls	r1, r3, #4
 80025f2:	68fa      	ldr	r2, [r7, #12]
 80025f4:	4613      	mov	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	4413      	add	r3, r2
 80025fa:	009a      	lsls	r2, r3, #2
 80025fc:	441a      	add	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	fbb2 f2f3 	udiv	r2, r2, r3
 8002608:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <UART_SetConfig+0x118>)
 800260a:	fba3 0302 	umull	r0, r3, r3, r2
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	2064      	movs	r0, #100	@ 0x64
 8002612:	fb00 f303 	mul.w	r3, r0, r3
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	3332      	adds	r3, #50	@ 0x32
 800261c:	4a15      	ldr	r2, [pc, #84]	@ (8002674 <UART_SetConfig+0x118>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	095b      	lsrs	r3, r3, #5
 8002624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002628:	4419      	add	r1, r3
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009a      	lsls	r2, r3, #2
 8002634:	441a      	add	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002640:	4b0c      	ldr	r3, [pc, #48]	@ (8002674 <UART_SetConfig+0x118>)
 8002642:	fba3 0302 	umull	r0, r3, r3, r2
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2064      	movs	r0, #100	@ 0x64
 800264a:	fb00 f303 	mul.w	r3, r0, r3
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	3332      	adds	r3, #50	@ 0x32
 8002654:	4a07      	ldr	r2, [pc, #28]	@ (8002674 <UART_SetConfig+0x118>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	095b      	lsrs	r3, r3, #5
 800265c:	f003 020f 	and.w	r2, r3, #15
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	440a      	add	r2, r1
 8002666:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40013800 	.word	0x40013800
 8002674:	51eb851f 	.word	0x51eb851f

08002678 <__NVIC_SetPriority>:
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	6039      	str	r1, [r7, #0]
 8002682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002688:	2b00      	cmp	r3, #0
 800268a:	db0a      	blt.n	80026a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	b2da      	uxtb	r2, r3
 8002690:	490c      	ldr	r1, [pc, #48]	@ (80026c4 <__NVIC_SetPriority+0x4c>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	0112      	lsls	r2, r2, #4
 8002698:	b2d2      	uxtb	r2, r2
 800269a:	440b      	add	r3, r1
 800269c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80026a0:	e00a      	b.n	80026b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4908      	ldr	r1, [pc, #32]	@ (80026c8 <__NVIC_SetPriority+0x50>)
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	3b04      	subs	r3, #4
 80026b0:	0112      	lsls	r2, r2, #4
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	440b      	add	r3, r1
 80026b6:	761a      	strb	r2, [r3, #24]
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	e000e100 	.word	0xe000e100
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80026d0:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <SysTick_Handler+0x1c>)
 80026d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80026d4:	f001 feb8 	bl	8004448 <xTaskGetSchedulerState>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d001      	beq.n	80026e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80026de:	f002 fc5b 	bl	8004f98 <xPortSysTickHandler>
  }
}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80026f0:	2100      	movs	r1, #0
 80026f2:	f06f 0004 	mvn.w	r0, #4
 80026f6:	f7ff ffbf 	bl	8002678 <__NVIC_SetPriority>
#endif
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002706:	f3ef 8305 	mrs	r3, IPSR
 800270a:	603b      	str	r3, [r7, #0]
  return(result);
 800270c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800270e:	2b00      	cmp	r3, #0
 8002710:	d003      	beq.n	800271a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002712:	f06f 0305 	mvn.w	r3, #5
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	e00c      	b.n	8002734 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800271a:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <osKernelInitialize+0x40>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d105      	bne.n	800272e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002722:	4b07      	ldr	r3, [pc, #28]	@ (8002740 <osKernelInitialize+0x40>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002728:	2300      	movs	r3, #0
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	e002      	b.n	8002734 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800272e:	f04f 33ff 	mov.w	r3, #4294967295
 8002732:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002734:	687b      	ldr	r3, [r7, #4]
}
 8002736:	4618      	mov	r0, r3
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	bc80      	pop	{r7}
 800273e:	4770      	bx	lr
 8002740:	20000120 	.word	0x20000120

08002744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800274a:	f3ef 8305 	mrs	r3, IPSR
 800274e:	603b      	str	r3, [r7, #0]
  return(result);
 8002750:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <osKernelStart+0x1a>
    stat = osErrorISR;
 8002756:	f06f 0305 	mvn.w	r3, #5
 800275a:	607b      	str	r3, [r7, #4]
 800275c:	e010      	b.n	8002780 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800275e:	4b0b      	ldr	r3, [pc, #44]	@ (800278c <osKernelStart+0x48>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d109      	bne.n	800277a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002766:	f7ff ffc1 	bl	80026ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800276a:	4b08      	ldr	r3, [pc, #32]	@ (800278c <osKernelStart+0x48>)
 800276c:	2202      	movs	r2, #2
 800276e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002770:	f001 fa0a 	bl	8003b88 <vTaskStartScheduler>
      stat = osOK;
 8002774:	2300      	movs	r3, #0
 8002776:	607b      	str	r3, [r7, #4]
 8002778:	e002      	b.n	8002780 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295
 800277e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002780:	687b      	ldr	r3, [r7, #4]
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000120 	.word	0x20000120

08002790 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002790:	b580      	push	{r7, lr}
 8002792:	b08e      	sub	sp, #56	@ 0x38
 8002794:	af04      	add	r7, sp, #16
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800279c:	2300      	movs	r3, #0
 800279e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027a0:	f3ef 8305 	mrs	r3, IPSR
 80027a4:	617b      	str	r3, [r7, #20]
  return(result);
 80027a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d17e      	bne.n	80028aa <osThreadNew+0x11a>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d07b      	beq.n	80028aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80027b6:	2318      	movs	r3, #24
 80027b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
 80027c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d045      	beq.n	8002856 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d002      	beq.n	80027d8 <osThreadNew+0x48>
        name = attr->name;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d008      	beq.n	80027fe <osThreadNew+0x6e>
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	2b38      	cmp	r3, #56	@ 0x38
 80027f0:	d805      	bhi.n	80027fe <osThreadNew+0x6e>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <osThreadNew+0x72>
        return (NULL);
 80027fe:	2300      	movs	r3, #0
 8002800:	e054      	b.n	80028ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	089b      	lsrs	r3, r3, #2
 8002810:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00e      	beq.n	8002838 <osThreadNew+0xa8>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	2ba7      	cmp	r3, #167	@ 0xa7
 8002820:	d90a      	bls.n	8002838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <osThreadNew+0xa8>
        mem = 1;
 8002832:	2301      	movs	r3, #1
 8002834:	61bb      	str	r3, [r7, #24]
 8002836:	e010      	b.n	800285a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10c      	bne.n	800285a <osThreadNew+0xca>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d108      	bne.n	800285a <osThreadNew+0xca>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d104      	bne.n	800285a <osThreadNew+0xca>
          mem = 0;
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	e001      	b.n	800285a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002856:	2300      	movs	r3, #0
 8002858:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d110      	bne.n	8002882 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002868:	9202      	str	r2, [sp, #8]
 800286a:	9301      	str	r3, [sp, #4]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	6a3a      	ldr	r2, [r7, #32]
 8002874:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 ff92 	bl	80037a0 <xTaskCreateStatic>
 800287c:	4603      	mov	r3, r0
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	e013      	b.n	80028aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d110      	bne.n	80028aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	b29a      	uxth	r2, r3
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 ffe0 	bl	8003860 <xTaskCreate>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d001      	beq.n	80028aa <osThreadNew+0x11a>
            hTask = NULL;
 80028a6:	2300      	movs	r3, #0
 80028a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028aa:	693b      	ldr	r3, [r7, #16]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3728      	adds	r7, #40	@ 0x28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028bc:	f3ef 8305 	mrs	r3, IPSR
 80028c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80028c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <osDelay+0x1c>
    stat = osErrorISR;
 80028c8:	f06f 0305 	mvn.w	r3, #5
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	e007      	b.n	80028e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d002      	beq.n	80028e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f001 f91e 	bl	8003b1c <vTaskDelay>
    }
  }

  return (stat);
 80028e0:	68fb      	ldr	r3, [r7, #12]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b08a      	sub	sp, #40	@ 0x28
 80028ee:	af02      	add	r7, sp, #8
 80028f0:	60f8      	str	r0, [r7, #12]
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028fa:	f3ef 8305 	mrs	r3, IPSR
 80028fe:	613b      	str	r3, [r7, #16]
  return(result);
 8002900:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002902:	2b00      	cmp	r3, #0
 8002904:	d175      	bne.n	80029f2 <osSemaphoreNew+0x108>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d072      	beq.n	80029f2 <osSemaphoreNew+0x108>
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	429a      	cmp	r2, r3
 8002912:	d86e      	bhi.n	80029f2 <osSemaphoreNew+0x108>
    mem = -1;
 8002914:	f04f 33ff 	mov.w	r3, #4294967295
 8002918:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d015      	beq.n	800294c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <osSemaphoreNew+0x4c>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b4f      	cmp	r3, #79	@ 0x4f
 800292e:	d902      	bls.n	8002936 <osSemaphoreNew+0x4c>
        mem = 1;
 8002930:	2301      	movs	r3, #1
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	e00c      	b.n	8002950 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d108      	bne.n	8002950 <osSemaphoreNew+0x66>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d104      	bne.n	8002950 <osSemaphoreNew+0x66>
          mem = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	e001      	b.n	8002950 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002956:	d04c      	beq.n	80029f2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d128      	bne.n	80029b0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d10a      	bne.n	800297a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2203      	movs	r2, #3
 800296a:	9200      	str	r2, [sp, #0]
 800296c:	2200      	movs	r2, #0
 800296e:	2100      	movs	r1, #0
 8002970:	2001      	movs	r0, #1
 8002972:	f000 f98f 	bl	8002c94 <xQueueGenericCreateStatic>
 8002976:	61f8      	str	r0, [r7, #28]
 8002978:	e005      	b.n	8002986 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800297a:	2203      	movs	r2, #3
 800297c:	2100      	movs	r1, #0
 800297e:	2001      	movs	r0, #1
 8002980:	f000 fa05 	bl	8002d8e <xQueueGenericCreate>
 8002984:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d022      	beq.n	80029d2 <osSemaphoreNew+0xe8>
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01f      	beq.n	80029d2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002992:	2300      	movs	r3, #0
 8002994:	2200      	movs	r2, #0
 8002996:	2100      	movs	r1, #0
 8002998:	69f8      	ldr	r0, [r7, #28]
 800299a:	f000 fac5 	bl	8002f28 <xQueueGenericSend>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d016      	beq.n	80029d2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80029a4:	69f8      	ldr	r0, [r7, #28]
 80029a6:	f000 fd41 	bl	800342c <vQueueDelete>
            hSemaphore = NULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
 80029ae:	e010      	b.n	80029d2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d108      	bne.n	80029c8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	461a      	mov	r2, r3
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 fa43 	bl	8002e4a <xQueueCreateCountingSemaphoreStatic>
 80029c4:	61f8      	str	r0, [r7, #28]
 80029c6:	e004      	b.n	80029d2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80029c8:	68b9      	ldr	r1, [r7, #8]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fa76 	bl	8002ebc <xQueueCreateCountingSemaphore>
 80029d0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d00c      	beq.n	80029f2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	e001      	b.n	80029ea <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80029ea:	6979      	ldr	r1, [r7, #20]
 80029ec:	69f8      	ldr	r0, [r7, #28]
 80029ee:	f000 fe51 	bl	8003694 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80029f2:	69fb      	ldr	r3, [r7, #28]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3720      	adds	r7, #32
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4a06      	ldr	r2, [pc, #24]	@ (8002a24 <vApplicationGetIdleTaskMemory+0x28>)
 8002a0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	4a05      	ldr	r2, [pc, #20]	@ (8002a28 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2280      	movs	r2, #128	@ 0x80
 8002a18:	601a      	str	r2, [r3, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	20000124 	.word	0x20000124
 8002a28:	200001cc 	.word	0x200001cc

08002a2c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4a07      	ldr	r2, [pc, #28]	@ (8002a58 <vApplicationGetTimerTaskMemory+0x2c>)
 8002a3c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4a06      	ldr	r2, [pc, #24]	@ (8002a5c <vApplicationGetTimerTaskMemory+0x30>)
 8002a42:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a4a:	601a      	str	r2, [r3, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	200003cc 	.word	0x200003cc
 8002a5c:	20000474 	.word	0x20000474

08002a60 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f103 0208 	add.w	r2, r3, #8
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295
 8002a78:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f103 0208 	add.w	r2, r3, #8
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f103 0208 	add.w	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr

08002a9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bc80      	pop	{r7}
 8002ab4:	4770      	bx	lr

08002ab6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	601a      	str	r2, [r3, #0]
}
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr

08002afc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b12:	d103      	bne.n	8002b1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	e00c      	b.n	8002b36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3308      	adds	r3, #8
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	e002      	b.n	8002b2a <vListInsert+0x2e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d2f6      	bcs.n	8002b24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr

08002b6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6892      	ldr	r2, [r2, #8]
 8002b82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6852      	ldr	r2, [r2, #4]
 8002b8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d103      	bne.n	8002ba0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	1e5a      	subs	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bc80      	pop	{r7}
 8002bbc:	4770      	bx	lr
	...

08002bc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002bec:	f002 f956 	bl	8004e9c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bf8:	68f9      	ldr	r1, [r7, #12]
 8002bfa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	441a      	add	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	68f9      	ldr	r1, [r7, #12]
 8002c20:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	441a      	add	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	22ff      	movs	r2, #255	@ 0xff
 8002c30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	22ff      	movs	r2, #255	@ 0xff
 8002c38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d114      	bne.n	8002c6c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01a      	beq.n	8002c80 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3310      	adds	r3, #16
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f001 fa34 	bl	80040bc <xTaskRemoveFromEventList>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d012      	beq.n	8002c80 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <xQueueGenericReset+0xd0>)
 8002c5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	f3bf 8f4f 	dsb	sy
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	e009      	b.n	8002c80 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3310      	adds	r3, #16
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fef5 	bl	8002a60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3324      	adds	r3, #36	@ 0x24
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff fef0 	bl	8002a60 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c80:	f002 f93c 	bl	8004efc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c84:	2301      	movs	r3, #1
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	e000ed04 	.word	0xe000ed04

08002c94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08e      	sub	sp, #56	@ 0x38
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10b      	bne.n	8002cc0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002cba:	bf00      	nop
 8002cbc:	bf00      	nop
 8002cbe:	e7fd      	b.n	8002cbc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10b      	bne.n	8002cde <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	e7fd      	b.n	8002cda <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d002      	beq.n	8002cea <xQueueGenericCreateStatic+0x56>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <xQueueGenericCreateStatic+0x5a>
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <xQueueGenericCreateStatic+0x5c>
 8002cee:	2300      	movs	r3, #0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10b      	bne.n	8002d0c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cf8:	f383 8811 	msr	BASEPRI, r3
 8002cfc:	f3bf 8f6f 	isb	sy
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	623b      	str	r3, [r7, #32]
}
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
 8002d0a:	e7fd      	b.n	8002d08 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d102      	bne.n	8002d18 <xQueueGenericCreateStatic+0x84>
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <xQueueGenericCreateStatic+0x88>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <xQueueGenericCreateStatic+0x8a>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d10b      	bne.n	8002d3a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d26:	f383 8811 	msr	BASEPRI, r3
 8002d2a:	f3bf 8f6f 	isb	sy
 8002d2e:	f3bf 8f4f 	dsb	sy
 8002d32:	61fb      	str	r3, [r7, #28]
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	e7fd      	b.n	8002d36 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002d3a:	2350      	movs	r3, #80	@ 0x50
 8002d3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b50      	cmp	r3, #80	@ 0x50
 8002d42:	d00b      	beq.n	8002d5c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d48:	f383 8811 	msr	BASEPRI, r3
 8002d4c:	f3bf 8f6f 	isb	sy
 8002d50:	f3bf 8f4f 	dsb	sy
 8002d54:	61bb      	str	r3, [r7, #24]
}
 8002d56:	bf00      	nop
 8002d58:	bf00      	nop
 8002d5a:	e7fd      	b.n	8002d58 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002d5c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00d      	beq.n	8002d84 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d70:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f000 f840 	bl	8002e04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3730      	adds	r7, #48	@ 0x30
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b08a      	sub	sp, #40	@ 0x28
 8002d92:	af02      	add	r7, sp, #8
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10b      	bne.n	8002dba <xQueueGenericCreate+0x2c>
	__asm volatile
 8002da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002da6:	f383 8811 	msr	BASEPRI, r3
 8002daa:	f3bf 8f6f 	isb	sy
 8002dae:	f3bf 8f4f 	dsb	sy
 8002db2:	613b      	str	r3, [r7, #16]
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	e7fd      	b.n	8002db6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	3350      	adds	r3, #80	@ 0x50
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f002 f969 	bl	80050a0 <pvPortMalloc>
 8002dce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d011      	beq.n	8002dfa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3350      	adds	r3, #80	@ 0x50
 8002dde:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002de8:	79fa      	ldrb	r2, [r7, #7]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	4613      	mov	r3, r2
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	68b9      	ldr	r1, [r7, #8]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f805 	bl	8002e04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002dfa:	69bb      	ldr	r3, [r7, #24]
	}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3720      	adds	r7, #32
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d103      	bne.n	8002e20 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	e002      	b.n	8002e26 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	68ba      	ldr	r2, [r7, #8]
 8002e30:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e32:	2101      	movs	r1, #1
 8002e34:	69b8      	ldr	r0, [r7, #24]
 8002e36:	f7ff fec3 	bl	8002bc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e3a:	69bb      	ldr	r3, [r7, #24]
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b08a      	sub	sp, #40	@ 0x28
 8002e4e:	af02      	add	r7, sp, #8
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d10b      	bne.n	8002e74 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8002e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e60:	f383 8811 	msr	BASEPRI, r3
 8002e64:	f3bf 8f6f 	isb	sy
 8002e68:	f3bf 8f4f 	dsb	sy
 8002e6c:	61bb      	str	r3, [r7, #24]
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	e7fd      	b.n	8002e70 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002e74:	68ba      	ldr	r2, [r7, #8]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d90b      	bls.n	8002e94 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8002e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e80:	f383 8811 	msr	BASEPRI, r3
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	f3bf 8f4f 	dsb	sy
 8002e8c:	617b      	str	r3, [r7, #20]
}
 8002e8e:	bf00      	nop
 8002e90:	bf00      	nop
 8002e92:	e7fd      	b.n	8002e90 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002e94:	2302      	movs	r3, #2
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7ff fef8 	bl	8002c94 <xQueueGenericCreateStatic>
 8002ea4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	68ba      	ldr	r2, [r7, #8]
 8002eb0:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002eb2:	69fb      	ldr	r3, [r7, #28]
	}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3720      	adds	r7, #32
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8002ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ed0:	f383 8811 	msr	BASEPRI, r3
 8002ed4:	f3bf 8f6f 	isb	sy
 8002ed8:	f3bf 8f4f 	dsb	sy
 8002edc:	613b      	str	r3, [r7, #16]
}
 8002ede:	bf00      	nop
 8002ee0:	bf00      	nop
 8002ee2:	e7fd      	b.n	8002ee0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d90b      	bls.n	8002f04 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8002eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	60fb      	str	r3, [r7, #12]
}
 8002efe:	bf00      	nop
 8002f00:	bf00      	nop
 8002f02:	e7fd      	b.n	8002f00 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002f04:	2202      	movs	r2, #2
 8002f06:	2100      	movs	r1, #0
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f7ff ff40 	bl	8002d8e <xQueueGenericCreate>
 8002f0e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d002      	beq.n	8002f1c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002f1c:	697b      	ldr	r3, [r7, #20]
	}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b08e      	sub	sp, #56	@ 0x38
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002f36:	2300      	movs	r3, #0
 8002f38:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10b      	bne.n	8002f5c <xQueueGenericSend+0x34>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002f56:	bf00      	nop
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d103      	bne.n	8002f6a <xQueueGenericSend+0x42>
 8002f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <xQueueGenericSend+0x46>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <xQueueGenericSend+0x48>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10b      	bne.n	8002f8c <xQueueGenericSend+0x64>
	__asm volatile
 8002f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f78:	f383 8811 	msr	BASEPRI, r3
 8002f7c:	f3bf 8f6f 	isb	sy
 8002f80:	f3bf 8f4f 	dsb	sy
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002f86:	bf00      	nop
 8002f88:	bf00      	nop
 8002f8a:	e7fd      	b.n	8002f88 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d103      	bne.n	8002f9a <xQueueGenericSend+0x72>
 8002f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d101      	bne.n	8002f9e <xQueueGenericSend+0x76>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e000      	b.n	8002fa0 <xQueueGenericSend+0x78>
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d10b      	bne.n	8002fbc <xQueueGenericSend+0x94>
	__asm volatile
 8002fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	623b      	str	r3, [r7, #32]
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fbc:	f001 fa44 	bl	8004448 <xTaskGetSchedulerState>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d102      	bne.n	8002fcc <xQueueGenericSend+0xa4>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <xQueueGenericSend+0xa8>
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e000      	b.n	8002fd2 <xQueueGenericSend+0xaa>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <xQueueGenericSend+0xc6>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	61fb      	str	r3, [r7, #28]
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	e7fd      	b.n	8002fea <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fee:	f001 ff55 	bl	8004e9c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d302      	bcc.n	8003004 <xQueueGenericSend+0xdc>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d129      	bne.n	8003058 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	68b9      	ldr	r1, [r7, #8]
 8003008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800300a:	f000 fa33 	bl	8003474 <prvCopyDataToQueue>
 800300e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003014:	2b00      	cmp	r3, #0
 8003016:	d010      	beq.n	800303a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301a:	3324      	adds	r3, #36	@ 0x24
 800301c:	4618      	mov	r0, r3
 800301e:	f001 f84d 	bl	80040bc <xTaskRemoveFromEventList>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d013      	beq.n	8003050 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003028:	4b3f      	ldr	r3, [pc, #252]	@ (8003128 <xQueueGenericSend+0x200>)
 800302a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	f3bf 8f6f 	isb	sy
 8003038:	e00a      	b.n	8003050 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800303a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303c:	2b00      	cmp	r3, #0
 800303e:	d007      	beq.n	8003050 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003040:	4b39      	ldr	r3, [pc, #228]	@ (8003128 <xQueueGenericSend+0x200>)
 8003042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003046:	601a      	str	r2, [r3, #0]
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003050:	f001 ff54 	bl	8004efc <vPortExitCritical>
				return pdPASS;
 8003054:	2301      	movs	r3, #1
 8003056:	e063      	b.n	8003120 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d103      	bne.n	8003066 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800305e:	f001 ff4d 	bl	8004efc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003062:	2300      	movs	r3, #0
 8003064:	e05c      	b.n	8003120 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003068:	2b00      	cmp	r3, #0
 800306a:	d106      	bne.n	800307a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800306c:	f107 0314 	add.w	r3, r7, #20
 8003070:	4618      	mov	r0, r3
 8003072:	f001 f887 	bl	8004184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003076:	2301      	movs	r3, #1
 8003078:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800307a:	f001 ff3f 	bl	8004efc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800307e:	f000 fdf3 	bl	8003c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003082:	f001 ff0b 	bl	8004e9c <vPortEnterCritical>
 8003086:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003088:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800308c:	b25b      	sxtb	r3, r3
 800308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003092:	d103      	bne.n	800309c <xQueueGenericSend+0x174>
 8003094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800309c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800309e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030a2:	b25b      	sxtb	r3, r3
 80030a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a8:	d103      	bne.n	80030b2 <xQueueGenericSend+0x18a>
 80030aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030b2:	f001 ff23 	bl	8004efc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030b6:	1d3a      	adds	r2, r7, #4
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f001 f876 	bl	80041b0 <xTaskCheckForTimeOut>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d124      	bne.n	8003114 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80030ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030cc:	f000 faca 	bl	8003664 <prvIsQueueFull>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d018      	beq.n	8003108 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80030d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d8:	3310      	adds	r3, #16
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4611      	mov	r1, r2
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 ff9a 	bl	8004018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80030e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80030e6:	f000 fa55 	bl	8003594 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80030ea:	f000 fdcb 	bl	8003c84 <xTaskResumeAll>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f47f af7c 	bne.w	8002fee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80030f6:	4b0c      	ldr	r3, [pc, #48]	@ (8003128 <xQueueGenericSend+0x200>)
 80030f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	e772      	b.n	8002fee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003108:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800310a:	f000 fa43 	bl	8003594 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800310e:	f000 fdb9 	bl	8003c84 <xTaskResumeAll>
 8003112:	e76c      	b.n	8002fee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003114:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003116:	f000 fa3d 	bl	8003594 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800311a:	f000 fdb3 	bl	8003c84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800311e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003120:	4618      	mov	r0, r3
 8003122:	3738      	adds	r7, #56	@ 0x38
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	e000ed04 	.word	0xe000ed04

0800312c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b090      	sub	sp, #64	@ 0x40
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800313e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003140:	2b00      	cmp	r3, #0
 8003142:	d10b      	bne.n	800315c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003148:	f383 8811 	msr	BASEPRI, r3
 800314c:	f3bf 8f6f 	isb	sy
 8003150:	f3bf 8f4f 	dsb	sy
 8003154:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003156:	bf00      	nop
 8003158:	bf00      	nop
 800315a:	e7fd      	b.n	8003158 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d103      	bne.n	800316a <xQueueGenericSendFromISR+0x3e>
 8003162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <xQueueGenericSendFromISR+0x42>
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <xQueueGenericSendFromISR+0x44>
 800316e:	2300      	movs	r3, #0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10b      	bne.n	800318c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003186:	bf00      	nop
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d103      	bne.n	800319a <xQueueGenericSendFromISR+0x6e>
 8003192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <xQueueGenericSendFromISR+0x72>
 800319a:	2301      	movs	r3, #1
 800319c:	e000      	b.n	80031a0 <xQueueGenericSendFromISR+0x74>
 800319e:	2300      	movs	r3, #0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d10b      	bne.n	80031bc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	623b      	str	r3, [r7, #32]
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031bc:	f001 ff30 	bl	8005020 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80031c0:	f3ef 8211 	mrs	r2, BASEPRI
 80031c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	61fa      	str	r2, [r7, #28]
 80031d6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80031d8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031da:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80031dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d302      	bcc.n	80031ee <xQueueGenericSendFromISR+0xc2>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d12f      	bne.n	800324e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80031ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	68b9      	ldr	r1, [r7, #8]
 8003202:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003204:	f000 f936 	bl	8003474 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003208:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800320c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003210:	d112      	bne.n	8003238 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003216:	2b00      	cmp	r3, #0
 8003218:	d016      	beq.n	8003248 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800321a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800321c:	3324      	adds	r3, #36	@ 0x24
 800321e:	4618      	mov	r0, r3
 8003220:	f000 ff4c 	bl	80040bc <xTaskRemoveFromEventList>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00e      	beq.n	8003248 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	601a      	str	r2, [r3, #0]
 8003236:	e007      	b.n	8003248 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003238:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800323c:	3301      	adds	r3, #1
 800323e:	b2db      	uxtb	r3, r3
 8003240:	b25a      	sxtb	r2, r3
 8003242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003248:	2301      	movs	r3, #1
 800324a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800324c:	e001      	b.n	8003252 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800324e:	2300      	movs	r3, #0
 8003250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003254:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800325c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800325e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003260:	4618      	mov	r0, r3
 8003262:	3740      	adds	r7, #64	@ 0x40
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08c      	sub	sp, #48	@ 0x30
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800327c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10b      	bne.n	800329a <xQueueReceive+0x32>
	__asm volatile
 8003282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	623b      	str	r3, [r7, #32]
}
 8003294:	bf00      	nop
 8003296:	bf00      	nop
 8003298:	e7fd      	b.n	8003296 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d103      	bne.n	80032a8 <xQueueReceive+0x40>
 80032a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <xQueueReceive+0x44>
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <xQueueReceive+0x46>
 80032ac:	2300      	movs	r3, #0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10b      	bne.n	80032ca <xQueueReceive+0x62>
	__asm volatile
 80032b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b6:	f383 8811 	msr	BASEPRI, r3
 80032ba:	f3bf 8f6f 	isb	sy
 80032be:	f3bf 8f4f 	dsb	sy
 80032c2:	61fb      	str	r3, [r7, #28]
}
 80032c4:	bf00      	nop
 80032c6:	bf00      	nop
 80032c8:	e7fd      	b.n	80032c6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032ca:	f001 f8bd 	bl	8004448 <xTaskGetSchedulerState>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <xQueueReceive+0x72>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <xQueueReceive+0x76>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <xQueueReceive+0x78>
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10b      	bne.n	80032fc <xQueueReceive+0x94>
	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	61bb      	str	r3, [r7, #24]
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032fc:	f001 fdce 	bl	8004e9c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003302:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003304:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01f      	beq.n	800334c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800330c:	68b9      	ldr	r1, [r7, #8]
 800330e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003310:	f000 f91a 	bl	8003548 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	1e5a      	subs	r2, r3, #1
 8003318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00f      	beq.n	8003344 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003326:	3310      	adds	r3, #16
 8003328:	4618      	mov	r0, r3
 800332a:	f000 fec7 	bl	80040bc <xTaskRemoveFromEventList>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003334:	4b3c      	ldr	r3, [pc, #240]	@ (8003428 <xQueueReceive+0x1c0>)
 8003336:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003344:	f001 fdda 	bl	8004efc <vPortExitCritical>
				return pdPASS;
 8003348:	2301      	movs	r3, #1
 800334a:	e069      	b.n	8003420 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d103      	bne.n	800335a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003352:	f001 fdd3 	bl	8004efc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003356:	2300      	movs	r3, #0
 8003358:	e062      	b.n	8003420 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003360:	f107 0310 	add.w	r3, r7, #16
 8003364:	4618      	mov	r0, r3
 8003366:	f000 ff0d 	bl	8004184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800336a:	2301      	movs	r3, #1
 800336c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800336e:	f001 fdc5 	bl	8004efc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003372:	f000 fc79 	bl	8003c68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003376:	f001 fd91 	bl	8004e9c <vPortEnterCritical>
 800337a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800337c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003380:	b25b      	sxtb	r3, r3
 8003382:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003386:	d103      	bne.n	8003390 <xQueueReceive+0x128>
 8003388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003392:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003396:	b25b      	sxtb	r3, r3
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339c:	d103      	bne.n	80033a6 <xQueueReceive+0x13e>
 800339e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033a6:	f001 fda9 	bl	8004efc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033aa:	1d3a      	adds	r2, r7, #4
 80033ac:	f107 0310 	add.w	r3, r7, #16
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fefc 	bl	80041b0 <xTaskCheckForTimeOut>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d123      	bne.n	8003406 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80033be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033c0:	f000 f93a 	bl	8003638 <prvIsQueueEmpty>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d017      	beq.n	80033fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80033ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033cc:	3324      	adds	r3, #36	@ 0x24
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 fe20 	bl	8004018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80033d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033da:	f000 f8db 	bl	8003594 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80033de:	f000 fc51 	bl	8003c84 <xTaskResumeAll>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d189      	bne.n	80032fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80033e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003428 <xQueueReceive+0x1c0>)
 80033ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ee:	601a      	str	r2, [r3, #0]
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	e780      	b.n	80032fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80033fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033fc:	f000 f8ca 	bl	8003594 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003400:	f000 fc40 	bl	8003c84 <xTaskResumeAll>
 8003404:	e77a      	b.n	80032fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003408:	f000 f8c4 	bl	8003594 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800340c:	f000 fc3a 	bl	8003c84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003412:	f000 f911 	bl	8003638 <prvIsQueueEmpty>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	f43f af6f 	beq.w	80032fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800341e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003420:	4618      	mov	r0, r3
 8003422:	3730      	adds	r7, #48	@ 0x30
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10b      	bne.n	8003456 <vQueueDelete+0x2a>
	__asm volatile
 800343e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	60bb      	str	r3, [r7, #8]
}
 8003450:	bf00      	nop
 8003452:	bf00      	nop
 8003454:	e7fd      	b.n	8003452 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f944 	bl	80036e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003462:	2b00      	cmp	r3, #0
 8003464:	d102      	bne.n	800346c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f001 fee8 	bl	800523c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800346c:	bf00      	nop
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003488:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10d      	bne.n	80034ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d14d      	bne.n	8003536 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fff0 	bl	8004484 <xTaskPriorityDisinherit>
 80034a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	609a      	str	r2, [r3, #8]
 80034ac:	e043      	b.n	8003536 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d119      	bne.n	80034e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6858      	ldr	r0, [r3, #4]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034bc:	461a      	mov	r2, r3
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	f002 f85e 	bl	8005580 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	441a      	add	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d32b      	bcc.n	8003536 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	e026      	b.n	8003536 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68d8      	ldr	r0, [r3, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f0:	461a      	mov	r2, r3
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	f002 f844 	bl	8005580 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	68da      	ldr	r2, [r3, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003500:	425b      	negs	r3, r3
 8003502:	441a      	add	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	68da      	ldr	r2, [r3, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	429a      	cmp	r2, r3
 8003512:	d207      	bcs.n	8003524 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351c:	425b      	negs	r3, r3
 800351e:	441a      	add	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d105      	bne.n	8003536 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d002      	beq.n	8003536 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	3b01      	subs	r3, #1
 8003534:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800353e:	697b      	ldr	r3, [r7, #20]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d018      	beq.n	800358c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	441a      	add	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	429a      	cmp	r2, r3
 8003572:	d303      	bcc.n	800357c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	68d9      	ldr	r1, [r3, #12]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	461a      	mov	r2, r3
 8003586:	6838      	ldr	r0, [r7, #0]
 8003588:	f001 fffa 	bl	8005580 <memcpy>
	}
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800359c:	f001 fc7e 	bl	8004e9c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035a8:	e011      	b.n	80035ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d012      	beq.n	80035d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3324      	adds	r3, #36	@ 0x24
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fd80 	bl	80040bc <xTaskRemoveFromEventList>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035c2:	f000 fe59 	bl	8004278 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035c6:	7bfb      	ldrb	r3, [r7, #15]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	dce9      	bgt.n	80035aa <prvUnlockQueue+0x16>
 80035d6:	e000      	b.n	80035da <prvUnlockQueue+0x46>
					break;
 80035d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	22ff      	movs	r2, #255	@ 0xff
 80035de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80035e2:	f001 fc8b 	bl	8004efc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80035e6:	f001 fc59 	bl	8004e9c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80035f2:	e011      	b.n	8003618 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	691b      	ldr	r3, [r3, #16]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d012      	beq.n	8003622 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	3310      	adds	r3, #16
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fd5b 	bl	80040bc <xTaskRemoveFromEventList>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800360c:	f000 fe34 	bl	8004278 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003610:	7bbb      	ldrb	r3, [r7, #14]
 8003612:	3b01      	subs	r3, #1
 8003614:	b2db      	uxtb	r3, r3
 8003616:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003618:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800361c:	2b00      	cmp	r3, #0
 800361e:	dce9      	bgt.n	80035f4 <prvUnlockQueue+0x60>
 8003620:	e000      	b.n	8003624 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003622:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	22ff      	movs	r2, #255	@ 0xff
 8003628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800362c:	f001 fc66 	bl	8004efc <vPortExitCritical>
}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003640:	f001 fc2c 	bl	8004e9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800364c:	2301      	movs	r3, #1
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	e001      	b.n	8003656 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003652:	2300      	movs	r3, #0
 8003654:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003656:	f001 fc51 	bl	8004efc <vPortExitCritical>

	return xReturn;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	4618      	mov	r0, r3
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800366c:	f001 fc16 	bl	8004e9c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003678:	429a      	cmp	r2, r3
 800367a:	d102      	bne.n	8003682 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800367c:	2301      	movs	r3, #1
 800367e:	60fb      	str	r3, [r7, #12]
 8003680:	e001      	b.n	8003686 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003682:	2300      	movs	r3, #0
 8003684:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003686:	f001 fc39 	bl	8004efc <vPortExitCritical>

	return xReturn;
 800368a:	68fb      	ldr	r3, [r7, #12]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e014      	b.n	80036ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036a4:	4a0e      	ldr	r2, [pc, #56]	@ (80036e0 <vQueueAddToRegistry+0x4c>)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10b      	bne.n	80036c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036b0:	490b      	ldr	r1, [pc, #44]	@ (80036e0 <vQueueAddToRegistry+0x4c>)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	683a      	ldr	r2, [r7, #0]
 80036b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036ba:	4a09      	ldr	r2, [pc, #36]	@ (80036e0 <vQueueAddToRegistry+0x4c>)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036c6:	e006      	b.n	80036d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	3301      	adds	r3, #1
 80036cc:	60fb      	str	r3, [r7, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b07      	cmp	r3, #7
 80036d2:	d9e7      	bls.n	80036a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	20000874 	.word	0x20000874

080036e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036ec:	2300      	movs	r3, #0
 80036ee:	60fb      	str	r3, [r7, #12]
 80036f0:	e016      	b.n	8003720 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80036f2:	4a10      	ldr	r2, [pc, #64]	@ (8003734 <vQueueUnregisterQueue+0x50>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d10b      	bne.n	800371a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003702:	4a0c      	ldr	r2, [pc, #48]	@ (8003734 <vQueueUnregisterQueue+0x50>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2100      	movs	r1, #0
 8003708:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800370c:	4a09      	ldr	r2, [pc, #36]	@ (8003734 <vQueueUnregisterQueue+0x50>)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	2200      	movs	r2, #0
 8003716:	605a      	str	r2, [r3, #4]
				break;
 8003718:	e006      	b.n	8003728 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3301      	adds	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b07      	cmp	r3, #7
 8003724:	d9e5      	bls.n	80036f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003726:	bf00      	nop
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	bc80      	pop	{r7}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	20000874 	.word	0x20000874

08003738 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003748:	f001 fba8 	bl	8004e9c <vPortEnterCritical>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003752:	b25b      	sxtb	r3, r3
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d103      	bne.n	8003762 <vQueueWaitForMessageRestricted+0x2a>
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003768:	b25b      	sxtb	r3, r3
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d103      	bne.n	8003778 <vQueueWaitForMessageRestricted+0x40>
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003778:	f001 fbc0 	bl	8004efc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	3324      	adds	r3, #36	@ 0x24
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	68b9      	ldr	r1, [r7, #8]
 800378c:	4618      	mov	r0, r3
 800378e:	f000 fc69 	bl	8004064 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003792:	6978      	ldr	r0, [r7, #20]
 8003794:	f7ff fefe 	bl	8003594 <prvUnlockQueue>
	}
 8003798:	bf00      	nop
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b08e      	sub	sp, #56	@ 0x38
 80037a4:	af04      	add	r7, sp, #16
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80037ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	623b      	str	r3, [r7, #32]
}
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	e7fd      	b.n	80037c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10b      	bne.n	80037ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	61fb      	str	r3, [r7, #28]
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	e7fd      	b.n	80037e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037ea:	23a8      	movs	r3, #168	@ 0xa8
 80037ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2ba8      	cmp	r3, #168	@ 0xa8
 80037f2:	d00b      	beq.n	800380c <xTaskCreateStatic+0x6c>
	__asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	61bb      	str	r3, [r7, #24]
}
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800380c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800380e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01e      	beq.n	8003852 <xTaskCreateStatic+0xb2>
 8003814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003816:	2b00      	cmp	r3, #0
 8003818:	d01b      	beq.n	8003852 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800381a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003822:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003826:	2202      	movs	r2, #2
 8003828:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800382c:	2300      	movs	r3, #0
 800382e:	9303      	str	r3, [sp, #12]
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	9302      	str	r3, [sp, #8]
 8003834:	f107 0314 	add.w	r3, r7, #20
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 f851 	bl	80038ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800384a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800384c:	f000 f8f6 	bl	8003a3c <prvAddNewTaskToReadyList>
 8003850:	e001      	b.n	8003856 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003856:	697b      	ldr	r3, [r7, #20]
	}
 8003858:	4618      	mov	r0, r3
 800385a:	3728      	adds	r7, #40	@ 0x28
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	@ 0x30
 8003864:	af04      	add	r7, sp, #16
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	4613      	mov	r3, r2
 800386e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003870:	88fb      	ldrh	r3, [r7, #6]
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4618      	mov	r0, r3
 8003876:	f001 fc13 	bl	80050a0 <pvPortMalloc>
 800387a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00e      	beq.n	80038a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003882:	20a8      	movs	r0, #168	@ 0xa8
 8003884:	f001 fc0c 	bl	80050a0 <pvPortMalloc>
 8003888:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	631a      	str	r2, [r3, #48]	@ 0x30
 8003896:	e005      	b.n	80038a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003898:	6978      	ldr	r0, [r7, #20]
 800389a:	f001 fccf 	bl	800523c <vPortFree>
 800389e:	e001      	b.n	80038a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d017      	beq.n	80038da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	2300      	movs	r3, #0
 80038b6:	9303      	str	r3, [sp, #12]
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	9302      	str	r3, [sp, #8]
 80038bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038be:	9301      	str	r3, [sp, #4]
 80038c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f80f 	bl	80038ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038ce:	69f8      	ldr	r0, [r7, #28]
 80038d0:	f000 f8b4 	bl	8003a3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038d4:	2301      	movs	r3, #1
 80038d6:	61bb      	str	r3, [r7, #24]
 80038d8:	e002      	b.n	80038e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038da:	f04f 33ff 	mov.w	r3, #4294967295
 80038de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038e0:	69bb      	ldr	r3, [r7, #24]
	}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
 80038f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	461a      	mov	r2, r3
 8003904:	21a5      	movs	r1, #165	@ 0xa5
 8003906:	f001 fdb7 	bl	8005478 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800390a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003914:	3b01      	subs	r3, #1
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f023 0307 	bic.w	r3, r3, #7
 8003922:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00b      	beq.n	8003946 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800392e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003932:	f383 8811 	msr	BASEPRI, r3
 8003936:	f3bf 8f6f 	isb	sy
 800393a:	f3bf 8f4f 	dsb	sy
 800393e:	617b      	str	r3, [r7, #20]
}
 8003940:	bf00      	nop
 8003942:	bf00      	nop
 8003944:	e7fd      	b.n	8003942 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01f      	beq.n	800398c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800394c:	2300      	movs	r3, #0
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e012      	b.n	8003978 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	4413      	add	r3, r2
 8003958:	7819      	ldrb	r1, [r3, #0]
 800395a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	4413      	add	r3, r2
 8003960:	3334      	adds	r3, #52	@ 0x34
 8003962:	460a      	mov	r2, r1
 8003964:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d006      	beq.n	8003980 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	3301      	adds	r3, #1
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	d9e9      	bls.n	8003952 <prvInitialiseNewTask+0x66>
 800397e:	e000      	b.n	8003982 <prvInitialiseNewTask+0x96>
			{
				break;
 8003980:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800398a:	e003      	b.n	8003994 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800398c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003996:	2b37      	cmp	r3, #55	@ 0x37
 8003998:	d901      	bls.n	800399e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800399a:	2337      	movs	r3, #55	@ 0x37
 800399c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80039a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039a8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80039aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ac:	2200      	movs	r2, #0
 80039ae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80039b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039b2:	3304      	adds	r3, #4
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff f872 	bl	8002a9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80039ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039bc:	3318      	adds	r3, #24
 80039be:	4618      	mov	r0, r3
 80039c0:	f7ff f86d 	bl	8002a9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80039c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80039d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80039d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039dc:	2200      	movs	r2, #0
 80039de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80039ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039ec:	3354      	adds	r3, #84	@ 0x54
 80039ee:	224c      	movs	r2, #76	@ 0x4c
 80039f0:	2100      	movs	r1, #0
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 fd40 	bl	8005478 <memset>
 80039f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039fa:	4a0d      	ldr	r2, [pc, #52]	@ (8003a30 <prvInitialiseNewTask+0x144>)
 80039fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80039fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a00:	4a0c      	ldr	r2, [pc, #48]	@ (8003a34 <prvInitialiseNewTask+0x148>)
 8003a02:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a06:	4a0c      	ldr	r2, [pc, #48]	@ (8003a38 <prvInitialiseNewTask+0x14c>)
 8003a08:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a0a:	683a      	ldr	r2, [r7, #0]
 8003a0c:	68f9      	ldr	r1, [r7, #12]
 8003a0e:	69b8      	ldr	r0, [r7, #24]
 8003a10:	f001 f954 	bl	8004cbc <pxPortInitialiseStack>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a18:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003a1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d002      	beq.n	8003a26 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a26:	bf00      	nop
 8003a28:	3720      	adds	r7, #32
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20001b08 	.word	0x20001b08
 8003a34:	20001b70 	.word	0x20001b70
 8003a38:	20001bd8 	.word	0x20001bd8

08003a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a44:	f001 fa2a 	bl	8004e9c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a48:	4b2d      	ldr	r3, [pc, #180]	@ (8003b00 <prvAddNewTaskToReadyList+0xc4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b00 <prvAddNewTaskToReadyList+0xc4>)
 8003a50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a52:	4b2c      	ldr	r3, [pc, #176]	@ (8003b04 <prvAddNewTaskToReadyList+0xc8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d109      	bne.n	8003a6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003b04 <prvAddNewTaskToReadyList+0xc8>)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a60:	4b27      	ldr	r3, [pc, #156]	@ (8003b00 <prvAddNewTaskToReadyList+0xc4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d110      	bne.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a68:	f000 fc2a 	bl	80042c0 <prvInitialiseTaskLists>
 8003a6c:	e00d      	b.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a6e:	4b26      	ldr	r3, [pc, #152]	@ (8003b08 <prvAddNewTaskToReadyList+0xcc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a76:	4b23      	ldr	r3, [pc, #140]	@ (8003b04 <prvAddNewTaskToReadyList+0xc8>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d802      	bhi.n	8003a8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a84:	4a1f      	ldr	r2, [pc, #124]	@ (8003b04 <prvAddNewTaskToReadyList+0xc8>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a8a:	4b20      	ldr	r3, [pc, #128]	@ (8003b0c <prvAddNewTaskToReadyList+0xd0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	4a1e      	ldr	r2, [pc, #120]	@ (8003b0c <prvAddNewTaskToReadyList+0xd0>)
 8003a92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a94:	4b1d      	ldr	r3, [pc, #116]	@ (8003b0c <prvAddNewTaskToReadyList+0xd0>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	@ (8003b10 <prvAddNewTaskToReadyList+0xd4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d903      	bls.n	8003ab0 <prvAddNewTaskToReadyList+0x74>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aac:	4a18      	ldr	r2, [pc, #96]	@ (8003b10 <prvAddNewTaskToReadyList+0xd4>)
 8003aae:	6013      	str	r3, [r2, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4a15      	ldr	r2, [pc, #84]	@ (8003b14 <prvAddNewTaskToReadyList+0xd8>)
 8003abe:	441a      	add	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7fe fff5 	bl	8002ab6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003acc:	f001 fa16 	bl	8004efc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ad0:	4b0d      	ldr	r3, [pc, #52]	@ (8003b08 <prvAddNewTaskToReadyList+0xcc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00e      	beq.n	8003af6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8003b04 <prvAddNewTaskToReadyList+0xc8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d207      	bcs.n	8003af6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <prvAddNewTaskToReadyList+0xdc>)
 8003ae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aec:	601a      	str	r2, [r3, #0]
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003af6:	bf00      	nop
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000d88 	.word	0x20000d88
 8003b04:	200008b4 	.word	0x200008b4
 8003b08:	20000d94 	.word	0x20000d94
 8003b0c:	20000da4 	.word	0x20000da4
 8003b10:	20000d90 	.word	0x20000d90
 8003b14:	200008b8 	.word	0x200008b8
 8003b18:	e000ed04 	.word	0xe000ed04

08003b1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003b24:	2300      	movs	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d018      	beq.n	8003b60 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003b2e:	4b14      	ldr	r3, [pc, #80]	@ (8003b80 <vTaskDelay+0x64>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00b      	beq.n	8003b4e <vTaskDelay+0x32>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	60bb      	str	r3, [r7, #8]
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	e7fd      	b.n	8003b4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b4e:	f000 f88b 	bl	8003c68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b52:	2100      	movs	r1, #0
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fd05 	bl	8004564 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b5a:	f000 f893 	bl	8003c84 <xTaskResumeAll>
 8003b5e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d107      	bne.n	8003b76 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003b66:	4b07      	ldr	r3, [pc, #28]	@ (8003b84 <vTaskDelay+0x68>)
 8003b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b6c:	601a      	str	r2, [r3, #0]
 8003b6e:	f3bf 8f4f 	dsb	sy
 8003b72:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	20000db0 	.word	0x20000db0
 8003b84:	e000ed04 	.word	0xe000ed04

08003b88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b08a      	sub	sp, #40	@ 0x28
 8003b8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b96:	463a      	mov	r2, r7
 8003b98:	1d39      	adds	r1, r7, #4
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fe ff2c 	bl	80029fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	9202      	str	r2, [sp, #8]
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	460a      	mov	r2, r1
 8003bb6:	4924      	ldr	r1, [pc, #144]	@ (8003c48 <vTaskStartScheduler+0xc0>)
 8003bb8:	4824      	ldr	r0, [pc, #144]	@ (8003c4c <vTaskStartScheduler+0xc4>)
 8003bba:	f7ff fdf1 	bl	80037a0 <xTaskCreateStatic>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	4a23      	ldr	r2, [pc, #140]	@ (8003c50 <vTaskStartScheduler+0xc8>)
 8003bc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003bc4:	4b22      	ldr	r3, [pc, #136]	@ (8003c50 <vTaskStartScheduler+0xc8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	e001      	b.n	8003bd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d102      	bne.n	8003be2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003bdc:	f000 fd16 	bl	800460c <xTimerCreateTimerTask>
 8003be0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d11b      	bne.n	8003c20 <vTaskStartScheduler+0x98>
	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	613b      	str	r3, [r7, #16]
}
 8003bfa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bfc:	4b15      	ldr	r3, [pc, #84]	@ (8003c54 <vTaskStartScheduler+0xcc>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3354      	adds	r3, #84	@ 0x54
 8003c02:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <vTaskStartScheduler+0xd0>)
 8003c04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c06:	4b15      	ldr	r3, [pc, #84]	@ (8003c5c <vTaskStartScheduler+0xd4>)
 8003c08:	f04f 32ff 	mov.w	r2, #4294967295
 8003c0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c0e:	4b14      	ldr	r3, [pc, #80]	@ (8003c60 <vTaskStartScheduler+0xd8>)
 8003c10:	2201      	movs	r2, #1
 8003c12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c14:	4b13      	ldr	r3, [pc, #76]	@ (8003c64 <vTaskStartScheduler+0xdc>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003c1a:	f001 f8cd 	bl	8004db8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003c1e:	e00f      	b.n	8003c40 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d10b      	bne.n	8003c40 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2c:	f383 8811 	msr	BASEPRI, r3
 8003c30:	f3bf 8f6f 	isb	sy
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	60fb      	str	r3, [r7, #12]
}
 8003c3a:	bf00      	nop
 8003c3c:	bf00      	nop
 8003c3e:	e7fd      	b.n	8003c3c <vTaskStartScheduler+0xb4>
}
 8003c40:	bf00      	nop
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	080056dc 	.word	0x080056dc
 8003c4c:	08004291 	.word	0x08004291
 8003c50:	20000dac 	.word	0x20000dac
 8003c54:	200008b4 	.word	0x200008b4
 8003c58:	20000010 	.word	0x20000010
 8003c5c:	20000da8 	.word	0x20000da8
 8003c60:	20000d94 	.word	0x20000d94
 8003c64:	20000d8c 	.word	0x20000d8c

08003c68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003c6c:	4b04      	ldr	r3, [pc, #16]	@ (8003c80 <vTaskSuspendAll+0x18>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	4a03      	ldr	r2, [pc, #12]	@ (8003c80 <vTaskSuspendAll+0x18>)
 8003c74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003c76:	bf00      	nop
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bc80      	pop	{r7}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20000db0 	.word	0x20000db0

08003c84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c92:	4b42      	ldr	r3, [pc, #264]	@ (8003d9c <xTaskResumeAll+0x118>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <xTaskResumeAll+0x2e>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	603b      	str	r3, [r7, #0]
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	e7fd      	b.n	8003cae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003cb2:	f001 f8f3 	bl	8004e9c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003cb6:	4b39      	ldr	r3, [pc, #228]	@ (8003d9c <xTaskResumeAll+0x118>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	4a37      	ldr	r2, [pc, #220]	@ (8003d9c <xTaskResumeAll+0x118>)
 8003cbe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc0:	4b36      	ldr	r3, [pc, #216]	@ (8003d9c <xTaskResumeAll+0x118>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d162      	bne.n	8003d8e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003cc8:	4b35      	ldr	r3, [pc, #212]	@ (8003da0 <xTaskResumeAll+0x11c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d05e      	beq.n	8003d8e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cd0:	e02f      	b.n	8003d32 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd2:	4b34      	ldr	r3, [pc, #208]	@ (8003da4 <xTaskResumeAll+0x120>)
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3318      	adds	r3, #24
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7fe ff44 	bl	8002b6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fe ff3f 	bl	8002b6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf2:	4b2d      	ldr	r3, [pc, #180]	@ (8003da8 <xTaskResumeAll+0x124>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d903      	bls.n	8003d02 <xTaskResumeAll+0x7e>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfe:	4a2a      	ldr	r2, [pc, #168]	@ (8003da8 <xTaskResumeAll+0x124>)
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d06:	4613      	mov	r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4a27      	ldr	r2, [pc, #156]	@ (8003dac <xTaskResumeAll+0x128>)
 8003d10:	441a      	add	r2, r3
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3304      	adds	r3, #4
 8003d16:	4619      	mov	r1, r3
 8003d18:	4610      	mov	r0, r2
 8003d1a:	f7fe fecc 	bl	8002ab6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d22:	4b23      	ldr	r3, [pc, #140]	@ (8003db0 <xTaskResumeAll+0x12c>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d302      	bcc.n	8003d32 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003d2c:	4b21      	ldr	r3, [pc, #132]	@ (8003db4 <xTaskResumeAll+0x130>)
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d32:	4b1c      	ldr	r3, [pc, #112]	@ (8003da4 <xTaskResumeAll+0x120>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1cb      	bne.n	8003cd2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d40:	f000 fb62 	bl	8004408 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003d44:	4b1c      	ldr	r3, [pc, #112]	@ (8003db8 <xTaskResumeAll+0x134>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d010      	beq.n	8003d72 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d50:	f000 f844 	bl	8003ddc <xTaskIncrementTick>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003d5a:	4b16      	ldr	r3, [pc, #88]	@ (8003db4 <xTaskResumeAll+0x130>)
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1f1      	bne.n	8003d50 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003d6c:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <xTaskResumeAll+0x134>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d72:	4b10      	ldr	r3, [pc, #64]	@ (8003db4 <xTaskResumeAll+0x130>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d009      	beq.n	8003d8e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003dbc <xTaskResumeAll+0x138>)
 8003d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d84:	601a      	str	r2, [r3, #0]
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d8e:	f001 f8b5 	bl	8004efc <vPortExitCritical>

	return xAlreadyYielded;
 8003d92:	68bb      	ldr	r3, [r7, #8]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	20000db0 	.word	0x20000db0
 8003da0:	20000d88 	.word	0x20000d88
 8003da4:	20000d48 	.word	0x20000d48
 8003da8:	20000d90 	.word	0x20000d90
 8003dac:	200008b8 	.word	0x200008b8
 8003db0:	200008b4 	.word	0x200008b4
 8003db4:	20000d9c 	.word	0x20000d9c
 8003db8:	20000d98 	.word	0x20000d98
 8003dbc:	e000ed04 	.word	0xe000ed04

08003dc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003dc6:	4b04      	ldr	r3, [pc, #16]	@ (8003dd8 <xTaskGetTickCount+0x18>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003dcc:	687b      	ldr	r3, [r7, #4]
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	20000d8c 	.word	0x20000d8c

08003ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003de6:	4b4f      	ldr	r3, [pc, #316]	@ (8003f24 <xTaskIncrementTick+0x148>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f040 8090 	bne.w	8003f10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003df0:	4b4d      	ldr	r3, [pc, #308]	@ (8003f28 <xTaskIncrementTick+0x14c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	3301      	adds	r3, #1
 8003df6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003df8:	4a4b      	ldr	r2, [pc, #300]	@ (8003f28 <xTaskIncrementTick+0x14c>)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d121      	bne.n	8003e48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e04:	4b49      	ldr	r3, [pc, #292]	@ (8003f2c <xTaskIncrementTick+0x150>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e12:	f383 8811 	msr	BASEPRI, r3
 8003e16:	f3bf 8f6f 	isb	sy
 8003e1a:	f3bf 8f4f 	dsb	sy
 8003e1e:	603b      	str	r3, [r7, #0]
}
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	e7fd      	b.n	8003e22 <xTaskIncrementTick+0x46>
 8003e26:	4b41      	ldr	r3, [pc, #260]	@ (8003f2c <xTaskIncrementTick+0x150>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	4b40      	ldr	r3, [pc, #256]	@ (8003f30 <xTaskIncrementTick+0x154>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a3e      	ldr	r2, [pc, #248]	@ (8003f2c <xTaskIncrementTick+0x150>)
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	4a3e      	ldr	r2, [pc, #248]	@ (8003f30 <xTaskIncrementTick+0x154>)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003f34 <xTaskIncrementTick+0x158>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	4a3c      	ldr	r2, [pc, #240]	@ (8003f34 <xTaskIncrementTick+0x158>)
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	f000 fae0 	bl	8004408 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e48:	4b3b      	ldr	r3, [pc, #236]	@ (8003f38 <xTaskIncrementTick+0x15c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d349      	bcc.n	8003ee6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e52:	4b36      	ldr	r3, [pc, #216]	@ (8003f2c <xTaskIncrementTick+0x150>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d104      	bne.n	8003e66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e5c:	4b36      	ldr	r3, [pc, #216]	@ (8003f38 <xTaskIncrementTick+0x15c>)
 8003e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e62:	601a      	str	r2, [r3, #0]
					break;
 8003e64:	e03f      	b.n	8003ee6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e66:	4b31      	ldr	r3, [pc, #196]	@ (8003f2c <xTaskIncrementTick+0x150>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d203      	bcs.n	8003e86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e7e:	4a2e      	ldr	r2, [pc, #184]	@ (8003f38 <xTaskIncrementTick+0x15c>)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e84:	e02f      	b.n	8003ee6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7fe fe6e 	bl	8002b6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d004      	beq.n	8003ea2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	3318      	adds	r3, #24
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe fe65 	bl	8002b6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ea6:	4b25      	ldr	r3, [pc, #148]	@ (8003f3c <xTaskIncrementTick+0x160>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d903      	bls.n	8003eb6 <xTaskIncrementTick+0xda>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb2:	4a22      	ldr	r2, [pc, #136]	@ (8003f3c <xTaskIncrementTick+0x160>)
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f40 <xTaskIncrementTick+0x164>)
 8003ec4:	441a      	add	r2, r3
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	3304      	adds	r3, #4
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4610      	mov	r0, r2
 8003ece:	f7fe fdf2 	bl	8002ab6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f44 <xTaskIncrementTick+0x168>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d3b8      	bcc.n	8003e52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ee4:	e7b5      	b.n	8003e52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003ee6:	4b17      	ldr	r3, [pc, #92]	@ (8003f44 <xTaskIncrementTick+0x168>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eec:	4914      	ldr	r1, [pc, #80]	@ (8003f40 <xTaskIncrementTick+0x164>)
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d901      	bls.n	8003f02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003efe:	2301      	movs	r3, #1
 8003f00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003f02:	4b11      	ldr	r3, [pc, #68]	@ (8003f48 <xTaskIncrementTick+0x16c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	e004      	b.n	8003f1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003f10:	4b0e      	ldr	r3, [pc, #56]	@ (8003f4c <xTaskIncrementTick+0x170>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	4a0d      	ldr	r2, [pc, #52]	@ (8003f4c <xTaskIncrementTick+0x170>)
 8003f18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003f1a:	697b      	ldr	r3, [r7, #20]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3718      	adds	r7, #24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	20000db0 	.word	0x20000db0
 8003f28:	20000d8c 	.word	0x20000d8c
 8003f2c:	20000d40 	.word	0x20000d40
 8003f30:	20000d44 	.word	0x20000d44
 8003f34:	20000da0 	.word	0x20000da0
 8003f38:	20000da8 	.word	0x20000da8
 8003f3c:	20000d90 	.word	0x20000d90
 8003f40:	200008b8 	.word	0x200008b8
 8003f44:	200008b4 	.word	0x200008b4
 8003f48:	20000d9c 	.word	0x20000d9c
 8003f4c:	20000d98 	.word	0x20000d98

08003f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b085      	sub	sp, #20
 8003f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f56:	4b2a      	ldr	r3, [pc, #168]	@ (8004000 <vTaskSwitchContext+0xb0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f5e:	4b29      	ldr	r3, [pc, #164]	@ (8004004 <vTaskSwitchContext+0xb4>)
 8003f60:	2201      	movs	r2, #1
 8003f62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f64:	e047      	b.n	8003ff6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003f66:	4b27      	ldr	r3, [pc, #156]	@ (8004004 <vTaskSwitchContext+0xb4>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f6c:	4b26      	ldr	r3, [pc, #152]	@ (8004008 <vTaskSwitchContext+0xb8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	e011      	b.n	8003f98 <vTaskSwitchContext+0x48>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <vTaskSwitchContext+0x42>
	__asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	607b      	str	r3, [r7, #4]
}
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	e7fd      	b.n	8003f8e <vTaskSwitchContext+0x3e>
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	3b01      	subs	r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	491c      	ldr	r1, [pc, #112]	@ (800400c <vTaskSwitchContext+0xbc>)
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d0e3      	beq.n	8003f74 <vTaskSwitchContext+0x24>
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4a15      	ldr	r2, [pc, #84]	@ (800400c <vTaskSwitchContext+0xbc>)
 8003fb8:	4413      	add	r3, r2
 8003fba:	60bb      	str	r3, [r7, #8]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	3308      	adds	r3, #8
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d104      	bne.n	8003fdc <vTaskSwitchContext+0x8c>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	605a      	str	r2, [r3, #4]
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8004010 <vTaskSwitchContext+0xc0>)
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	4a08      	ldr	r2, [pc, #32]	@ (8004008 <vTaskSwitchContext+0xb8>)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fec:	4b08      	ldr	r3, [pc, #32]	@ (8004010 <vTaskSwitchContext+0xc0>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3354      	adds	r3, #84	@ 0x54
 8003ff2:	4a08      	ldr	r2, [pc, #32]	@ (8004014 <vTaskSwitchContext+0xc4>)
 8003ff4:	6013      	str	r3, [r2, #0]
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bc80      	pop	{r7}
 8003ffe:	4770      	bx	lr
 8004000:	20000db0 	.word	0x20000db0
 8004004:	20000d9c 	.word	0x20000d9c
 8004008:	20000d90 	.word	0x20000d90
 800400c:	200008b8 	.word	0x200008b8
 8004010:	200008b4 	.word	0x200008b4
 8004014:	20000010 	.word	0x20000010

08004018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d10b      	bne.n	8004040 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800402c:	f383 8811 	msr	BASEPRI, r3
 8004030:	f3bf 8f6f 	isb	sy
 8004034:	f3bf 8f4f 	dsb	sy
 8004038:	60fb      	str	r3, [r7, #12]
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	e7fd      	b.n	800403c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004040:	4b07      	ldr	r3, [pc, #28]	@ (8004060 <vTaskPlaceOnEventList+0x48>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3318      	adds	r3, #24
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7fe fd57 	bl	8002afc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800404e:	2101      	movs	r1, #1
 8004050:	6838      	ldr	r0, [r7, #0]
 8004052:	f000 fa87 	bl	8004564 <prvAddCurrentTaskToDelayedList>
}
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200008b4 	.word	0x200008b4

08004064 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d10b      	bne.n	800408e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407a:	f383 8811 	msr	BASEPRI, r3
 800407e:	f3bf 8f6f 	isb	sy
 8004082:	f3bf 8f4f 	dsb	sy
 8004086:	617b      	str	r3, [r7, #20]
}
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	e7fd      	b.n	800408a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800408e:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3318      	adds	r3, #24
 8004094:	4619      	mov	r1, r3
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f7fe fd0d 	bl	8002ab6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d002      	beq.n	80040a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80040a2:	f04f 33ff 	mov.w	r3, #4294967295
 80040a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	68b8      	ldr	r0, [r7, #8]
 80040ac:	f000 fa5a 	bl	8004564 <prvAddCurrentTaskToDelayedList>
	}
 80040b0:	bf00      	nop
 80040b2:	3718      	adds	r7, #24
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	200008b4 	.word	0x200008b4

080040bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b086      	sub	sp, #24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	60fb      	str	r3, [r7, #12]
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	e7fd      	b.n	80040e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	3318      	adds	r3, #24
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7fe fd3c 	bl	8002b6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f4:	4b1d      	ldr	r3, [pc, #116]	@ (800416c <xTaskRemoveFromEventList+0xb0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d11d      	bne.n	8004138 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	3304      	adds	r3, #4
 8004100:	4618      	mov	r0, r3
 8004102:	f7fe fd33 	bl	8002b6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800410a:	4b19      	ldr	r3, [pc, #100]	@ (8004170 <xTaskRemoveFromEventList+0xb4>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	429a      	cmp	r2, r3
 8004110:	d903      	bls.n	800411a <xTaskRemoveFromEventList+0x5e>
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004116:	4a16      	ldr	r2, [pc, #88]	@ (8004170 <xTaskRemoveFromEventList+0xb4>)
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4a13      	ldr	r2, [pc, #76]	@ (8004174 <xTaskRemoveFromEventList+0xb8>)
 8004128:	441a      	add	r2, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	3304      	adds	r3, #4
 800412e:	4619      	mov	r1, r3
 8004130:	4610      	mov	r0, r2
 8004132:	f7fe fcc0 	bl	8002ab6 <vListInsertEnd>
 8004136:	e005      	b.n	8004144 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	3318      	adds	r3, #24
 800413c:	4619      	mov	r1, r3
 800413e:	480e      	ldr	r0, [pc, #56]	@ (8004178 <xTaskRemoveFromEventList+0xbc>)
 8004140:	f7fe fcb9 	bl	8002ab6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004148:	4b0c      	ldr	r3, [pc, #48]	@ (800417c <xTaskRemoveFromEventList+0xc0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414e:	429a      	cmp	r2, r3
 8004150:	d905      	bls.n	800415e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004152:	2301      	movs	r3, #1
 8004154:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004156:	4b0a      	ldr	r3, [pc, #40]	@ (8004180 <xTaskRemoveFromEventList+0xc4>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e001      	b.n	8004162 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004162:	697b      	ldr	r3, [r7, #20]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000db0 	.word	0x20000db0
 8004170:	20000d90 	.word	0x20000d90
 8004174:	200008b8 	.word	0x200008b8
 8004178:	20000d48 	.word	0x20000d48
 800417c:	200008b4 	.word	0x200008b4
 8004180:	20000d9c 	.word	0x20000d9c

08004184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <vTaskInternalSetTimeOutState+0x24>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <vTaskInternalSetTimeOutState+0x28>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	605a      	str	r2, [r3, #4]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000da0 	.word	0x20000da0
 80041ac:	20000d8c 	.word	0x20000d8c

080041b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10b      	bne.n	80041d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	613b      	str	r3, [r7, #16]
}
 80041d2:	bf00      	nop
 80041d4:	bf00      	nop
 80041d6:	e7fd      	b.n	80041d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10b      	bne.n	80041f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	60fb      	str	r3, [r7, #12]
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	e7fd      	b.n	80041f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80041f6:	f000 fe51 	bl	8004e9c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004270 <xTaskCheckForTimeOut+0xc0>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004212:	d102      	bne.n	800421a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	e023      	b.n	8004262 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b15      	ldr	r3, [pc, #84]	@ (8004274 <xTaskCheckForTimeOut+0xc4>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d007      	beq.n	8004236 <xTaskCheckForTimeOut+0x86>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	69ba      	ldr	r2, [r7, #24]
 800422c:	429a      	cmp	r2, r3
 800422e:	d302      	bcc.n	8004236 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004230:	2301      	movs	r3, #1
 8004232:	61fb      	str	r3, [r7, #28]
 8004234:	e015      	b.n	8004262 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	429a      	cmp	r2, r3
 800423e:	d20b      	bcs.n	8004258 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	1ad2      	subs	r2, r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff ff99 	bl	8004184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	e004      	b.n	8004262 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	2200      	movs	r2, #0
 800425c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800425e:	2301      	movs	r3, #1
 8004260:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004262:	f000 fe4b 	bl	8004efc <vPortExitCritical>

	return xReturn;
 8004266:	69fb      	ldr	r3, [r7, #28]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3720      	adds	r7, #32
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	20000d8c 	.word	0x20000d8c
 8004274:	20000da0 	.word	0x20000da0

08004278 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800427c:	4b03      	ldr	r3, [pc, #12]	@ (800428c <vTaskMissedYield+0x14>)
 800427e:	2201      	movs	r2, #1
 8004280:	601a      	str	r2, [r3, #0]
}
 8004282:	bf00      	nop
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	20000d9c 	.word	0x20000d9c

08004290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004298:	f000 f852 	bl	8004340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800429c:	4b06      	ldr	r3, [pc, #24]	@ (80042b8 <prvIdleTask+0x28>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d9f9      	bls.n	8004298 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042a4:	4b05      	ldr	r3, [pc, #20]	@ (80042bc <prvIdleTask+0x2c>)
 80042a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042b4:	e7f0      	b.n	8004298 <prvIdleTask+0x8>
 80042b6:	bf00      	nop
 80042b8:	200008b8 	.word	0x200008b8
 80042bc:	e000ed04 	.word	0xe000ed04

080042c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042c6:	2300      	movs	r3, #0
 80042c8:	607b      	str	r3, [r7, #4]
 80042ca:	e00c      	b.n	80042e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	4613      	mov	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4413      	add	r3, r2
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	4a12      	ldr	r2, [pc, #72]	@ (8004320 <prvInitialiseTaskLists+0x60>)
 80042d8:	4413      	add	r3, r2
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fe fbc0 	bl	8002a60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3301      	adds	r3, #1
 80042e4:	607b      	str	r3, [r7, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b37      	cmp	r3, #55	@ 0x37
 80042ea:	d9ef      	bls.n	80042cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042ec:	480d      	ldr	r0, [pc, #52]	@ (8004324 <prvInitialiseTaskLists+0x64>)
 80042ee:	f7fe fbb7 	bl	8002a60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042f2:	480d      	ldr	r0, [pc, #52]	@ (8004328 <prvInitialiseTaskLists+0x68>)
 80042f4:	f7fe fbb4 	bl	8002a60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042f8:	480c      	ldr	r0, [pc, #48]	@ (800432c <prvInitialiseTaskLists+0x6c>)
 80042fa:	f7fe fbb1 	bl	8002a60 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042fe:	480c      	ldr	r0, [pc, #48]	@ (8004330 <prvInitialiseTaskLists+0x70>)
 8004300:	f7fe fbae 	bl	8002a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004304:	480b      	ldr	r0, [pc, #44]	@ (8004334 <prvInitialiseTaskLists+0x74>)
 8004306:	f7fe fbab 	bl	8002a60 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800430a:	4b0b      	ldr	r3, [pc, #44]	@ (8004338 <prvInitialiseTaskLists+0x78>)
 800430c:	4a05      	ldr	r2, [pc, #20]	@ (8004324 <prvInitialiseTaskLists+0x64>)
 800430e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004310:	4b0a      	ldr	r3, [pc, #40]	@ (800433c <prvInitialiseTaskLists+0x7c>)
 8004312:	4a05      	ldr	r2, [pc, #20]	@ (8004328 <prvInitialiseTaskLists+0x68>)
 8004314:	601a      	str	r2, [r3, #0]
}
 8004316:	bf00      	nop
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	200008b8 	.word	0x200008b8
 8004324:	20000d18 	.word	0x20000d18
 8004328:	20000d2c 	.word	0x20000d2c
 800432c:	20000d48 	.word	0x20000d48
 8004330:	20000d5c 	.word	0x20000d5c
 8004334:	20000d74 	.word	0x20000d74
 8004338:	20000d40 	.word	0x20000d40
 800433c:	20000d44 	.word	0x20000d44

08004340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004346:	e019      	b.n	800437c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004348:	f000 fda8 	bl	8004e9c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800434c:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <prvCheckTasksWaitingTermination+0x50>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	4618      	mov	r0, r3
 800435a:	f7fe fc07 	bl	8002b6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800435e:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <prvCheckTasksWaitingTermination+0x54>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3b01      	subs	r3, #1
 8004364:	4a0b      	ldr	r2, [pc, #44]	@ (8004394 <prvCheckTasksWaitingTermination+0x54>)
 8004366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004368:	4b0b      	ldr	r3, [pc, #44]	@ (8004398 <prvCheckTasksWaitingTermination+0x58>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	3b01      	subs	r3, #1
 800436e:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <prvCheckTasksWaitingTermination+0x58>)
 8004370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004372:	f000 fdc3 	bl	8004efc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f810 	bl	800439c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800437c:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <prvCheckTasksWaitingTermination+0x58>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e1      	bne.n	8004348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004384:	bf00      	nop
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	20000d5c 	.word	0x20000d5c
 8004394:	20000d88 	.word	0x20000d88
 8004398:	20000d70 	.word	0x20000d70

0800439c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3354      	adds	r3, #84	@ 0x54
 80043a8:	4618      	mov	r0, r3
 80043aa:	f001 f86d 	bl	8005488 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d108      	bne.n	80043ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 ff3d 	bl	800523c <vPortFree>
				vPortFree( pxTCB );
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 ff3a 	bl	800523c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043c8:	e019      	b.n	80043fe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d103      	bne.n	80043dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 ff31 	bl	800523c <vPortFree>
	}
 80043da:	e010      	b.n	80043fe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d00b      	beq.n	80043fe <prvDeleteTCB+0x62>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	60fb      	str	r3, [r7, #12]
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	e7fd      	b.n	80043fa <prvDeleteTCB+0x5e>
	}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
	...

08004408 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800440e:	4b0c      	ldr	r3, [pc, #48]	@ (8004440 <prvResetNextTaskUnblockTime+0x38>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004418:	4b0a      	ldr	r3, [pc, #40]	@ (8004444 <prvResetNextTaskUnblockTime+0x3c>)
 800441a:	f04f 32ff 	mov.w	r2, #4294967295
 800441e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004420:	e008      	b.n	8004434 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004422:	4b07      	ldr	r3, [pc, #28]	@ (8004440 <prvResetNextTaskUnblockTime+0x38>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	4a04      	ldr	r2, [pc, #16]	@ (8004444 <prvResetNextTaskUnblockTime+0x3c>)
 8004432:	6013      	str	r3, [r2, #0]
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000d40 	.word	0x20000d40
 8004444:	20000da8 	.word	0x20000da8

08004448 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800444e:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <xTaskGetSchedulerState+0x34>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004456:	2301      	movs	r3, #1
 8004458:	607b      	str	r3, [r7, #4]
 800445a:	e008      	b.n	800446e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800445c:	4b08      	ldr	r3, [pc, #32]	@ (8004480 <xTaskGetSchedulerState+0x38>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d102      	bne.n	800446a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004464:	2302      	movs	r3, #2
 8004466:	607b      	str	r3, [r7, #4]
 8004468:	e001      	b.n	800446e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800446a:	2300      	movs	r3, #0
 800446c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800446e:	687b      	ldr	r3, [r7, #4]
	}
 8004470:	4618      	mov	r0, r3
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000d94 	.word	0x20000d94
 8004480:	20000db0 	.word	0x20000db0

08004484 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d058      	beq.n	800454c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800449a:	4b2f      	ldr	r3, [pc, #188]	@ (8004558 <xTaskPriorityDisinherit+0xd4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d00b      	beq.n	80044bc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	60fb      	str	r3, [r7, #12]
}
 80044b6:	bf00      	nop
 80044b8:	bf00      	nop
 80044ba:	e7fd      	b.n	80044b8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	60bb      	str	r3, [r7, #8]
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	e7fd      	b.n	80044d8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e0:	1e5a      	subs	r2, r3, #1
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d02c      	beq.n	800454c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d128      	bne.n	800454c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	3304      	adds	r3, #4
 80044fe:	4618      	mov	r0, r3
 8004500:	f7fe fb34 	bl	8002b6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800451c:	4b0f      	ldr	r3, [pc, #60]	@ (800455c <xTaskPriorityDisinherit+0xd8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	429a      	cmp	r2, r3
 8004522:	d903      	bls.n	800452c <xTaskPriorityDisinherit+0xa8>
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004528:	4a0c      	ldr	r2, [pc, #48]	@ (800455c <xTaskPriorityDisinherit+0xd8>)
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4a09      	ldr	r2, [pc, #36]	@ (8004560 <xTaskPriorityDisinherit+0xdc>)
 800453a:	441a      	add	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	3304      	adds	r3, #4
 8004540:	4619      	mov	r1, r3
 8004542:	4610      	mov	r0, r2
 8004544:	f7fe fab7 	bl	8002ab6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004548:	2301      	movs	r3, #1
 800454a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800454c:	697b      	ldr	r3, [r7, #20]
	}
 800454e:	4618      	mov	r0, r3
 8004550:	3718      	adds	r7, #24
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	200008b4 	.word	0x200008b4
 800455c:	20000d90 	.word	0x20000d90
 8004560:	200008b8 	.word	0x200008b8

08004564 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800456e:	4b21      	ldr	r3, [pc, #132]	@ (80045f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004574:	4b20      	ldr	r3, [pc, #128]	@ (80045f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3304      	adds	r3, #4
 800457a:	4618      	mov	r0, r3
 800457c:	f7fe faf6 	bl	8002b6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004586:	d10a      	bne.n	800459e <prvAddCurrentTaskToDelayedList+0x3a>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800458e:	4b1a      	ldr	r3, [pc, #104]	@ (80045f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3304      	adds	r3, #4
 8004594:	4619      	mov	r1, r3
 8004596:	4819      	ldr	r0, [pc, #100]	@ (80045fc <prvAddCurrentTaskToDelayedList+0x98>)
 8004598:	f7fe fa8d 	bl	8002ab6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800459c:	e026      	b.n	80045ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4413      	add	r3, r2
 80045a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80045a6:	4b14      	ldr	r3, [pc, #80]	@ (80045f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d209      	bcs.n	80045ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045b6:	4b12      	ldr	r3, [pc, #72]	@ (8004600 <prvAddCurrentTaskToDelayedList+0x9c>)
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	4b0f      	ldr	r3, [pc, #60]	@ (80045f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3304      	adds	r3, #4
 80045c0:	4619      	mov	r1, r3
 80045c2:	4610      	mov	r0, r2
 80045c4:	f7fe fa9a 	bl	8002afc <vListInsert>
}
 80045c8:	e010      	b.n	80045ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004604 <prvAddCurrentTaskToDelayedList+0xa0>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4b0a      	ldr	r3, [pc, #40]	@ (80045f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4619      	mov	r1, r3
 80045d6:	4610      	mov	r0, r2
 80045d8:	f7fe fa90 	bl	8002afc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d202      	bcs.n	80045ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045e6:	4a08      	ldr	r2, [pc, #32]	@ (8004608 <prvAddCurrentTaskToDelayedList+0xa4>)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6013      	str	r3, [r2, #0]
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	20000d8c 	.word	0x20000d8c
 80045f8:	200008b4 	.word	0x200008b4
 80045fc:	20000d74 	.word	0x20000d74
 8004600:	20000d44 	.word	0x20000d44
 8004604:	20000d40 	.word	0x20000d40
 8004608:	20000da8 	.word	0x20000da8

0800460c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	@ 0x28
 8004610:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004612:	2300      	movs	r3, #0
 8004614:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004616:	f000 fb11 	bl	8004c3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800461a:	4b1d      	ldr	r3, [pc, #116]	@ (8004690 <xTimerCreateTimerTask+0x84>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d021      	beq.n	8004666 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800462a:	1d3a      	adds	r2, r7, #4
 800462c:	f107 0108 	add.w	r1, r7, #8
 8004630:	f107 030c 	add.w	r3, r7, #12
 8004634:	4618      	mov	r0, r3
 8004636:	f7fe f9f9 	bl	8002a2c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	9202      	str	r2, [sp, #8]
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	2302      	movs	r3, #2
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2300      	movs	r3, #0
 800464a:	460a      	mov	r2, r1
 800464c:	4911      	ldr	r1, [pc, #68]	@ (8004694 <xTimerCreateTimerTask+0x88>)
 800464e:	4812      	ldr	r0, [pc, #72]	@ (8004698 <xTimerCreateTimerTask+0x8c>)
 8004650:	f7ff f8a6 	bl	80037a0 <xTaskCreateStatic>
 8004654:	4603      	mov	r3, r0
 8004656:	4a11      	ldr	r2, [pc, #68]	@ (800469c <xTimerCreateTimerTask+0x90>)
 8004658:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800465a:	4b10      	ldr	r3, [pc, #64]	@ (800469c <xTimerCreateTimerTask+0x90>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004662:	2301      	movs	r3, #1
 8004664:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	613b      	str	r3, [r7, #16]
}
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004684:	697b      	ldr	r3, [r7, #20]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	20000de4 	.word	0x20000de4
 8004694:	080056e4 	.word	0x080056e4
 8004698:	080047d9 	.word	0x080047d9
 800469c:	20000de8 	.word	0x20000de8

080046a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b08a      	sub	sp, #40	@ 0x28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
 80046ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10b      	bne.n	80046d0 <xTimerGenericCommand+0x30>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	623b      	str	r3, [r7, #32]
}
 80046ca:	bf00      	nop
 80046cc:	bf00      	nop
 80046ce:	e7fd      	b.n	80046cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80046d0:	4b19      	ldr	r3, [pc, #100]	@ (8004738 <xTimerGenericCommand+0x98>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d02a      	beq.n	800472e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	dc18      	bgt.n	800471c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046ea:	f7ff fead 	bl	8004448 <xTaskGetSchedulerState>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b02      	cmp	r3, #2
 80046f2:	d109      	bne.n	8004708 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046f4:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <xTimerGenericCommand+0x98>)
 80046f6:	6818      	ldr	r0, [r3, #0]
 80046f8:	f107 0110 	add.w	r1, r7, #16
 80046fc:	2300      	movs	r3, #0
 80046fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004700:	f7fe fc12 	bl	8002f28 <xQueueGenericSend>
 8004704:	6278      	str	r0, [r7, #36]	@ 0x24
 8004706:	e012      	b.n	800472e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004708:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <xTimerGenericCommand+0x98>)
 800470a:	6818      	ldr	r0, [r3, #0]
 800470c:	f107 0110 	add.w	r1, r7, #16
 8004710:	2300      	movs	r3, #0
 8004712:	2200      	movs	r2, #0
 8004714:	f7fe fc08 	bl	8002f28 <xQueueGenericSend>
 8004718:	6278      	str	r0, [r7, #36]	@ 0x24
 800471a:	e008      	b.n	800472e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800471c:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <xTimerGenericCommand+0x98>)
 800471e:	6818      	ldr	r0, [r3, #0]
 8004720:	f107 0110 	add.w	r1, r7, #16
 8004724:	2300      	movs	r3, #0
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	f7fe fd00 	bl	800312c <xQueueGenericSendFromISR>
 800472c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004730:	4618      	mov	r0, r3
 8004732:	3728      	adds	r7, #40	@ 0x28
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}
 8004738:	20000de4 	.word	0x20000de4

0800473c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b088      	sub	sp, #32
 8004740:	af02      	add	r7, sp, #8
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004746:	4b23      	ldr	r3, [pc, #140]	@ (80047d4 <prvProcessExpiredTimer+0x98>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	3304      	adds	r3, #4
 8004754:	4618      	mov	r0, r3
 8004756:	f7fe fa09 	bl	8002b6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d023      	beq.n	80047b0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	699a      	ldr	r2, [r3, #24]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	18d1      	adds	r1, r2, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	683a      	ldr	r2, [r7, #0]
 8004774:	6978      	ldr	r0, [r7, #20]
 8004776:	f000 f8d3 	bl	8004920 <prvInsertTimerInActiveList>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d020      	beq.n	80047c2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004780:	2300      	movs	r3, #0
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2300      	movs	r3, #0
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	2100      	movs	r1, #0
 800478a:	6978      	ldr	r0, [r7, #20]
 800478c:	f7ff ff88 	bl	80046a0 <xTimerGenericCommand>
 8004790:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d114      	bne.n	80047c2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479c:	f383 8811 	msr	BASEPRI, r3
 80047a0:	f3bf 8f6f 	isb	sy
 80047a4:	f3bf 8f4f 	dsb	sy
 80047a8:	60fb      	str	r3, [r7, #12]
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	e7fd      	b.n	80047ac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047b6:	f023 0301 	bic.w	r3, r3, #1
 80047ba:	b2da      	uxtb	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	6978      	ldr	r0, [r7, #20]
 80047c8:	4798      	blx	r3
}
 80047ca:	bf00      	nop
 80047cc:	3718      	adds	r7, #24
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000ddc 	.word	0x20000ddc

080047d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047e0:	f107 0308 	add.w	r3, r7, #8
 80047e4:	4618      	mov	r0, r3
 80047e6:	f000 f859 	bl	800489c <prvGetNextExpireTime>
 80047ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	4619      	mov	r1, r3
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 f805 	bl	8004800 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80047f6:	f000 f8d5 	bl	80049a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80047fa:	bf00      	nop
 80047fc:	e7f0      	b.n	80047e0 <prvTimerTask+0x8>
	...

08004800 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800480a:	f7ff fa2d 	bl	8003c68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800480e:	f107 0308 	add.w	r3, r7, #8
 8004812:	4618      	mov	r0, r3
 8004814:	f000 f864 	bl	80048e0 <prvSampleTimeNow>
 8004818:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d130      	bne.n	8004882 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <prvProcessTimerOrBlockTask+0x3c>
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	429a      	cmp	r2, r3
 800482c:	d806      	bhi.n	800483c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800482e:	f7ff fa29 	bl	8003c84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7ff ff81 	bl	800473c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800483a:	e024      	b.n	8004886 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d008      	beq.n	8004854 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004842:	4b13      	ldr	r3, [pc, #76]	@ (8004890 <prvProcessTimerOrBlockTask+0x90>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d101      	bne.n	8004850 <prvProcessTimerOrBlockTask+0x50>
 800484c:	2301      	movs	r3, #1
 800484e:	e000      	b.n	8004852 <prvProcessTimerOrBlockTask+0x52>
 8004850:	2300      	movs	r3, #0
 8004852:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004854:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <prvProcessTimerOrBlockTask+0x94>)
 8004856:	6818      	ldr	r0, [r3, #0]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	4619      	mov	r1, r3
 8004862:	f7fe ff69 	bl	8003738 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004866:	f7ff fa0d 	bl	8003c84 <xTaskResumeAll>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10a      	bne.n	8004886 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004870:	4b09      	ldr	r3, [pc, #36]	@ (8004898 <prvProcessTimerOrBlockTask+0x98>)
 8004872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004876:	601a      	str	r2, [r3, #0]
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	f3bf 8f6f 	isb	sy
}
 8004880:	e001      	b.n	8004886 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004882:	f7ff f9ff 	bl	8003c84 <xTaskResumeAll>
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000de0 	.word	0x20000de0
 8004894:	20000de4 	.word	0x20000de4
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80048a4:	4b0d      	ldr	r3, [pc, #52]	@ (80048dc <prvGetNextExpireTime+0x40>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <prvGetNextExpireTime+0x16>
 80048ae:	2201      	movs	r2, #1
 80048b0:	e000      	b.n	80048b4 <prvGetNextExpireTime+0x18>
 80048b2:	2200      	movs	r2, #0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048c0:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <prvGetNextExpireTime+0x40>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	e001      	b.n	80048d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80048d0:	68fb      	ldr	r3, [r7, #12]
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr
 80048dc:	20000ddc 	.word	0x20000ddc

080048e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80048e8:	f7ff fa6a 	bl	8003dc0 <xTaskGetTickCount>
 80048ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80048ee:	4b0b      	ldr	r3, [pc, #44]	@ (800491c <prvSampleTimeNow+0x3c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d205      	bcs.n	8004904 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80048f8:	f000 f93a 	bl	8004b70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	601a      	str	r2, [r3, #0]
 8004902:	e002      	b.n	800490a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800490a:	4a04      	ldr	r2, [pc, #16]	@ (800491c <prvSampleTimeNow+0x3c>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000dec 	.word	0x20000dec

08004920 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	607a      	str	r2, [r7, #4]
 800492c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800492e:	2300      	movs	r3, #0
 8004930:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	429a      	cmp	r2, r3
 8004944:	d812      	bhi.n	800496c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	1ad2      	subs	r2, r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	429a      	cmp	r2, r3
 8004952:	d302      	bcc.n	800495a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e01b      	b.n	8004992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800495a:	4b10      	ldr	r3, [pc, #64]	@ (800499c <prvInsertTimerInActiveList+0x7c>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3304      	adds	r3, #4
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f7fe f8c9 	bl	8002afc <vListInsert>
 800496a:	e012      	b.n	8004992 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d206      	bcs.n	8004982 <prvInsertTimerInActiveList+0x62>
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	429a      	cmp	r2, r3
 800497a:	d302      	bcc.n	8004982 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800497c:	2301      	movs	r3, #1
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	e007      	b.n	8004992 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004982:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <prvInsertTimerInActiveList+0x80>)
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3304      	adds	r3, #4
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7fe f8b5 	bl	8002afc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004992:	697b      	ldr	r3, [r7, #20]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000de0 	.word	0x20000de0
 80049a0:	20000ddc 	.word	0x20000ddc

080049a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08e      	sub	sp, #56	@ 0x38
 80049a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049aa:	e0ce      	b.n	8004b4a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	da19      	bge.n	80049e6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80049b2:	1d3b      	adds	r3, r7, #4
 80049b4:	3304      	adds	r3, #4
 80049b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80049b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10b      	bne.n	80049d6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	61fb      	str	r3, [r7, #28]
}
 80049d0:	bf00      	nop
 80049d2:	bf00      	nop
 80049d4:	e7fd      	b.n	80049d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80049d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049dc:	6850      	ldr	r0, [r2, #4]
 80049de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049e0:	6892      	ldr	r2, [r2, #8]
 80049e2:	4611      	mov	r1, r2
 80049e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f2c0 80ae 	blt.w	8004b4a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80049f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d004      	beq.n	8004a04 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fc:	3304      	adds	r3, #4
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fe f8b4 	bl	8002b6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a04:	463b      	mov	r3, r7
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ff6a 	bl	80048e0 <prvSampleTimeNow>
 8004a0c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2b09      	cmp	r3, #9
 8004a12:	f200 8097 	bhi.w	8004b44 <prvProcessReceivedCommands+0x1a0>
 8004a16:	a201      	add	r2, pc, #4	@ (adr r2, 8004a1c <prvProcessReceivedCommands+0x78>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a45 	.word	0x08004a45
 8004a20:	08004a45 	.word	0x08004a45
 8004a24:	08004a45 	.word	0x08004a45
 8004a28:	08004abb 	.word	0x08004abb
 8004a2c:	08004acf 	.word	0x08004acf
 8004a30:	08004b1b 	.word	0x08004b1b
 8004a34:	08004a45 	.word	0x08004a45
 8004a38:	08004a45 	.word	0x08004a45
 8004a3c:	08004abb 	.word	0x08004abb
 8004a40:	08004acf 	.word	0x08004acf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a4a:	f043 0301 	orr.w	r3, r3, #1
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	18d1      	adds	r1, r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a64:	f7ff ff5c 	bl	8004920 <prvInsertTimerInActiveList>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d06c      	beq.n	8004b48 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	6a1b      	ldr	r3, [r3, #32]
 8004a72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d061      	beq.n	8004b48 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	441a      	add	r2, r3
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9300      	str	r3, [sp, #0]
 8004a90:	2300      	movs	r3, #0
 8004a92:	2100      	movs	r1, #0
 8004a94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a96:	f7ff fe03 	bl	80046a0 <xTimerGenericCommand>
 8004a9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d152      	bne.n	8004b48 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	61bb      	str	r3, [r7, #24]
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	e7fd      	b.n	8004ab6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ac0:	f023 0301 	bic.w	r3, r3, #1
 8004ac4:	b2da      	uxtb	r2, r3
 8004ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004acc:	e03d      	b.n	8004b4a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ad4:	f043 0301 	orr.w	r3, r3, #1
 8004ad8:	b2da      	uxtb	r2, r3
 8004ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004adc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10b      	bne.n	8004b06 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	617b      	str	r3, [r7, #20]
}
 8004b00:	bf00      	nop
 8004b02:	bf00      	nop
 8004b04:	e7fd      	b.n	8004b02 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b0c:	18d1      	adds	r1, r2, r3
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b14:	f7ff ff04 	bl	8004920 <prvInsertTimerInActiveList>
					break;
 8004b18:	e017      	b.n	8004b4a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d103      	bne.n	8004b30 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004b28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b2a:	f000 fb87 	bl	800523c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b2e:	e00c      	b.n	8004b4a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b36:	f023 0301 	bic.w	r3, r3, #1
 8004b3a:	b2da      	uxtb	r2, r3
 8004b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004b42:	e002      	b.n	8004b4a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004b44:	bf00      	nop
 8004b46:	e000      	b.n	8004b4a <prvProcessReceivedCommands+0x1a6>
					break;
 8004b48:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b4a:	4b08      	ldr	r3, [pc, #32]	@ (8004b6c <prvProcessReceivedCommands+0x1c8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	1d39      	adds	r1, r7, #4
 8004b50:	2200      	movs	r2, #0
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe fb88 	bl	8003268 <xQueueReceive>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f47f af26 	bne.w	80049ac <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	3730      	adds	r7, #48	@ 0x30
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000de4 	.word	0x20000de4

08004b70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b76:	e049      	b.n	8004c0c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b78:	4b2e      	ldr	r3, [pc, #184]	@ (8004c34 <prvSwitchTimerLists+0xc4>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b82:	4b2c      	ldr	r3, [pc, #176]	@ (8004c34 <prvSwitchTimerLists+0xc4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	3304      	adds	r3, #4
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fd ffeb 	bl	8002b6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d02f      	beq.n	8004c0c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d90e      	bls.n	8004bdc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004bca:	4b1a      	ldr	r3, [pc, #104]	@ (8004c34 <prvSwitchTimerLists+0xc4>)
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	3304      	adds	r3, #4
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	f7fd ff91 	bl	8002afc <vListInsert>
 8004bda:	e017      	b.n	8004c0c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004bdc:	2300      	movs	r3, #0
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2300      	movs	r3, #0
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	2100      	movs	r1, #0
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff fd5a 	bl	80046a0 <xTimerGenericCommand>
 8004bec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	603b      	str	r3, [r7, #0]
}
 8004c06:	bf00      	nop
 8004c08:	bf00      	nop
 8004c0a:	e7fd      	b.n	8004c08 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c0c:	4b09      	ldr	r3, [pc, #36]	@ (8004c34 <prvSwitchTimerLists+0xc4>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1b0      	bne.n	8004b78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c16:	4b07      	ldr	r3, [pc, #28]	@ (8004c34 <prvSwitchTimerLists+0xc4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c1c:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <prvSwitchTimerLists+0xc8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a04      	ldr	r2, [pc, #16]	@ (8004c34 <prvSwitchTimerLists+0xc4>)
 8004c22:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c24:	4a04      	ldr	r2, [pc, #16]	@ (8004c38 <prvSwitchTimerLists+0xc8>)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	6013      	str	r3, [r2, #0]
}
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20000ddc 	.word	0x20000ddc
 8004c38:	20000de0 	.word	0x20000de0

08004c3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004c42:	f000 f92b 	bl	8004e9c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004c46:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <prvCheckForValidListAndQueue+0x60>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d120      	bne.n	8004c90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004c4e:	4814      	ldr	r0, [pc, #80]	@ (8004ca0 <prvCheckForValidListAndQueue+0x64>)
 8004c50:	f7fd ff06 	bl	8002a60 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004c54:	4813      	ldr	r0, [pc, #76]	@ (8004ca4 <prvCheckForValidListAndQueue+0x68>)
 8004c56:	f7fd ff03 	bl	8002a60 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004c5a:	4b13      	ldr	r3, [pc, #76]	@ (8004ca8 <prvCheckForValidListAndQueue+0x6c>)
 8004c5c:	4a10      	ldr	r2, [pc, #64]	@ (8004ca0 <prvCheckForValidListAndQueue+0x64>)
 8004c5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004c60:	4b12      	ldr	r3, [pc, #72]	@ (8004cac <prvCheckForValidListAndQueue+0x70>)
 8004c62:	4a10      	ldr	r2, [pc, #64]	@ (8004ca4 <prvCheckForValidListAndQueue+0x68>)
 8004c64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004c66:	2300      	movs	r3, #0
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	4b11      	ldr	r3, [pc, #68]	@ (8004cb0 <prvCheckForValidListAndQueue+0x74>)
 8004c6c:	4a11      	ldr	r2, [pc, #68]	@ (8004cb4 <prvCheckForValidListAndQueue+0x78>)
 8004c6e:	2110      	movs	r1, #16
 8004c70:	200a      	movs	r0, #10
 8004c72:	f7fe f80f 	bl	8002c94 <xQueueGenericCreateStatic>
 8004c76:	4603      	mov	r3, r0
 8004c78:	4a08      	ldr	r2, [pc, #32]	@ (8004c9c <prvCheckForValidListAndQueue+0x60>)
 8004c7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c7c:	4b07      	ldr	r3, [pc, #28]	@ (8004c9c <prvCheckForValidListAndQueue+0x60>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d005      	beq.n	8004c90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <prvCheckForValidListAndQueue+0x60>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	490b      	ldr	r1, [pc, #44]	@ (8004cb8 <prvCheckForValidListAndQueue+0x7c>)
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fe fd02 	bl	8003694 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c90:	f000 f934 	bl	8004efc <vPortExitCritical>
}
 8004c94:	bf00      	nop
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	20000de4 	.word	0x20000de4
 8004ca0:	20000db4 	.word	0x20000db4
 8004ca4:	20000dc8 	.word	0x20000dc8
 8004ca8:	20000ddc 	.word	0x20000ddc
 8004cac:	20000de0 	.word	0x20000de0
 8004cb0:	20000e90 	.word	0x20000e90
 8004cb4:	20000df0 	.word	0x20000df0
 8004cb8:	080056ec 	.word	0x080056ec

08004cbc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	3b04      	subs	r3, #4
 8004ccc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3b04      	subs	r3, #4
 8004cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f023 0201 	bic.w	r2, r3, #1
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3b04      	subs	r3, #4
 8004cea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004cec:	4a08      	ldr	r2, [pc, #32]	@ (8004d10 <pxPortInitialiseStack+0x54>)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3b14      	subs	r3, #20
 8004cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3b20      	subs	r3, #32
 8004d02:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d04:	68fb      	ldr	r3, [r7, #12]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bc80      	pop	{r7}
 8004d0e:	4770      	bx	lr
 8004d10:	08004d15 	.word	0x08004d15

08004d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d1e:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <prvTaskExitError+0x54>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d00b      	beq.n	8004d40 <prvTaskExitError+0x2c>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	60fb      	str	r3, [r7, #12]
}
 8004d3a:	bf00      	nop
 8004d3c:	bf00      	nop
 8004d3e:	e7fd      	b.n	8004d3c <prvTaskExitError+0x28>
	__asm volatile
 8004d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d44:	f383 8811 	msr	BASEPRI, r3
 8004d48:	f3bf 8f6f 	isb	sy
 8004d4c:	f3bf 8f4f 	dsb	sy
 8004d50:	60bb      	str	r3, [r7, #8]
}
 8004d52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004d54:	bf00      	nop
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d0fc      	beq.n	8004d56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr
 8004d68:	2000000c 	.word	0x2000000c
 8004d6c:	00000000 	.word	0x00000000

08004d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d70:	4b07      	ldr	r3, [pc, #28]	@ (8004d90 <pxCurrentTCBConst2>)
 8004d72:	6819      	ldr	r1, [r3, #0]
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d7a:	f380 8809 	msr	PSP, r0
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f04f 0000 	mov.w	r0, #0
 8004d86:	f380 8811 	msr	BASEPRI, r0
 8004d8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004d8e:	4770      	bx	lr

08004d90 <pxCurrentTCBConst2>:
 8004d90:	200008b4 	.word	0x200008b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d94:	bf00      	nop
 8004d96:	bf00      	nop

08004d98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004d98:	4806      	ldr	r0, [pc, #24]	@ (8004db4 <prvPortStartFirstTask+0x1c>)
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	6800      	ldr	r0, [r0, #0]
 8004d9e:	f380 8808 	msr	MSP, r0
 8004da2:	b662      	cpsie	i
 8004da4:	b661      	cpsie	f
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	df00      	svc	0
 8004db0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004db2:	bf00      	nop
 8004db4:	e000ed08 	.word	0xe000ed08

08004db8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dbe:	4b32      	ldr	r3, [pc, #200]	@ (8004e88 <xPortStartScheduler+0xd0>)
 8004dc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	22ff      	movs	r2, #255	@ 0xff
 8004dce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	4b2a      	ldr	r3, [pc, #168]	@ (8004e8c <xPortStartScheduler+0xd4>)
 8004de4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004de6:	4b2a      	ldr	r3, [pc, #168]	@ (8004e90 <xPortStartScheduler+0xd8>)
 8004de8:	2207      	movs	r2, #7
 8004dea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dec:	e009      	b.n	8004e02 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004dee:	4b28      	ldr	r3, [pc, #160]	@ (8004e90 <xPortStartScheduler+0xd8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	4a26      	ldr	r2, [pc, #152]	@ (8004e90 <xPortStartScheduler+0xd8>)
 8004df6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004df8:	78fb      	ldrb	r3, [r7, #3]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e0a:	2b80      	cmp	r3, #128	@ 0x80
 8004e0c:	d0ef      	beq.n	8004dee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e0e:	4b20      	ldr	r3, [pc, #128]	@ (8004e90 <xPortStartScheduler+0xd8>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f1c3 0307 	rsb	r3, r3, #7
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d00b      	beq.n	8004e32 <xPortStartScheduler+0x7a>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	60bb      	str	r3, [r7, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	bf00      	nop
 8004e30:	e7fd      	b.n	8004e2e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e32:	4b17      	ldr	r3, [pc, #92]	@ (8004e90 <xPortStartScheduler+0xd8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	4a15      	ldr	r2, [pc, #84]	@ (8004e90 <xPortStartScheduler+0xd8>)
 8004e3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e3c:	4b14      	ldr	r3, [pc, #80]	@ (8004e90 <xPortStartScheduler+0xd8>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e44:	4a12      	ldr	r2, [pc, #72]	@ (8004e90 <xPortStartScheduler+0xd8>)
 8004e46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e50:	4b10      	ldr	r3, [pc, #64]	@ (8004e94 <xPortStartScheduler+0xdc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a0f      	ldr	r2, [pc, #60]	@ (8004e94 <xPortStartScheduler+0xdc>)
 8004e56:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e5c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <xPortStartScheduler+0xdc>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a0c      	ldr	r2, [pc, #48]	@ (8004e94 <xPortStartScheduler+0xdc>)
 8004e62:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e68:	f000 f8b8 	bl	8004fdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004e98 <xPortStartScheduler+0xe0>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e72:	f7ff ff91 	bl	8004d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e76:	f7ff f86b 	bl	8003f50 <vTaskSwitchContext>
	prvTaskExitError();
 8004e7a:	f7ff ff4b 	bl	8004d14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	e000e400 	.word	0xe000e400
 8004e8c:	20000ee0 	.word	0x20000ee0
 8004e90:	20000ee4 	.word	0x20000ee4
 8004e94:	e000ed20 	.word	0xe000ed20
 8004e98:	2000000c 	.word	0x2000000c

08004e9c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b083      	sub	sp, #12
 8004ea0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	607b      	str	r3, [r7, #4]
}
 8004eb4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <vPortEnterCritical+0x58>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8004ef4 <vPortEnterCritical+0x58>)
 8004ebe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef4 <vPortEnterCritical+0x58>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d110      	bne.n	8004eea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ef8 <vPortEnterCritical+0x5c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00b      	beq.n	8004eea <vPortEnterCritical+0x4e>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed6:	f383 8811 	msr	BASEPRI, r3
 8004eda:	f3bf 8f6f 	isb	sy
 8004ede:	f3bf 8f4f 	dsb	sy
 8004ee2:	603b      	str	r3, [r7, #0]
}
 8004ee4:	bf00      	nop
 8004ee6:	bf00      	nop
 8004ee8:	e7fd      	b.n	8004ee6 <vPortEnterCritical+0x4a>
	}
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bc80      	pop	{r7}
 8004ef2:	4770      	bx	lr
 8004ef4:	2000000c 	.word	0x2000000c
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f02:	4b12      	ldr	r3, [pc, #72]	@ (8004f4c <vPortExitCritical+0x50>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10b      	bne.n	8004f22 <vPortExitCritical+0x26>
	__asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	607b      	str	r3, [r7, #4]
}
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f22:	4b0a      	ldr	r3, [pc, #40]	@ (8004f4c <vPortExitCritical+0x50>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	4a08      	ldr	r2, [pc, #32]	@ (8004f4c <vPortExitCritical+0x50>)
 8004f2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f2c:	4b07      	ldr	r3, [pc, #28]	@ (8004f4c <vPortExitCritical+0x50>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d105      	bne.n	8004f40 <vPortExitCritical+0x44>
 8004f34:	2300      	movs	r3, #0
 8004f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	f383 8811 	msr	BASEPRI, r3
}
 8004f3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f40:	bf00      	nop
 8004f42:	370c      	adds	r7, #12
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bc80      	pop	{r7}
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	2000000c 	.word	0x2000000c

08004f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f50:	f3ef 8009 	mrs	r0, PSP
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	4b0d      	ldr	r3, [pc, #52]	@ (8004f90 <pxCurrentTCBConst>)
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f60:	6010      	str	r0, [r2, #0]
 8004f62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004f66:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f6a:	f380 8811 	msr	BASEPRI, r0
 8004f6e:	f7fe ffef 	bl	8003f50 <vTaskSwitchContext>
 8004f72:	f04f 0000 	mov.w	r0, #0
 8004f76:	f380 8811 	msr	BASEPRI, r0
 8004f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004f7e:	6819      	ldr	r1, [r3, #0]
 8004f80:	6808      	ldr	r0, [r1, #0]
 8004f82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f86:	f380 8809 	msr	PSP, r0
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	4770      	bx	lr

08004f90 <pxCurrentTCBConst>:
 8004f90:	200008b4 	.word	0x200008b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f94:	bf00      	nop
 8004f96:	bf00      	nop

08004f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b082      	sub	sp, #8
 8004f9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	607b      	str	r3, [r7, #4]
}
 8004fb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004fb2:	f7fe ff13 	bl	8003ddc <xTaskIncrementTick>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d003      	beq.n	8004fc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004fbc:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <xPortSysTickHandler+0x40>)
 8004fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	f383 8811 	msr	BASEPRI, r3
}
 8004fce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <vPortSetupTimerInterrupt+0x30>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8005010 <vPortSetupTimerInterrupt+0x34>)
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004fec:	4b09      	ldr	r3, [pc, #36]	@ (8005014 <vPortSetupTimerInterrupt+0x38>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a09      	ldr	r2, [pc, #36]	@ (8005018 <vPortSetupTimerInterrupt+0x3c>)
 8004ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff6:	099b      	lsrs	r3, r3, #6
 8004ff8:	4a08      	ldr	r2, [pc, #32]	@ (800501c <vPortSetupTimerInterrupt+0x40>)
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ffe:	4b03      	ldr	r3, [pc, #12]	@ (800500c <vPortSetupTimerInterrupt+0x30>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	bc80      	pop	{r7}
 800500a:	4770      	bx	lr
 800500c:	e000e010 	.word	0xe000e010
 8005010:	e000e018 	.word	0xe000e018
 8005014:	20000000 	.word	0x20000000
 8005018:	10624dd3 	.word	0x10624dd3
 800501c:	e000e014 	.word	0xe000e014

08005020 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005026:	f3ef 8305 	mrs	r3, IPSR
 800502a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b0f      	cmp	r3, #15
 8005030:	d915      	bls.n	800505e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005032:	4a17      	ldr	r2, [pc, #92]	@ (8005090 <vPortValidateInterruptPriority+0x70>)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4413      	add	r3, r2
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800503c:	4b15      	ldr	r3, [pc, #84]	@ (8005094 <vPortValidateInterruptPriority+0x74>)
 800503e:	781b      	ldrb	r3, [r3, #0]
 8005040:	7afa      	ldrb	r2, [r7, #11]
 8005042:	429a      	cmp	r2, r3
 8005044:	d20b      	bcs.n	800505e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	607b      	str	r3, [r7, #4]
}
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	e7fd      	b.n	800505a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800505e:	4b0e      	ldr	r3, [pc, #56]	@ (8005098 <vPortValidateInterruptPriority+0x78>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005066:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <vPortValidateInterruptPriority+0x7c>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d90b      	bls.n	8005086 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	603b      	str	r3, [r7, #0]
}
 8005080:	bf00      	nop
 8005082:	bf00      	nop
 8005084:	e7fd      	b.n	8005082 <vPortValidateInterruptPriority+0x62>
	}
 8005086:	bf00      	nop
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	e000e3f0 	.word	0xe000e3f0
 8005094:	20000ee0 	.word	0x20000ee0
 8005098:	e000ed0c 	.word	0xe000ed0c
 800509c:	20000ee4 	.word	0x20000ee4

080050a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08a      	sub	sp, #40	@ 0x28
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050a8:	2300      	movs	r3, #0
 80050aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80050ac:	f7fe fddc 	bl	8003c68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005224 <pvPortMalloc+0x184>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050b8:	f000 f924 	bl	8005304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005228 <pvPortMalloc+0x188>)
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4013      	ands	r3, r2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f040 8095 	bne.w	80051f4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d01e      	beq.n	800510e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80050d0:	2208      	movs	r2, #8
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4413      	add	r3, r2
 80050d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d015      	beq.n	800510e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f023 0307 	bic.w	r3, r3, #7
 80050e8:	3308      	adds	r3, #8
 80050ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00b      	beq.n	800510e <pvPortMalloc+0x6e>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	617b      	str	r3, [r7, #20]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d06f      	beq.n	80051f4 <pvPortMalloc+0x154>
 8005114:	4b45      	ldr	r3, [pc, #276]	@ (800522c <pvPortMalloc+0x18c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	429a      	cmp	r2, r3
 800511c:	d86a      	bhi.n	80051f4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800511e:	4b44      	ldr	r3, [pc, #272]	@ (8005230 <pvPortMalloc+0x190>)
 8005120:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005122:	4b43      	ldr	r3, [pc, #268]	@ (8005230 <pvPortMalloc+0x190>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005128:	e004      	b.n	8005134 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	429a      	cmp	r2, r3
 800513c:	d903      	bls.n	8005146 <pvPortMalloc+0xa6>
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1f1      	bne.n	800512a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005146:	4b37      	ldr	r3, [pc, #220]	@ (8005224 <pvPortMalloc+0x184>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800514c:	429a      	cmp	r2, r3
 800514e:	d051      	beq.n	80051f4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2208      	movs	r2, #8
 8005156:	4413      	add	r3, r2
 8005158:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800515a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	1ad2      	subs	r2, r2, r3
 800516a:	2308      	movs	r3, #8
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	429a      	cmp	r2, r3
 8005170:	d920      	bls.n	80051b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4413      	add	r3, r2
 8005178:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	2b00      	cmp	r3, #0
 8005182:	d00b      	beq.n	800519c <pvPortMalloc+0xfc>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	613b      	str	r3, [r7, #16]
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	e7fd      	b.n	8005198 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800519c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	1ad2      	subs	r2, r2, r3
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051ae:	69b8      	ldr	r0, [r7, #24]
 80051b0:	f000 f90a 	bl	80053c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051b4:	4b1d      	ldr	r3, [pc, #116]	@ (800522c <pvPortMalloc+0x18c>)
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	4a1b      	ldr	r2, [pc, #108]	@ (800522c <pvPortMalloc+0x18c>)
 80051c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051c2:	4b1a      	ldr	r3, [pc, #104]	@ (800522c <pvPortMalloc+0x18c>)
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b1b      	ldr	r3, [pc, #108]	@ (8005234 <pvPortMalloc+0x194>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d203      	bcs.n	80051d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051ce:	4b17      	ldr	r3, [pc, #92]	@ (800522c <pvPortMalloc+0x18c>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a18      	ldr	r2, [pc, #96]	@ (8005234 <pvPortMalloc+0x194>)
 80051d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	685a      	ldr	r2, [r3, #4]
 80051da:	4b13      	ldr	r3, [pc, #76]	@ (8005228 <pvPortMalloc+0x188>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	431a      	orrs	r2, r3
 80051e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e6:	2200      	movs	r2, #0
 80051e8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051ea:	4b13      	ldr	r3, [pc, #76]	@ (8005238 <pvPortMalloc+0x198>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3301      	adds	r3, #1
 80051f0:	4a11      	ldr	r2, [pc, #68]	@ (8005238 <pvPortMalloc+0x198>)
 80051f2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051f4:	f7fe fd46 	bl	8003c84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051f8:	69fb      	ldr	r3, [r7, #28]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <pvPortMalloc+0x17a>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	60fb      	str	r3, [r7, #12]
}
 8005214:	bf00      	nop
 8005216:	bf00      	nop
 8005218:	e7fd      	b.n	8005216 <pvPortMalloc+0x176>
	return pvReturn;
 800521a:	69fb      	ldr	r3, [r7, #28]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3728      	adds	r7, #40	@ 0x28
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	20001af0 	.word	0x20001af0
 8005228:	20001b04 	.word	0x20001b04
 800522c:	20001af4 	.word	0x20001af4
 8005230:	20001ae8 	.word	0x20001ae8
 8005234:	20001af8 	.word	0x20001af8
 8005238:	20001afc 	.word	0x20001afc

0800523c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d04f      	beq.n	80052ee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800524e:	2308      	movs	r3, #8
 8005250:	425b      	negs	r3, r3
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4413      	add	r3, r2
 8005256:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	4b25      	ldr	r3, [pc, #148]	@ (80052f8 <vPortFree+0xbc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <vPortFree+0x46>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	60fb      	str	r3, [r7, #12]
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	e7fd      	b.n	800527e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00b      	beq.n	80052a2 <vPortFree+0x66>
	__asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	60bb      	str	r3, [r7, #8]
}
 800529c:	bf00      	nop
 800529e:	bf00      	nop
 80052a0:	e7fd      	b.n	800529e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	4b14      	ldr	r3, [pc, #80]	@ (80052f8 <vPortFree+0xbc>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4013      	ands	r3, r2
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d01e      	beq.n	80052ee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d11a      	bne.n	80052ee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	4b0e      	ldr	r3, [pc, #56]	@ (80052f8 <vPortFree+0xbc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	43db      	mvns	r3, r3
 80052c2:	401a      	ands	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80052c8:	f7fe fcce 	bl	8003c68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	4b0a      	ldr	r3, [pc, #40]	@ (80052fc <vPortFree+0xc0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4413      	add	r3, r2
 80052d6:	4a09      	ldr	r2, [pc, #36]	@ (80052fc <vPortFree+0xc0>)
 80052d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052da:	6938      	ldr	r0, [r7, #16]
 80052dc:	f000 f874 	bl	80053c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052e0:	4b07      	ldr	r3, [pc, #28]	@ (8005300 <vPortFree+0xc4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3301      	adds	r3, #1
 80052e6:	4a06      	ldr	r2, [pc, #24]	@ (8005300 <vPortFree+0xc4>)
 80052e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052ea:	f7fe fccb 	bl	8003c84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052ee:	bf00      	nop
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	20001b04 	.word	0x20001b04
 80052fc:	20001af4 	.word	0x20001af4
 8005300:	20001b00 	.word	0x20001b00

08005304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800530a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800530e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005310:	4b27      	ldr	r3, [pc, #156]	@ (80053b0 <prvHeapInit+0xac>)
 8005312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 0307 	and.w	r3, r3, #7
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00c      	beq.n	8005338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3307      	adds	r3, #7
 8005322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f023 0307 	bic.w	r3, r3, #7
 800532a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	4a1f      	ldr	r2, [pc, #124]	@ (80053b0 <prvHeapInit+0xac>)
 8005334:	4413      	add	r3, r2
 8005336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800533c:	4a1d      	ldr	r2, [pc, #116]	@ (80053b4 <prvHeapInit+0xb0>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005342:	4b1c      	ldr	r3, [pc, #112]	@ (80053b4 <prvHeapInit+0xb0>)
 8005344:	2200      	movs	r2, #0
 8005346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005350:	2208      	movs	r2, #8
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1a9b      	subs	r3, r3, r2
 8005356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f023 0307 	bic.w	r3, r3, #7
 800535e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4a15      	ldr	r2, [pc, #84]	@ (80053b8 <prvHeapInit+0xb4>)
 8005364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005366:	4b14      	ldr	r3, [pc, #80]	@ (80053b8 <prvHeapInit+0xb4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800536e:	4b12      	ldr	r3, [pc, #72]	@ (80053b8 <prvHeapInit+0xb4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	1ad2      	subs	r2, r2, r3
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005384:	4b0c      	ldr	r3, [pc, #48]	@ (80053b8 <prvHeapInit+0xb4>)
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4a0a      	ldr	r2, [pc, #40]	@ (80053bc <prvHeapInit+0xb8>)
 8005392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	4a09      	ldr	r2, [pc, #36]	@ (80053c0 <prvHeapInit+0xbc>)
 800539a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800539c:	4b09      	ldr	r3, [pc, #36]	@ (80053c4 <prvHeapInit+0xc0>)
 800539e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80053a2:	601a      	str	r2, [r3, #0]
}
 80053a4:	bf00      	nop
 80053a6:	3714      	adds	r7, #20
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bc80      	pop	{r7}
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	20000ee8 	.word	0x20000ee8
 80053b4:	20001ae8 	.word	0x20001ae8
 80053b8:	20001af0 	.word	0x20001af0
 80053bc:	20001af8 	.word	0x20001af8
 80053c0:	20001af4 	.word	0x20001af4
 80053c4:	20001b04 	.word	0x20001b04

080053c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053d0:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <prvInsertBlockIntoFreeList+0xa8>)
 80053d2:	60fb      	str	r3, [r7, #12]
 80053d4:	e002      	b.n	80053dc <prvInsertBlockIntoFreeList+0x14>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60fb      	str	r3, [r7, #12]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d8f7      	bhi.n	80053d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	4413      	add	r3, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d108      	bne.n	800540a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	441a      	add	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	441a      	add	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d118      	bne.n	8005450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	4b14      	ldr	r3, [pc, #80]	@ (8005474 <prvInsertBlockIntoFreeList+0xac>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	429a      	cmp	r2, r3
 8005428:	d00d      	beq.n	8005446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	441a      	add	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]
 8005444:	e008      	b.n	8005458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005446:	4b0b      	ldr	r3, [pc, #44]	@ (8005474 <prvInsertBlockIntoFreeList+0xac>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	e003      	b.n	8005458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	429a      	cmp	r2, r3
 800545e:	d002      	beq.n	8005466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005466:	bf00      	nop
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr
 8005470:	20001ae8 	.word	0x20001ae8
 8005474:	20001af0 	.word	0x20001af0

08005478 <memset>:
 8005478:	4603      	mov	r3, r0
 800547a:	4402      	add	r2, r0
 800547c:	4293      	cmp	r3, r2
 800547e:	d100      	bne.n	8005482 <memset+0xa>
 8005480:	4770      	bx	lr
 8005482:	f803 1b01 	strb.w	r1, [r3], #1
 8005486:	e7f9      	b.n	800547c <memset+0x4>

08005488 <_reclaim_reent>:
 8005488:	4b29      	ldr	r3, [pc, #164]	@ (8005530 <_reclaim_reent+0xa8>)
 800548a:	b570      	push	{r4, r5, r6, lr}
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4604      	mov	r4, r0
 8005490:	4283      	cmp	r3, r0
 8005492:	d04b      	beq.n	800552c <_reclaim_reent+0xa4>
 8005494:	69c3      	ldr	r3, [r0, #28]
 8005496:	b1ab      	cbz	r3, 80054c4 <_reclaim_reent+0x3c>
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	b16b      	cbz	r3, 80054b8 <_reclaim_reent+0x30>
 800549c:	2500      	movs	r5, #0
 800549e:	69e3      	ldr	r3, [r4, #28]
 80054a0:	68db      	ldr	r3, [r3, #12]
 80054a2:	5959      	ldr	r1, [r3, r5]
 80054a4:	2900      	cmp	r1, #0
 80054a6:	d13b      	bne.n	8005520 <_reclaim_reent+0x98>
 80054a8:	3504      	adds	r5, #4
 80054aa:	2d80      	cmp	r5, #128	@ 0x80
 80054ac:	d1f7      	bne.n	800549e <_reclaim_reent+0x16>
 80054ae:	69e3      	ldr	r3, [r4, #28]
 80054b0:	4620      	mov	r0, r4
 80054b2:	68d9      	ldr	r1, [r3, #12]
 80054b4:	f000 f872 	bl	800559c <_free_r>
 80054b8:	69e3      	ldr	r3, [r4, #28]
 80054ba:	6819      	ldr	r1, [r3, #0]
 80054bc:	b111      	cbz	r1, 80054c4 <_reclaim_reent+0x3c>
 80054be:	4620      	mov	r0, r4
 80054c0:	f000 f86c 	bl	800559c <_free_r>
 80054c4:	6961      	ldr	r1, [r4, #20]
 80054c6:	b111      	cbz	r1, 80054ce <_reclaim_reent+0x46>
 80054c8:	4620      	mov	r0, r4
 80054ca:	f000 f867 	bl	800559c <_free_r>
 80054ce:	69e1      	ldr	r1, [r4, #28]
 80054d0:	b111      	cbz	r1, 80054d8 <_reclaim_reent+0x50>
 80054d2:	4620      	mov	r0, r4
 80054d4:	f000 f862 	bl	800559c <_free_r>
 80054d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80054da:	b111      	cbz	r1, 80054e2 <_reclaim_reent+0x5a>
 80054dc:	4620      	mov	r0, r4
 80054de:	f000 f85d 	bl	800559c <_free_r>
 80054e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054e4:	b111      	cbz	r1, 80054ec <_reclaim_reent+0x64>
 80054e6:	4620      	mov	r0, r4
 80054e8:	f000 f858 	bl	800559c <_free_r>
 80054ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80054ee:	b111      	cbz	r1, 80054f6 <_reclaim_reent+0x6e>
 80054f0:	4620      	mov	r0, r4
 80054f2:	f000 f853 	bl	800559c <_free_r>
 80054f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80054f8:	b111      	cbz	r1, 8005500 <_reclaim_reent+0x78>
 80054fa:	4620      	mov	r0, r4
 80054fc:	f000 f84e 	bl	800559c <_free_r>
 8005500:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005502:	b111      	cbz	r1, 800550a <_reclaim_reent+0x82>
 8005504:	4620      	mov	r0, r4
 8005506:	f000 f849 	bl	800559c <_free_r>
 800550a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800550c:	b111      	cbz	r1, 8005514 <_reclaim_reent+0x8c>
 800550e:	4620      	mov	r0, r4
 8005510:	f000 f844 	bl	800559c <_free_r>
 8005514:	6a23      	ldr	r3, [r4, #32]
 8005516:	b14b      	cbz	r3, 800552c <_reclaim_reent+0xa4>
 8005518:	4620      	mov	r0, r4
 800551a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800551e:	4718      	bx	r3
 8005520:	680e      	ldr	r6, [r1, #0]
 8005522:	4620      	mov	r0, r4
 8005524:	f000 f83a 	bl	800559c <_free_r>
 8005528:	4631      	mov	r1, r6
 800552a:	e7bb      	b.n	80054a4 <_reclaim_reent+0x1c>
 800552c:	bd70      	pop	{r4, r5, r6, pc}
 800552e:	bf00      	nop
 8005530:	20000010 	.word	0x20000010

08005534 <__libc_init_array>:
 8005534:	b570      	push	{r4, r5, r6, lr}
 8005536:	2600      	movs	r6, #0
 8005538:	4d0c      	ldr	r5, [pc, #48]	@ (800556c <__libc_init_array+0x38>)
 800553a:	4c0d      	ldr	r4, [pc, #52]	@ (8005570 <__libc_init_array+0x3c>)
 800553c:	1b64      	subs	r4, r4, r5
 800553e:	10a4      	asrs	r4, r4, #2
 8005540:	42a6      	cmp	r6, r4
 8005542:	d109      	bne.n	8005558 <__libc_init_array+0x24>
 8005544:	f000 f87e 	bl	8005644 <_init>
 8005548:	2600      	movs	r6, #0
 800554a:	4d0a      	ldr	r5, [pc, #40]	@ (8005574 <__libc_init_array+0x40>)
 800554c:	4c0a      	ldr	r4, [pc, #40]	@ (8005578 <__libc_init_array+0x44>)
 800554e:	1b64      	subs	r4, r4, r5
 8005550:	10a4      	asrs	r4, r4, #2
 8005552:	42a6      	cmp	r6, r4
 8005554:	d105      	bne.n	8005562 <__libc_init_array+0x2e>
 8005556:	bd70      	pop	{r4, r5, r6, pc}
 8005558:	f855 3b04 	ldr.w	r3, [r5], #4
 800555c:	4798      	blx	r3
 800555e:	3601      	adds	r6, #1
 8005560:	e7ee      	b.n	8005540 <__libc_init_array+0xc>
 8005562:	f855 3b04 	ldr.w	r3, [r5], #4
 8005566:	4798      	blx	r3
 8005568:	3601      	adds	r6, #1
 800556a:	e7f2      	b.n	8005552 <__libc_init_array+0x1e>
 800556c:	080057a4 	.word	0x080057a4
 8005570:	080057a4 	.word	0x080057a4
 8005574:	080057a4 	.word	0x080057a4
 8005578:	080057a8 	.word	0x080057a8

0800557c <__retarget_lock_acquire_recursive>:
 800557c:	4770      	bx	lr

0800557e <__retarget_lock_release_recursive>:
 800557e:	4770      	bx	lr

08005580 <memcpy>:
 8005580:	440a      	add	r2, r1
 8005582:	4291      	cmp	r1, r2
 8005584:	f100 33ff 	add.w	r3, r0, #4294967295
 8005588:	d100      	bne.n	800558c <memcpy+0xc>
 800558a:	4770      	bx	lr
 800558c:	b510      	push	{r4, lr}
 800558e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005592:	4291      	cmp	r1, r2
 8005594:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005598:	d1f9      	bne.n	800558e <memcpy+0xe>
 800559a:	bd10      	pop	{r4, pc}

0800559c <_free_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	4605      	mov	r5, r0
 80055a0:	2900      	cmp	r1, #0
 80055a2:	d040      	beq.n	8005626 <_free_r+0x8a>
 80055a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055a8:	1f0c      	subs	r4, r1, #4
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	bfb8      	it	lt
 80055ae:	18e4      	addlt	r4, r4, r3
 80055b0:	f000 f83c 	bl	800562c <__malloc_lock>
 80055b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005628 <_free_r+0x8c>)
 80055b6:	6813      	ldr	r3, [r2, #0]
 80055b8:	b933      	cbnz	r3, 80055c8 <_free_r+0x2c>
 80055ba:	6063      	str	r3, [r4, #4]
 80055bc:	6014      	str	r4, [r2, #0]
 80055be:	4628      	mov	r0, r5
 80055c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055c4:	f000 b838 	b.w	8005638 <__malloc_unlock>
 80055c8:	42a3      	cmp	r3, r4
 80055ca:	d908      	bls.n	80055de <_free_r+0x42>
 80055cc:	6820      	ldr	r0, [r4, #0]
 80055ce:	1821      	adds	r1, r4, r0
 80055d0:	428b      	cmp	r3, r1
 80055d2:	bf01      	itttt	eq
 80055d4:	6819      	ldreq	r1, [r3, #0]
 80055d6:	685b      	ldreq	r3, [r3, #4]
 80055d8:	1809      	addeq	r1, r1, r0
 80055da:	6021      	streq	r1, [r4, #0]
 80055dc:	e7ed      	b.n	80055ba <_free_r+0x1e>
 80055de:	461a      	mov	r2, r3
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	b10b      	cbz	r3, 80055e8 <_free_r+0x4c>
 80055e4:	42a3      	cmp	r3, r4
 80055e6:	d9fa      	bls.n	80055de <_free_r+0x42>
 80055e8:	6811      	ldr	r1, [r2, #0]
 80055ea:	1850      	adds	r0, r2, r1
 80055ec:	42a0      	cmp	r0, r4
 80055ee:	d10b      	bne.n	8005608 <_free_r+0x6c>
 80055f0:	6820      	ldr	r0, [r4, #0]
 80055f2:	4401      	add	r1, r0
 80055f4:	1850      	adds	r0, r2, r1
 80055f6:	4283      	cmp	r3, r0
 80055f8:	6011      	str	r1, [r2, #0]
 80055fa:	d1e0      	bne.n	80055be <_free_r+0x22>
 80055fc:	6818      	ldr	r0, [r3, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	4408      	add	r0, r1
 8005602:	6010      	str	r0, [r2, #0]
 8005604:	6053      	str	r3, [r2, #4]
 8005606:	e7da      	b.n	80055be <_free_r+0x22>
 8005608:	d902      	bls.n	8005610 <_free_r+0x74>
 800560a:	230c      	movs	r3, #12
 800560c:	602b      	str	r3, [r5, #0]
 800560e:	e7d6      	b.n	80055be <_free_r+0x22>
 8005610:	6820      	ldr	r0, [r4, #0]
 8005612:	1821      	adds	r1, r4, r0
 8005614:	428b      	cmp	r3, r1
 8005616:	bf01      	itttt	eq
 8005618:	6819      	ldreq	r1, [r3, #0]
 800561a:	685b      	ldreq	r3, [r3, #4]
 800561c:	1809      	addeq	r1, r1, r0
 800561e:	6021      	streq	r1, [r4, #0]
 8005620:	6063      	str	r3, [r4, #4]
 8005622:	6054      	str	r4, [r2, #4]
 8005624:	e7cb      	b.n	80055be <_free_r+0x22>
 8005626:	bd38      	pop	{r3, r4, r5, pc}
 8005628:	20001c44 	.word	0x20001c44

0800562c <__malloc_lock>:
 800562c:	4801      	ldr	r0, [pc, #4]	@ (8005634 <__malloc_lock+0x8>)
 800562e:	f7ff bfa5 	b.w	800557c <__retarget_lock_acquire_recursive>
 8005632:	bf00      	nop
 8005634:	20001c40 	.word	0x20001c40

08005638 <__malloc_unlock>:
 8005638:	4801      	ldr	r0, [pc, #4]	@ (8005640 <__malloc_unlock+0x8>)
 800563a:	f7ff bfa0 	b.w	800557e <__retarget_lock_release_recursive>
 800563e:	bf00      	nop
 8005640:	20001c40 	.word	0x20001c40

08005644 <_init>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr

08005650 <_fini>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr
