
Test_RTOS_01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000304  080059cc  080059cc  000069cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cd0  08005cd0  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005cd0  08005cd0  00006cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cd8  08005cd8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cd8  08005cd8  00006cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005cdc  08005cdc  00006cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005ce0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bf0  20000060  08005d40  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c50  08005d40  00007c50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178bd  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003657  00000000  00000000  0001e946  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00021fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc6  00000000  00000000  000233f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a073  00000000  00000000  000243be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000174c9  00000000  00000000  0003e431  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094d1f  00000000  00000000  000558fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea619  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005778  00000000  00000000  000ea65c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000efdd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080059b4 	.word	0x080059b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080059b4 	.word	0x080059b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Hangdoi_ngat */
  Hangdoi_ngatHandle = osMessageQueueNew (16, sizeof(uint8_t), &Hangdoi_ngat_attributes);
 8000164:	4a10      	ldr	r2, [pc, #64]	@ (80001a8 <MX_FREERTOS_Init+0x48>)
 8000166:	2101      	movs	r1, #1
 8000168:	2010      	movs	r0, #16
 800016a:	f002 fd08 	bl	8002b7e <osMessageQueueNew>
 800016e:	4603      	mov	r3, r0
 8000170:	4a0e      	ldr	r2, [pc, #56]	@ (80001ac <MX_FREERTOS_Init+0x4c>)
 8000172:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task01 */
  Task01Handle = osThreadNew(Task01_Function, NULL, &Task01_attributes);
 8000174:	4a0e      	ldr	r2, [pc, #56]	@ (80001b0 <MX_FREERTOS_Init+0x50>)
 8000176:	2100      	movs	r1, #0
 8000178:	480e      	ldr	r0, [pc, #56]	@ (80001b4 <MX_FREERTOS_Init+0x54>)
 800017a:	f002 fc53 	bl	8002a24 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a0d      	ldr	r2, [pc, #52]	@ (80001b8 <MX_FREERTOS_Init+0x58>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of Task02 */
  Task02Handle = osThreadNew(Task02_Function, NULL, &Task02_attributes);
 8000184:	4a0d      	ldr	r2, [pc, #52]	@ (80001bc <MX_FREERTOS_Init+0x5c>)
 8000186:	2100      	movs	r1, #0
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_FREERTOS_Init+0x60>)
 800018a:	f002 fc4b 	bl	8002a24 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a0c      	ldr	r2, [pc, #48]	@ (80001c4 <MX_FREERTOS_Init+0x64>)
 8000192:	6013      	str	r3, [r2, #0]

  /* creation of Task03 */
  Task03Handle = osThreadNew(Task03_Function, NULL, &Task03_attributes);
 8000194:	4a0c      	ldr	r2, [pc, #48]	@ (80001c8 <MX_FREERTOS_Init+0x68>)
 8000196:	2100      	movs	r1, #0
 8000198:	480c      	ldr	r0, [pc, #48]	@ (80001cc <MX_FREERTOS_Init+0x6c>)
 800019a:	f002 fc43 	bl	8002a24 <osThreadNew>
 800019e:	4603      	mov	r3, r0
 80001a0:	4a0b      	ldr	r2, [pc, #44]	@ (80001d0 <MX_FREERTOS_Init+0x70>)
 80001a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001a4:	bf00      	nop
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	08005c8c 	.word	0x08005c8c
 80001ac:	2000008c 	.word	0x2000008c
 80001b0:	08005c20 	.word	0x08005c20
 80001b4:	080001d5 	.word	0x080001d5
 80001b8:	20000080 	.word	0x20000080
 80001bc:	08005c44 	.word	0x08005c44
 80001c0:	0800033d 	.word	0x0800033d
 80001c4:	20000084 	.word	0x20000084
 80001c8:	08005c68 	.word	0x08005c68
 80001cc:	08000391 	.word	0x08000391
 80001d0:	20000088 	.word	0x20000088

080001d4 <Task01_Function>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Task01_Function */
void Task01_Function(void *argument)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b08c      	sub	sp, #48	@ 0x30
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	 // Biến lưu trữ ID được nhận từ hàng đợi
	    for (;;) {
	        // Chờ ID từ hàng đợi (chờ mãi cho đến khi có dữ liệu)
	    		osMessageQueueGet(Hangdoi_ngatHandle, &received_id, NULL, osWaitForever);
 80001dc:	4b4b      	ldr	r3, [pc, #300]	@ (800030c <Task01_Function+0x138>)
 80001de:	6818      	ldr	r0, [r3, #0]
 80001e0:	f04f 33ff 	mov.w	r3, #4294967295
 80001e4:	2200      	movs	r2, #0
 80001e6:	494a      	ldr	r1, [pc, #296]	@ (8000310 <Task01_Function+0x13c>)
 80001e8:	f002 fd9c 	bl	8002d24 <osMessageQueueGet>

	            // Xử lý ID nhận được
	            switch (received_id) {
 80001ec:	4b48      	ldr	r3, [pc, #288]	@ (8000310 <Task01_Function+0x13c>)
 80001ee:	781b      	ldrb	r3, [r3, #0]
 80001f0:	2b03      	cmp	r3, #3
 80001f2:	d05e      	beq.n	80002b2 <Task01_Function+0xde>
 80001f4:	2b03      	cmp	r3, #3
 80001f6:	dcf1      	bgt.n	80001dc <Task01_Function+0x8>
 80001f8:	2b01      	cmp	r3, #1
 80001fa:	d002      	beq.n	8000202 <Task01_Function+0x2e>
 80001fc:	2b02      	cmp	r3, #2
 80001fe:	d02c      	beq.n	800025a <Task01_Function+0x86>
 8000200:	e083      	b.n	800030a <Task01_Function+0x136>
	                case 1: // Task xử lý cho ID1
	                	const char* start_task_ID1="Task interrupt 01 is starting.............\r\n";
 8000202:	4b44      	ldr	r3, [pc, #272]	@ (8000314 <Task01_Function+0x140>)
 8000204:	617b      	str	r3, [r7, #20]
	                	const char* process_task_ID1="Task interrupt 01 is processing.............\r\n";
 8000206:	4b44      	ldr	r3, [pc, #272]	@ (8000318 <Task01_Function+0x144>)
 8000208:	613b      	str	r3, [r7, #16]
	                	const char* end_task_ID1="Task interrupt 01 is Ending.............\r\n\n";
 800020a:	4b44      	ldr	r3, [pc, #272]	@ (800031c <Task01_Function+0x148>)
 800020c:	60fb      	str	r3, [r7, #12]
	                	HAL_UART_Transmit(&huart1, (uint8_t*)start_task_ID1, strlen(start_task_ID1), HAL_MAX_DELAY);
 800020e:	6978      	ldr	r0, [r7, #20]
 8000210:	f7ff ff9e 	bl	8000150 <strlen>
 8000214:	4603      	mov	r3, r0
 8000216:	b29a      	uxth	r2, r3
 8000218:	f04f 33ff 	mov.w	r3, #4294967295
 800021c:	6979      	ldr	r1, [r7, #20]
 800021e:	4840      	ldr	r0, [pc, #256]	@ (8000320 <Task01_Function+0x14c>)
 8000220:	f001 fd5a 	bl	8001cd8 <HAL_UART_Transmit>
	                	HAL_UART_Transmit(&huart1, (uint8_t*)process_task_ID1, strlen(process_task_ID1), HAL_MAX_DELAY);
 8000224:	6938      	ldr	r0, [r7, #16]
 8000226:	f7ff ff93 	bl	8000150 <strlen>
 800022a:	4603      	mov	r3, r0
 800022c:	b29a      	uxth	r2, r3
 800022e:	f04f 33ff 	mov.w	r3, #4294967295
 8000232:	6939      	ldr	r1, [r7, #16]
 8000234:	483a      	ldr	r0, [pc, #232]	@ (8000320 <Task01_Function+0x14c>)
 8000236:	f001 fd4f 	bl	8001cd8 <HAL_UART_Transmit>
	                	HAL_Delay(3000);
 800023a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800023e:	f000 fb43 	bl	80008c8 <HAL_Delay>
	                	HAL_UART_Transmit(&huart1, (uint8_t*)end_task_ID1, strlen(end_task_ID1), HAL_MAX_DELAY);
 8000242:	68f8      	ldr	r0, [r7, #12]
 8000244:	f7ff ff84 	bl	8000150 <strlen>
 8000248:	4603      	mov	r3, r0
 800024a:	b29a      	uxth	r2, r3
 800024c:	f04f 33ff 	mov.w	r3, #4294967295
 8000250:	68f9      	ldr	r1, [r7, #12]
 8000252:	4833      	ldr	r0, [pc, #204]	@ (8000320 <Task01_Function+0x14c>)
 8000254:	f001 fd40 	bl	8001cd8 <HAL_UART_Transmit>
	                    break;
 8000258:	e057      	b.n	800030a <Task01_Function+0x136>
	                case 2: // Task xử lý cho ID2
	                	const char* start_task_ID2="Task interrupt 02 is starting.............\r\n";
 800025a:	4b32      	ldr	r3, [pc, #200]	@ (8000324 <Task01_Function+0x150>)
 800025c:	623b      	str	r3, [r7, #32]
	                	const char* process_task_ID2="Task interrupt 02 is processing.............\r\n";
 800025e:	4b32      	ldr	r3, [pc, #200]	@ (8000328 <Task01_Function+0x154>)
 8000260:	61fb      	str	r3, [r7, #28]
	                	const char* end_task_ID2="Task interrupt 02 is Ending.............\r\n\n";
 8000262:	4b32      	ldr	r3, [pc, #200]	@ (800032c <Task01_Function+0x158>)
 8000264:	61bb      	str	r3, [r7, #24]
	                	HAL_UART_Transmit(&huart1, (uint8_t*)start_task_ID2, strlen(start_task_ID2), HAL_MAX_DELAY);
 8000266:	6a38      	ldr	r0, [r7, #32]
 8000268:	f7ff ff72 	bl	8000150 <strlen>
 800026c:	4603      	mov	r3, r0
 800026e:	b29a      	uxth	r2, r3
 8000270:	f04f 33ff 	mov.w	r3, #4294967295
 8000274:	6a39      	ldr	r1, [r7, #32]
 8000276:	482a      	ldr	r0, [pc, #168]	@ (8000320 <Task01_Function+0x14c>)
 8000278:	f001 fd2e 	bl	8001cd8 <HAL_UART_Transmit>
	                	HAL_UART_Transmit(&huart1, (uint8_t*)process_task_ID2, strlen(process_task_ID2), HAL_MAX_DELAY);
 800027c:	69f8      	ldr	r0, [r7, #28]
 800027e:	f7ff ff67 	bl	8000150 <strlen>
 8000282:	4603      	mov	r3, r0
 8000284:	b29a      	uxth	r2, r3
 8000286:	f04f 33ff 	mov.w	r3, #4294967295
 800028a:	69f9      	ldr	r1, [r7, #28]
 800028c:	4824      	ldr	r0, [pc, #144]	@ (8000320 <Task01_Function+0x14c>)
 800028e:	f001 fd23 	bl	8001cd8 <HAL_UART_Transmit>
	                	HAL_Delay(1000);
 8000292:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000296:	f000 fb17 	bl	80008c8 <HAL_Delay>
	                	HAL_UART_Transmit(&huart1, (uint8_t*)end_task_ID2, strlen(end_task_ID2), HAL_MAX_DELAY);
 800029a:	69b8      	ldr	r0, [r7, #24]
 800029c:	f7ff ff58 	bl	8000150 <strlen>
 80002a0:	4603      	mov	r3, r0
 80002a2:	b29a      	uxth	r2, r3
 80002a4:	f04f 33ff 	mov.w	r3, #4294967295
 80002a8:	69b9      	ldr	r1, [r7, #24]
 80002aa:	481d      	ldr	r0, [pc, #116]	@ (8000320 <Task01_Function+0x14c>)
 80002ac:	f001 fd14 	bl	8001cd8 <HAL_UART_Transmit>
	                	break;
 80002b0:	e02b      	b.n	800030a <Task01_Function+0x136>
	                case 3: // Task xử lý cho ID3
	                	const char* start_task_ID3="Task interrupt 03 is starting.............\r\n";
 80002b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000330 <Task01_Function+0x15c>)
 80002b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	                	const char* process_task_ID3="Task interrupt 03 is processing.............\r\n";
 80002b6:	4b1f      	ldr	r3, [pc, #124]	@ (8000334 <Task01_Function+0x160>)
 80002b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	                	const char* end_task_ID3="Task interrupt 03 is Ending.............\r\n\n";
 80002ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000338 <Task01_Function+0x164>)
 80002bc:	627b      	str	r3, [r7, #36]	@ 0x24
	                	HAL_UART_Transmit(&huart1, (uint8_t*)start_task_ID3, strlen(start_task_ID3), HAL_MAX_DELAY);
 80002be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80002c0:	f7ff ff46 	bl	8000150 <strlen>
 80002c4:	4603      	mov	r3, r0
 80002c6:	b29a      	uxth	r2, r3
 80002c8:	f04f 33ff 	mov.w	r3, #4294967295
 80002cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80002ce:	4814      	ldr	r0, [pc, #80]	@ (8000320 <Task01_Function+0x14c>)
 80002d0:	f001 fd02 	bl	8001cd8 <HAL_UART_Transmit>
	                	HAL_UART_Transmit(&huart1, (uint8_t*)process_task_ID3, strlen(process_task_ID3), HAL_MAX_DELAY);
 80002d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80002d6:	f7ff ff3b 	bl	8000150 <strlen>
 80002da:	4603      	mov	r3, r0
 80002dc:	b29a      	uxth	r2, r3
 80002de:	f04f 33ff 	mov.w	r3, #4294967295
 80002e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80002e4:	480e      	ldr	r0, [pc, #56]	@ (8000320 <Task01_Function+0x14c>)
 80002e6:	f001 fcf7 	bl	8001cd8 <HAL_UART_Transmit>
	                	HAL_Delay(1000);
 80002ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ee:	f000 faeb 	bl	80008c8 <HAL_Delay>
	                	HAL_UART_Transmit(&huart1, (uint8_t*)end_task_ID3, strlen(end_task_ID3), HAL_MAX_DELAY);
 80002f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80002f4:	f7ff ff2c 	bl	8000150 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000300:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000302:	4807      	ldr	r0, [pc, #28]	@ (8000320 <Task01_Function+0x14c>)
 8000304:	f001 fce8 	bl	8001cd8 <HAL_UART_Transmit>
	                	break;
 8000308:	bf00      	nop
	    		osMessageQueueGet(Hangdoi_ngatHandle, &received_id, NULL, osWaitForever);
 800030a:	e767      	b.n	80001dc <Task01_Function+0x8>
 800030c:	2000008c 	.word	0x2000008c
 8000310:	2000007c 	.word	0x2000007c
 8000314:	080059f4 	.word	0x080059f4
 8000318:	08005a24 	.word	0x08005a24
 800031c:	08005a54 	.word	0x08005a54
 8000320:	200000dc 	.word	0x200000dc
 8000324:	08005a80 	.word	0x08005a80
 8000328:	08005ab0 	.word	0x08005ab0
 800032c:	08005ae0 	.word	0x08005ae0
 8000330:	08005b0c 	.word	0x08005b0c
 8000334:	08005b3c 	.word	0x08005b3c
 8000338:	08005b6c 	.word	0x08005b6c

0800033c <Task02_Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task02_Function */
void Task02_Function(void *argument)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b084      	sub	sp, #16
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task02_Function */
	const char* start_task2="High_Task is starting...\r\n";
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <Task02_Function+0x48>)
 8000346:	60fb      	str	r3, [r7, #12]
	const char* end_task2="High_Task is ending...\r\n\n";
 8000348:	4b0f      	ldr	r3, [pc, #60]	@ (8000388 <Task02_Function+0x4c>)
 800034a:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart1, (uint8_t*)start_task2, strlen(start_task2), HAL_MAX_DELAY);
 800034c:	68f8      	ldr	r0, [r7, #12]
 800034e:	f7ff feff 	bl	8000150 <strlen>
 8000352:	4603      	mov	r3, r0
 8000354:	b29a      	uxth	r2, r3
 8000356:	f04f 33ff 	mov.w	r3, #4294967295
 800035a:	68f9      	ldr	r1, [r7, #12]
 800035c:	480b      	ldr	r0, [pc, #44]	@ (800038c <Task02_Function+0x50>)
 800035e:	f001 fcbb 	bl	8001cd8 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t*)end_task2, strlen(end_task2), HAL_MAX_DELAY);
 8000362:	68b8      	ldr	r0, [r7, #8]
 8000364:	f7ff fef4 	bl	8000150 <strlen>
 8000368:	4603      	mov	r3, r0
 800036a:	b29a      	uxth	r2, r3
 800036c:	f04f 33ff 	mov.w	r3, #4294967295
 8000370:	68b9      	ldr	r1, [r7, #8]
 8000372:	4806      	ldr	r0, [pc, #24]	@ (800038c <Task02_Function+0x50>)
 8000374:	f001 fcb0 	bl	8001cd8 <HAL_UART_Transmit>
	  osDelay(5000);
 8000378:	f241 3088 	movw	r0, #5000	@ 0x1388
 800037c:	f002 fbe4 	bl	8002b48 <osDelay>
  {
 8000380:	bf00      	nop
 8000382:	e7e3      	b.n	800034c <Task02_Function+0x10>
 8000384:	08005b98 	.word	0x08005b98
 8000388:	08005bb4 	.word	0x08005bb4
 800038c:	200000dc 	.word	0x200000dc

08000390 <Task03_Function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task03_Function */
void Task03_Function(void *argument)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task03_Function */
	const char* start_task3="Low_Task is starting...\r\n";
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <Task03_Function+0x48>)
 800039a:	60fb      	str	r3, [r7, #12]
	const char* end_task3="Low_Task is ending...\r\n\n";
 800039c:	4b0f      	ldr	r3, [pc, #60]	@ (80003dc <Task03_Function+0x4c>)
 800039e:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	HAL_UART_Transmit(&huart1, (uint8_t*)start_task3, strlen(start_task3), HAL_MAX_DELAY);
 80003a0:	68f8      	ldr	r0, [r7, #12]
 80003a2:	f7ff fed5 	bl	8000150 <strlen>
 80003a6:	4603      	mov	r3, r0
 80003a8:	b29a      	uxth	r2, r3
 80003aa:	f04f 33ff 	mov.w	r3, #4294967295
 80003ae:	68f9      	ldr	r1, [r7, #12]
 80003b0:	480b      	ldr	r0, [pc, #44]	@ (80003e0 <Task03_Function+0x50>)
 80003b2:	f001 fc91 	bl	8001cd8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)end_task3, strlen(end_task3), HAL_MAX_DELAY);
 80003b6:	68b8      	ldr	r0, [r7, #8]
 80003b8:	f7ff feca 	bl	8000150 <strlen>
 80003bc:	4603      	mov	r3, r0
 80003be:	b29a      	uxth	r2, r3
 80003c0:	f04f 33ff 	mov.w	r3, #4294967295
 80003c4:	68b9      	ldr	r1, [r7, #8]
 80003c6:	4806      	ldr	r0, [pc, #24]	@ (80003e0 <Task03_Function+0x50>)
 80003c8:	f001 fc86 	bl	8001cd8 <HAL_UART_Transmit>
	osDelay(3000);
 80003cc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80003d0:	f002 fbba 	bl	8002b48 <osDelay>
  {
 80003d4:	bf00      	nop
 80003d6:	e7e3      	b.n	80003a0 <Task03_Function+0x10>
 80003d8:	08005bd0 	.word	0x08005bd0
 80003dc:	08005bec 	.word	0x08005bec
 80003e0:	200000dc 	.word	0x200000dc

080003e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	b083      	sub	sp, #12
 80003e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ea:	4b08      	ldr	r3, [pc, #32]	@ (800040c <MX_GPIO_Init+0x28>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	4a07      	ldr	r2, [pc, #28]	@ (800040c <MX_GPIO_Init+0x28>)
 80003f0:	f043 0304 	orr.w	r3, r3, #4
 80003f4:	6193      	str	r3, [r2, #24]
 80003f6:	4b05      	ldr	r3, [pc, #20]	@ (800040c <MX_GPIO_Init+0x28>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	f003 0304 	and.w	r3, r3, #4
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	bc80      	pop	{r7}
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000414:	f000 fa26 	bl	8000864 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000418:	f000 f816 	bl	8000448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800041c:	f7ff ffe2 	bl	80003e4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000420:	f000 f97c 	bl	800071c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1, &RX_data, 1);
 8000424:	2201      	movs	r2, #1
 8000426:	4906      	ldr	r1, [pc, #24]	@ (8000440 <main+0x30>)
 8000428:	4806      	ldr	r0, [pc, #24]	@ (8000444 <main+0x34>)
 800042a:	f001 fce0 	bl	8001dee <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800042e:	f002 fab1 	bl	8002994 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000432:	f7ff fe95 	bl	8000160 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000436:	f002 facf 	bl	80029d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800043a:	bf00      	nop
 800043c:	e7fd      	b.n	800043a <main+0x2a>
 800043e:	bf00      	nop
 8000440:	20000090 	.word	0x20000090
 8000444:	200000dc 	.word	0x200000dc

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b090      	sub	sp, #64	@ 0x40
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	f107 0318 	add.w	r3, r7, #24
 8000452:	2228      	movs	r2, #40	@ 0x28
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f005 f9c6 	bl	80057e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]
 8000468:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046a:	2302      	movs	r3, #2
 800046c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800046e:	2301      	movs	r3, #1
 8000470:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000472:	2310      	movs	r3, #16
 8000474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000476:	2300      	movs	r3, #0
 8000478:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800047a:	f107 0318 	add.w	r3, r7, #24
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fd5c 	bl	8000f3c <HAL_RCC_OscConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800048a:	f000 f863 	bl	8000554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800048e:	230f      	movs	r3, #15
 8000490:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000492:	2300      	movs	r3, #0
 8000494:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000496:	2300      	movs	r3, #0
 8000498:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800049a:	2300      	movs	r3, #0
 800049c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800049e:	2300      	movs	r3, #0
 80004a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004a2:	1d3b      	adds	r3, r7, #4
 80004a4:	2100      	movs	r1, #0
 80004a6:	4618      	mov	r0, r3
 80004a8:	f000 ffca 	bl	8001440 <HAL_RCC_ClockConfig>
 80004ac:	4603      	mov	r3, r0
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004b2:	f000 f84f 	bl	8000554 <Error_Handler>
  }
}
 80004b6:	bf00      	nop
 80004b8:	3740      	adds	r7, #64	@ 0x40
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a04      	ldr	r2, [pc, #16]	@ (80004e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d101      	bne.n	80004d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80004d2:	f000 f9dd 	bl	8000890 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80004d6:	bf00      	nop
 80004d8:	3708      	adds	r7, #8
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40012c00 	.word	0x40012c00

080004e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == huart1.Instance) { // Đảm bảo đúng instance
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681a      	ldr	r2, [r3, #0]
 80004f0:	4b15      	ldr	r3, [pc, #84]	@ (8000548 <HAL_UART_RxCpltCallback+0x64>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	429a      	cmp	r2, r3
 80004f6:	d11e      	bne.n	8000536 <HAL_UART_RxCpltCallback+0x52>
        uint8_t queue_item = 0; // Biến để lưu ID cần push vào hàng đợi
 80004f8:	2300      	movs	r3, #0
 80004fa:	73fb      	strb	r3, [r7, #15]

        // Kiểm tra giá trị RX_data
        switch (RX_data) {
 80004fc:	4b13      	ldr	r3, [pc, #76]	@ (800054c <HAL_UART_RxCpltCallback+0x68>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b70      	cmp	r3, #112	@ 0x70
 8000502:	d00c      	beq.n	800051e <HAL_UART_RxCpltCallback+0x3a>
 8000504:	2b70      	cmp	r3, #112	@ 0x70
 8000506:	dc0d      	bgt.n	8000524 <HAL_UART_RxCpltCallback+0x40>
 8000508:	2b69      	cmp	r3, #105	@ 0x69
 800050a:	d002      	beq.n	8000512 <HAL_UART_RxCpltCallback+0x2e>
 800050c:	2b6f      	cmp	r3, #111	@ 0x6f
 800050e:	d003      	beq.n	8000518 <HAL_UART_RxCpltCallback+0x34>
            case 112: // RX_data = 112 -> Push ID3
                queue_item = 3; // ID3
                break;
            default:
                // Không hợp lệ, không thực hiện gì
                break;
 8000510:	e008      	b.n	8000524 <HAL_UART_RxCpltCallback+0x40>
                queue_item = 1; // ID1
 8000512:	2301      	movs	r3, #1
 8000514:	73fb      	strb	r3, [r7, #15]
                break;
 8000516:	e006      	b.n	8000526 <HAL_UART_RxCpltCallback+0x42>
                queue_item = 2; // ID2
 8000518:	2302      	movs	r3, #2
 800051a:	73fb      	strb	r3, [r7, #15]
                break;
 800051c:	e003      	b.n	8000526 <HAL_UART_RxCpltCallback+0x42>
                queue_item = 3; // ID3
 800051e:	2303      	movs	r3, #3
 8000520:	73fb      	strb	r3, [r7, #15]
                break;
 8000522:	e000      	b.n	8000526 <HAL_UART_RxCpltCallback+0x42>
                break;
 8000524:	bf00      	nop
        }

        osMessageQueuePut(Hangdoi_ngatHandle, &queue_item, 0, 0);
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <HAL_UART_RxCpltCallback+0x6c>)
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	f107 010f 	add.w	r1, r7, #15
 800052e:	2300      	movs	r3, #0
 8000530:	2200      	movs	r2, #0
 8000532:	f002 fb97 	bl	8002c64 <osMessageQueuePut>

    }
    	HAL_UART_Receive_IT(&huart1, &RX_data, 1);
 8000536:	2201      	movs	r2, #1
 8000538:	4904      	ldr	r1, [pc, #16]	@ (800054c <HAL_UART_RxCpltCallback+0x68>)
 800053a:	4803      	ldr	r0, [pc, #12]	@ (8000548 <HAL_UART_RxCpltCallback+0x64>)
 800053c:	f001 fc57 	bl	8001dee <HAL_UART_Receive_IT>
}
 8000540:	bf00      	nop
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	200000dc 	.word	0x200000dc
 800054c:	20000090 	.word	0x20000090
 8000550:	2000008c 	.word	0x2000008c

08000554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000558:	b672      	cpsid	i
}
 800055a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <Error_Handler+0x8>

08000560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000566:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <HAL_MspInit+0x68>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	4a17      	ldr	r2, [pc, #92]	@ (80005c8 <HAL_MspInit+0x68>)
 800056c:	f043 0301 	orr.w	r3, r3, #1
 8000570:	6193      	str	r3, [r2, #24]
 8000572:	4b15      	ldr	r3, [pc, #84]	@ (80005c8 <HAL_MspInit+0x68>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f003 0301 	and.w	r3, r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800057e:	4b12      	ldr	r3, [pc, #72]	@ (80005c8 <HAL_MspInit+0x68>)
 8000580:	69db      	ldr	r3, [r3, #28]
 8000582:	4a11      	ldr	r2, [pc, #68]	@ (80005c8 <HAL_MspInit+0x68>)
 8000584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000588:	61d3      	str	r3, [r2, #28]
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <HAL_MspInit+0x68>)
 800058c:	69db      	ldr	r3, [r3, #28]
 800058e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000596:	2200      	movs	r2, #0
 8000598:	210f      	movs	r1, #15
 800059a:	f06f 0001 	mvn.w	r0, #1
 800059e:	f000 fa6c 	bl	8000a7a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005a2:	4b0a      	ldr	r3, [pc, #40]	@ (80005cc <HAL_MspInit+0x6c>)
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <HAL_MspInit+0x6c>)
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010000 	.word	0x40010000

080005d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b08c      	sub	sp, #48	@ 0x30
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80005d8:	2300      	movs	r3, #0
 80005da:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80005dc:	2300      	movs	r3, #0
 80005de:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80005e0:	2300      	movs	r3, #0
 80005e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005e6:	4b2e      	ldr	r3, [pc, #184]	@ (80006a0 <HAL_InitTick+0xd0>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a2d      	ldr	r2, [pc, #180]	@ (80006a0 <HAL_InitTick+0xd0>)
 80005ec:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80005f0:	6193      	str	r3, [r2, #24]
 80005f2:	4b2b      	ldr	r3, [pc, #172]	@ (80006a0 <HAL_InitTick+0xd0>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005fe:	f107 020c 	add.w	r2, r7, #12
 8000602:	f107 0310 	add.w	r3, r7, #16
 8000606:	4611      	mov	r1, r2
 8000608:	4618      	mov	r0, r3
 800060a:	f001 f889 	bl	8001720 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800060e:	f001 f873 	bl	80016f8 <HAL_RCC_GetPCLK2Freq>
 8000612:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000616:	4a23      	ldr	r2, [pc, #140]	@ (80006a4 <HAL_InitTick+0xd4>)
 8000618:	fba2 2303 	umull	r2, r3, r2, r3
 800061c:	0c9b      	lsrs	r3, r3, #18
 800061e:	3b01      	subs	r3, #1
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000622:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <HAL_InitTick+0xd8>)
 8000624:	4a21      	ldr	r2, [pc, #132]	@ (80006ac <HAL_InitTick+0xdc>)
 8000626:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000628:	4b1f      	ldr	r3, [pc, #124]	@ (80006a8 <HAL_InitTick+0xd8>)
 800062a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800062e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000630:	4a1d      	ldr	r2, [pc, #116]	@ (80006a8 <HAL_InitTick+0xd8>)
 8000632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000634:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000636:	4b1c      	ldr	r3, [pc, #112]	@ (80006a8 <HAL_InitTick+0xd8>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800063c:	4b1a      	ldr	r3, [pc, #104]	@ (80006a8 <HAL_InitTick+0xd8>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000642:	4b19      	ldr	r3, [pc, #100]	@ (80006a8 <HAL_InitTick+0xd8>)
 8000644:	2200      	movs	r2, #0
 8000646:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000648:	4817      	ldr	r0, [pc, #92]	@ (80006a8 <HAL_InitTick+0xd8>)
 800064a:	f001 f8b7 	bl	80017bc <HAL_TIM_Base_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000654:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000658:	2b00      	cmp	r3, #0
 800065a:	d11b      	bne.n	8000694 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800065c:	4812      	ldr	r0, [pc, #72]	@ (80006a8 <HAL_InitTick+0xd8>)
 800065e:	f001 f905 	bl	800186c <HAL_TIM_Base_Start_IT>
 8000662:	4603      	mov	r3, r0
 8000664:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000668:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800066c:	2b00      	cmp	r3, #0
 800066e:	d111      	bne.n	8000694 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000670:	2019      	movs	r0, #25
 8000672:	f000 fa1e 	bl	8000ab2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b0f      	cmp	r3, #15
 800067a:	d808      	bhi.n	800068e <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800067c:	2200      	movs	r2, #0
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	2019      	movs	r0, #25
 8000682:	f000 f9fa 	bl	8000a7a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000686:	4a0a      	ldr	r2, [pc, #40]	@ (80006b0 <HAL_InitTick+0xe0>)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	e002      	b.n	8000694 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000694:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000698:	4618      	mov	r0, r3
 800069a:	3730      	adds	r7, #48	@ 0x30
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40021000 	.word	0x40021000
 80006a4:	431bde83 	.word	0x431bde83
 80006a8:	20000094 	.word	0x20000094
 80006ac:	40012c00 	.word	0x40012c00
 80006b0:	20000004 	.word	0x20000004

080006b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006b8:	bf00      	nop
 80006ba:	e7fd      	b.n	80006b8 <NMI_Handler+0x4>

080006bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006c0:	bf00      	nop
 80006c2:	e7fd      	b.n	80006c0 <HardFault_Handler+0x4>

080006c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006c8:	bf00      	nop
 80006ca:	e7fd      	b.n	80006c8 <MemManage_Handler+0x4>

080006cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <BusFault_Handler+0x4>

080006d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006d8:	bf00      	nop
 80006da:	e7fd      	b.n	80006d8 <UsageFault_Handler+0x4>

080006dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bc80      	pop	{r7}
 80006e6:	4770      	bx	lr

080006e8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80006ec:	4802      	ldr	r0, [pc, #8]	@ (80006f8 <TIM1_UP_IRQHandler+0x10>)
 80006ee:	f001 f90f 	bl	8001910 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000094 	.word	0x20000094

080006fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000700:	4802      	ldr	r0, [pc, #8]	@ (800070c <USART1_IRQHandler+0x10>)
 8000702:	f001 fb99 	bl	8001e38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	200000dc 	.word	0x200000dc

08000710 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000720:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	@ (800076c <MX_USART1_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <MX_USART1_UART_Init+0x4c>)
 8000754:	f001 fa70 	bl	8001c38 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f7ff fef9 	bl	8000554 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000dc 	.word	0x200000dc
 800076c:	40013800 	.word	0x40013800

08000770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a20      	ldr	r2, [pc, #128]	@ (800080c <HAL_UART_MspInit+0x9c>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d139      	bne.n	8000804 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <HAL_UART_MspInit+0xa0>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a1e      	ldr	r2, [pc, #120]	@ (8000810 <HAL_UART_MspInit+0xa0>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <HAL_UART_MspInit+0xa0>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <HAL_UART_MspInit+0xa0>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a18      	ldr	r2, [pc, #96]	@ (8000810 <HAL_UART_MspInit+0xa0>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <HAL_UART_MspInit+0xa0>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	480f      	ldr	r0, [pc, #60]	@ (8000814 <HAL_UART_MspInit+0xa4>)
 80007d6:	f000 fa2d 	bl	8000c34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4809      	ldr	r0, [pc, #36]	@ (8000814 <HAL_UART_MspInit+0xa4>)
 80007f0:	f000 fa20 	bl	8000c34 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	2105      	movs	r1, #5
 80007f8:	2025      	movs	r0, #37	@ 0x25
 80007fa:	f000 f93e 	bl	8000a7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80007fe:	2025      	movs	r0, #37	@ 0x25
 8000800:	f000 f957 	bl	8000ab2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000804:	bf00      	nop
 8000806:	3720      	adds	r7, #32
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40013800 	.word	0x40013800
 8000810:	40021000 	.word	0x40021000
 8000814:	40010800 	.word	0x40010800

08000818 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000818:	f7ff ff7a 	bl	8000710 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800081e:	490c      	ldr	r1, [pc, #48]	@ (8000850 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000820:	4a0c      	ldr	r2, [pc, #48]	@ (8000854 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000824:	e002      	b.n	800082c <LoopCopyDataInit>

08000826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082a:	3304      	adds	r3, #4

0800082c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800082c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800082e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000830:	d3f9      	bcc.n	8000826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000832:	4a09      	ldr	r2, [pc, #36]	@ (8000858 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000834:	4c09      	ldr	r4, [pc, #36]	@ (800085c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000838:	e001      	b.n	800083e <LoopFillZerobss>

0800083a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800083c:	3204      	adds	r2, #4

0800083e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800083e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000840:	d3fb      	bcc.n	800083a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000842:	f005 f82f 	bl	80058a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000846:	f7ff fde3 	bl	8000410 <main>
  bx lr
 800084a:	4770      	bx	lr
  ldr r0, =_sdata
 800084c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000850:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000854:	08005ce0 	.word	0x08005ce0
  ldr r2, =_sbss
 8000858:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 800085c:	20001c50 	.word	0x20001c50

08000860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000860:	e7fe      	b.n	8000860 <ADC1_2_IRQHandler>
	...

08000864 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	4b08      	ldr	r3, [pc, #32]	@ (800088c <HAL_Init+0x28>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a07      	ldr	r2, [pc, #28]	@ (800088c <HAL_Init+0x28>)
 800086e:	f043 0310 	orr.w	r3, r3, #16
 8000872:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000874:	2003      	movs	r0, #3
 8000876:	f000 f8f5 	bl	8000a64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087a:	200f      	movs	r0, #15
 800087c:	f7ff fea8 	bl	80005d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000880:	f7ff fe6e 	bl	8000560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40022000 	.word	0x40022000

08000890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <HAL_IncTick+0x1c>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	461a      	mov	r2, r3
 800089a:	4b05      	ldr	r3, [pc, #20]	@ (80008b0 <HAL_IncTick+0x20>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4413      	add	r3, r2
 80008a0:	4a03      	ldr	r2, [pc, #12]	@ (80008b0 <HAL_IncTick+0x20>)
 80008a2:	6013      	str	r3, [r2, #0]
}
 80008a4:	bf00      	nop
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	20000008 	.word	0x20000008
 80008b0:	20000124 	.word	0x20000124

080008b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  return uwTick;
 80008b8:	4b02      	ldr	r3, [pc, #8]	@ (80008c4 <HAL_GetTick+0x10>)
 80008ba:	681b      	ldr	r3, [r3, #0]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	20000124 	.word	0x20000124

080008c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008d0:	f7ff fff0 	bl	80008b4 <HAL_GetTick>
 80008d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008e0:	d005      	beq.n	80008ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008e2:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_Delay+0x44>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	461a      	mov	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	4413      	add	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008ee:	bf00      	nop
 80008f0:	f7ff ffe0 	bl	80008b4 <HAL_GetTick>
 80008f4:	4602      	mov	r2, r0
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d8f7      	bhi.n	80008f0 <HAL_Delay+0x28>
  {
  }
}
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000008 	.word	0x20000008

08000910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f003 0307 	and.w	r3, r3, #7
 800091e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000926:	68ba      	ldr	r2, [r7, #8]
 8000928:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800092c:	4013      	ands	r3, r2
 800092e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000938:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800093c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000942:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <__NVIC_SetPriorityGrouping+0x44>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	60d3      	str	r3, [r2, #12]
}
 8000948:	bf00      	nop
 800094a:	3714      	adds	r7, #20
 800094c:	46bd      	mov	sp, r7
 800094e:	bc80      	pop	{r7}
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800095c:	4b04      	ldr	r3, [pc, #16]	@ (8000970 <__NVIC_GetPriorityGrouping+0x18>)
 800095e:	68db      	ldr	r3, [r3, #12]
 8000960:	0a1b      	lsrs	r3, r3, #8
 8000962:	f003 0307 	and.w	r3, r3, #7
}
 8000966:	4618      	mov	r0, r3
 8000968:	46bd      	mov	sp, r7
 800096a:	bc80      	pop	{r7}
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	2b00      	cmp	r3, #0
 8000984:	db0b      	blt.n	800099e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	f003 021f 	and.w	r2, r3, #31
 800098c:	4906      	ldr	r1, [pc, #24]	@ (80009a8 <__NVIC_EnableIRQ+0x34>)
 800098e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000992:	095b      	lsrs	r3, r3, #5
 8000994:	2001      	movs	r0, #1
 8000996:	fa00 f202 	lsl.w	r2, r0, r2
 800099a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	e000e100 	.word	0xe000e100

080009ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	6039      	str	r1, [r7, #0]
 80009b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	db0a      	blt.n	80009d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	b2da      	uxtb	r2, r3
 80009c4:	490c      	ldr	r1, [pc, #48]	@ (80009f8 <__NVIC_SetPriority+0x4c>)
 80009c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ca:	0112      	lsls	r2, r2, #4
 80009cc:	b2d2      	uxtb	r2, r2
 80009ce:	440b      	add	r3, r1
 80009d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009d4:	e00a      	b.n	80009ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	b2da      	uxtb	r2, r3
 80009da:	4908      	ldr	r1, [pc, #32]	@ (80009fc <__NVIC_SetPriority+0x50>)
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f003 030f 	and.w	r3, r3, #15
 80009e2:	3b04      	subs	r3, #4
 80009e4:	0112      	lsls	r2, r2, #4
 80009e6:	b2d2      	uxtb	r2, r2
 80009e8:	440b      	add	r3, r1
 80009ea:	761a      	strb	r2, [r3, #24]
}
 80009ec:	bf00      	nop
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000e100 	.word	0xe000e100
 80009fc:	e000ed00 	.word	0xe000ed00

08000a00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b089      	sub	sp, #36	@ 0x24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	60f8      	str	r0, [r7, #12]
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a14:	69fb      	ldr	r3, [r7, #28]
 8000a16:	f1c3 0307 	rsb	r3, r3, #7
 8000a1a:	2b04      	cmp	r3, #4
 8000a1c:	bf28      	it	cs
 8000a1e:	2304      	movcs	r3, #4
 8000a20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a22:	69fb      	ldr	r3, [r7, #28]
 8000a24:	3304      	adds	r3, #4
 8000a26:	2b06      	cmp	r3, #6
 8000a28:	d902      	bls.n	8000a30 <NVIC_EncodePriority+0x30>
 8000a2a:	69fb      	ldr	r3, [r7, #28]
 8000a2c:	3b03      	subs	r3, #3
 8000a2e:	e000      	b.n	8000a32 <NVIC_EncodePriority+0x32>
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a34:	f04f 32ff 	mov.w	r2, #4294967295
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3e:	43da      	mvns	r2, r3
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a48:	f04f 31ff 	mov.w	r1, #4294967295
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a52:	43d9      	mvns	r1, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a58:	4313      	orrs	r3, r2
         );
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3724      	adds	r7, #36	@ 0x24
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr

08000a64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f7ff ff4f 	bl	8000910 <__NVIC_SetPriorityGrouping>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	4603      	mov	r3, r0
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
 8000a86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a8c:	f7ff ff64 	bl	8000958 <__NVIC_GetPriorityGrouping>
 8000a90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	68b9      	ldr	r1, [r7, #8]
 8000a96:	6978      	ldr	r0, [r7, #20]
 8000a98:	f7ff ffb2 	bl	8000a00 <NVIC_EncodePriority>
 8000a9c:	4602      	mov	r2, r0
 8000a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff ff81 	bl	80009ac <__NVIC_SetPriority>
}
 8000aaa:	bf00      	nop
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff57 	bl	8000974 <__NVIC_EnableIRQ>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b085      	sub	sp, #20
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d008      	beq.n	8000af8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2204      	movs	r2, #4
 8000aea:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	e020      	b.n	8000b3a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f022 020e 	bic.w	r2, r2, #14
 8000b06:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f022 0201 	bic.w	r2, r2, #1
 8000b16:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b20:	2101      	movs	r1, #1
 8000b22:	fa01 f202 	lsl.w	r2, r1, r2
 8000b26:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2200      	movs	r2, #0
 8000b34:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr

08000b44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b02      	cmp	r3, #2
 8000b5a:	d005      	beq.n	8000b68 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2204      	movs	r2, #4
 8000b60:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000b62:	2301      	movs	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
 8000b66:	e051      	b.n	8000c0c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 020e 	bic.w	r2, r2, #14
 8000b76:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f022 0201 	bic.w	r2, r2, #1
 8000b86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a22      	ldr	r2, [pc, #136]	@ (8000c18 <HAL_DMA_Abort_IT+0xd4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d029      	beq.n	8000be6 <HAL_DMA_Abort_IT+0xa2>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a21      	ldr	r2, [pc, #132]	@ (8000c1c <HAL_DMA_Abort_IT+0xd8>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d022      	beq.n	8000be2 <HAL_DMA_Abort_IT+0x9e>
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c20 <HAL_DMA_Abort_IT+0xdc>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d01a      	beq.n	8000bdc <HAL_DMA_Abort_IT+0x98>
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a1e      	ldr	r2, [pc, #120]	@ (8000c24 <HAL_DMA_Abort_IT+0xe0>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d012      	beq.n	8000bd6 <HAL_DMA_Abort_IT+0x92>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c28 <HAL_DMA_Abort_IT+0xe4>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d00a      	beq.n	8000bd0 <HAL_DMA_Abort_IT+0x8c>
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8000c2c <HAL_DMA_Abort_IT+0xe8>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d102      	bne.n	8000bca <HAL_DMA_Abort_IT+0x86>
 8000bc4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000bc8:	e00e      	b.n	8000be8 <HAL_DMA_Abort_IT+0xa4>
 8000bca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000bce:	e00b      	b.n	8000be8 <HAL_DMA_Abort_IT+0xa4>
 8000bd0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bd4:	e008      	b.n	8000be8 <HAL_DMA_Abort_IT+0xa4>
 8000bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bda:	e005      	b.n	8000be8 <HAL_DMA_Abort_IT+0xa4>
 8000bdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be0:	e002      	b.n	8000be8 <HAL_DMA_Abort_IT+0xa4>
 8000be2:	2310      	movs	r3, #16
 8000be4:	e000      	b.n	8000be8 <HAL_DMA_Abort_IT+0xa4>
 8000be6:	2301      	movs	r3, #1
 8000be8:	4a11      	ldr	r2, [pc, #68]	@ (8000c30 <HAL_DMA_Abort_IT+0xec>)
 8000bea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2201      	movs	r2, #1
 8000bf0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d003      	beq.n	8000c0c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	4798      	blx	r3
    } 
  }
  return status;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40020008 	.word	0x40020008
 8000c1c:	4002001c 	.word	0x4002001c
 8000c20:	40020030 	.word	0x40020030
 8000c24:	40020044 	.word	0x40020044
 8000c28:	40020058 	.word	0x40020058
 8000c2c:	4002006c 	.word	0x4002006c
 8000c30:	40020000 	.word	0x40020000

08000c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b08b      	sub	sp, #44	@ 0x2c
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c42:	2300      	movs	r3, #0
 8000c44:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c46:	e169      	b.n	8000f1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c48:	2201      	movs	r2, #1
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c50:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	69fa      	ldr	r2, [r7, #28]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f040 8158 	bne.w	8000f16 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	4a9a      	ldr	r2, [pc, #616]	@ (8000ed4 <HAL_GPIO_Init+0x2a0>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d05e      	beq.n	8000d2e <HAL_GPIO_Init+0xfa>
 8000c70:	4a98      	ldr	r2, [pc, #608]	@ (8000ed4 <HAL_GPIO_Init+0x2a0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d875      	bhi.n	8000d62 <HAL_GPIO_Init+0x12e>
 8000c76:	4a98      	ldr	r2, [pc, #608]	@ (8000ed8 <HAL_GPIO_Init+0x2a4>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d058      	beq.n	8000d2e <HAL_GPIO_Init+0xfa>
 8000c7c:	4a96      	ldr	r2, [pc, #600]	@ (8000ed8 <HAL_GPIO_Init+0x2a4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d86f      	bhi.n	8000d62 <HAL_GPIO_Init+0x12e>
 8000c82:	4a96      	ldr	r2, [pc, #600]	@ (8000edc <HAL_GPIO_Init+0x2a8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d052      	beq.n	8000d2e <HAL_GPIO_Init+0xfa>
 8000c88:	4a94      	ldr	r2, [pc, #592]	@ (8000edc <HAL_GPIO_Init+0x2a8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d869      	bhi.n	8000d62 <HAL_GPIO_Init+0x12e>
 8000c8e:	4a94      	ldr	r2, [pc, #592]	@ (8000ee0 <HAL_GPIO_Init+0x2ac>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d04c      	beq.n	8000d2e <HAL_GPIO_Init+0xfa>
 8000c94:	4a92      	ldr	r2, [pc, #584]	@ (8000ee0 <HAL_GPIO_Init+0x2ac>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d863      	bhi.n	8000d62 <HAL_GPIO_Init+0x12e>
 8000c9a:	4a92      	ldr	r2, [pc, #584]	@ (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d046      	beq.n	8000d2e <HAL_GPIO_Init+0xfa>
 8000ca0:	4a90      	ldr	r2, [pc, #576]	@ (8000ee4 <HAL_GPIO_Init+0x2b0>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d85d      	bhi.n	8000d62 <HAL_GPIO_Init+0x12e>
 8000ca6:	2b12      	cmp	r3, #18
 8000ca8:	d82a      	bhi.n	8000d00 <HAL_GPIO_Init+0xcc>
 8000caa:	2b12      	cmp	r3, #18
 8000cac:	d859      	bhi.n	8000d62 <HAL_GPIO_Init+0x12e>
 8000cae:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb4 <HAL_GPIO_Init+0x80>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000d2f 	.word	0x08000d2f
 8000cb8:	08000d09 	.word	0x08000d09
 8000cbc:	08000d1b 	.word	0x08000d1b
 8000cc0:	08000d5d 	.word	0x08000d5d
 8000cc4:	08000d63 	.word	0x08000d63
 8000cc8:	08000d63 	.word	0x08000d63
 8000ccc:	08000d63 	.word	0x08000d63
 8000cd0:	08000d63 	.word	0x08000d63
 8000cd4:	08000d63 	.word	0x08000d63
 8000cd8:	08000d63 	.word	0x08000d63
 8000cdc:	08000d63 	.word	0x08000d63
 8000ce0:	08000d63 	.word	0x08000d63
 8000ce4:	08000d63 	.word	0x08000d63
 8000ce8:	08000d63 	.word	0x08000d63
 8000cec:	08000d63 	.word	0x08000d63
 8000cf0:	08000d63 	.word	0x08000d63
 8000cf4:	08000d63 	.word	0x08000d63
 8000cf8:	08000d11 	.word	0x08000d11
 8000cfc:	08000d25 	.word	0x08000d25
 8000d00:	4a79      	ldr	r2, [pc, #484]	@ (8000ee8 <HAL_GPIO_Init+0x2b4>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d013      	beq.n	8000d2e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d06:	e02c      	b.n	8000d62 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	623b      	str	r3, [r7, #32]
          break;
 8000d0e:	e029      	b.n	8000d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	3304      	adds	r3, #4
 8000d16:	623b      	str	r3, [r7, #32]
          break;
 8000d18:	e024      	b.n	8000d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	68db      	ldr	r3, [r3, #12]
 8000d1e:	3308      	adds	r3, #8
 8000d20:	623b      	str	r3, [r7, #32]
          break;
 8000d22:	e01f      	b.n	8000d64 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	330c      	adds	r3, #12
 8000d2a:	623b      	str	r3, [r7, #32]
          break;
 8000d2c:	e01a      	b.n	8000d64 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	689b      	ldr	r3, [r3, #8]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d36:	2304      	movs	r3, #4
 8000d38:	623b      	str	r3, [r7, #32]
          break;
 8000d3a:	e013      	b.n	8000d64 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d105      	bne.n	8000d50 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d44:	2308      	movs	r3, #8
 8000d46:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	69fa      	ldr	r2, [r7, #28]
 8000d4c:	611a      	str	r2, [r3, #16]
          break;
 8000d4e:	e009      	b.n	8000d64 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d50:	2308      	movs	r3, #8
 8000d52:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	615a      	str	r2, [r3, #20]
          break;
 8000d5a:	e003      	b.n	8000d64 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
          break;
 8000d60:	e000      	b.n	8000d64 <HAL_GPIO_Init+0x130>
          break;
 8000d62:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	2bff      	cmp	r3, #255	@ 0xff
 8000d68:	d801      	bhi.n	8000d6e <HAL_GPIO_Init+0x13a>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	e001      	b.n	8000d72 <HAL_GPIO_Init+0x13e>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	3304      	adds	r3, #4
 8000d72:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	2bff      	cmp	r3, #255	@ 0xff
 8000d78:	d802      	bhi.n	8000d80 <HAL_GPIO_Init+0x14c>
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	e002      	b.n	8000d86 <HAL_GPIO_Init+0x152>
 8000d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d82:	3b08      	subs	r3, #8
 8000d84:	009b      	lsls	r3, r3, #2
 8000d86:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	fa01 f303 	lsl.w	r3, r1, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	401a      	ands	r2, r3
 8000d98:	6a39      	ldr	r1, [r7, #32]
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	431a      	orrs	r2, r3
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	f000 80b1 	beq.w	8000f16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000db4:	4b4d      	ldr	r3, [pc, #308]	@ (8000eec <HAL_GPIO_Init+0x2b8>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a4c      	ldr	r2, [pc, #304]	@ (8000eec <HAL_GPIO_Init+0x2b8>)
 8000dba:	f043 0301 	orr.w	r3, r3, #1
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b4a      	ldr	r3, [pc, #296]	@ (8000eec <HAL_GPIO_Init+0x2b8>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dcc:	4a48      	ldr	r2, [pc, #288]	@ (8000ef0 <HAL_GPIO_Init+0x2bc>)
 8000dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	3302      	adds	r3, #2
 8000dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	220f      	movs	r2, #15
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4013      	ands	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	4a40      	ldr	r2, [pc, #256]	@ (8000ef4 <HAL_GPIO_Init+0x2c0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d013      	beq.n	8000e20 <HAL_GPIO_Init+0x1ec>
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a3f      	ldr	r2, [pc, #252]	@ (8000ef8 <HAL_GPIO_Init+0x2c4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <HAL_GPIO_Init+0x1e8>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a3e      	ldr	r2, [pc, #248]	@ (8000efc <HAL_GPIO_Init+0x2c8>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d007      	beq.n	8000e18 <HAL_GPIO_Init+0x1e4>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a3d      	ldr	r2, [pc, #244]	@ (8000f00 <HAL_GPIO_Init+0x2cc>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d101      	bne.n	8000e14 <HAL_GPIO_Init+0x1e0>
 8000e10:	2303      	movs	r3, #3
 8000e12:	e006      	b.n	8000e22 <HAL_GPIO_Init+0x1ee>
 8000e14:	2304      	movs	r3, #4
 8000e16:	e004      	b.n	8000e22 <HAL_GPIO_Init+0x1ee>
 8000e18:	2302      	movs	r3, #2
 8000e1a:	e002      	b.n	8000e22 <HAL_GPIO_Init+0x1ee>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <HAL_GPIO_Init+0x1ee>
 8000e20:	2300      	movs	r3, #0
 8000e22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e24:	f002 0203 	and.w	r2, r2, #3
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	4093      	lsls	r3, r2
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e32:	492f      	ldr	r1, [pc, #188]	@ (8000ef0 <HAL_GPIO_Init+0x2bc>)
 8000e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	492c      	ldr	r1, [pc, #176]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	608b      	str	r3, [r1, #8]
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4928      	ldr	r1, [pc, #160]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d006      	beq.n	8000e82 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e74:	4b23      	ldr	r3, [pc, #140]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	4922      	ldr	r1, [pc, #136]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	60cb      	str	r3, [r1, #12]
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e82:	4b20      	ldr	r3, [pc, #128]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	491e      	ldr	r1, [pc, #120]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e9c:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	4918      	ldr	r1, [pc, #96]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	604b      	str	r3, [r1, #4]
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eaa:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	4914      	ldr	r1, [pc, #80]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d021      	beq.n	8000f08 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	490e      	ldr	r1, [pc, #56]	@ (8000f04 <HAL_GPIO_Init+0x2d0>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]
 8000ed0:	e021      	b.n	8000f16 <HAL_GPIO_Init+0x2e2>
 8000ed2:	bf00      	nop
 8000ed4:	10320000 	.word	0x10320000
 8000ed8:	10310000 	.word	0x10310000
 8000edc:	10220000 	.word	0x10220000
 8000ee0:	10210000 	.word	0x10210000
 8000ee4:	10120000 	.word	0x10120000
 8000ee8:	10110000 	.word	0x10110000
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40010000 	.word	0x40010000
 8000ef4:	40010800 	.word	0x40010800
 8000ef8:	40010c00 	.word	0x40010c00
 8000efc:	40011000 	.word	0x40011000
 8000f00:	40011400 	.word	0x40011400
 8000f04:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	69bb      	ldr	r3, [r7, #24]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	4909      	ldr	r1, [pc, #36]	@ (8000f38 <HAL_GPIO_Init+0x304>)
 8000f12:	4013      	ands	r3, r2
 8000f14:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f18:	3301      	adds	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f22:	fa22 f303 	lsr.w	r3, r2, r3
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f47f ae8e 	bne.w	8000c48 <HAL_GPIO_Init+0x14>
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	372c      	adds	r7, #44	@ 0x2c
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bc80      	pop	{r7}
 8000f36:	4770      	bx	lr
 8000f38:	40010400 	.word	0x40010400

08000f3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e272      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 8087 	beq.w	800106a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f5c:	4b92      	ldr	r3, [pc, #584]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 030c 	and.w	r3, r3, #12
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d00c      	beq.n	8000f82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f68:	4b8f      	ldr	r3, [pc, #572]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 030c 	and.w	r3, r3, #12
 8000f70:	2b08      	cmp	r3, #8
 8000f72:	d112      	bne.n	8000f9a <HAL_RCC_OscConfig+0x5e>
 8000f74:	4b8c      	ldr	r3, [pc, #560]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f80:	d10b      	bne.n	8000f9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f82:	4b89      	ldr	r3, [pc, #548]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d06c      	beq.n	8001068 <HAL_RCC_OscConfig+0x12c>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d168      	bne.n	8001068 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e24c      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000fa2:	d106      	bne.n	8000fb2 <HAL_RCC_OscConfig+0x76>
 8000fa4:	4b80      	ldr	r3, [pc, #512]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a7f      	ldr	r2, [pc, #508]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fae:	6013      	str	r3, [r2, #0]
 8000fb0:	e02e      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10c      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x98>
 8000fba:	4b7b      	ldr	r3, [pc, #492]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7a      	ldr	r2, [pc, #488]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b78      	ldr	r3, [pc, #480]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a77      	ldr	r2, [pc, #476]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e01d      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0xbc>
 8000fde:	4b72      	ldr	r3, [pc, #456]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a71      	ldr	r2, [pc, #452]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b6f      	ldr	r3, [pc, #444]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a6e      	ldr	r2, [pc, #440]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_RCC_OscConfig+0xd4>
 8000ff8:	4b6b      	ldr	r3, [pc, #428]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a6a      	ldr	r2, [pc, #424]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b68      	ldr	r3, [pc, #416]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a67      	ldr	r2, [pc, #412]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800100e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fc4c 	bl	80008b4 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fc48 	bl	80008b4 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	@ 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e200      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	4b5d      	ldr	r3, [pc, #372]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f0      	beq.n	8001020 <HAL_RCC_OscConfig+0xe4>
 800103e:	e014      	b.n	800106a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fc38 	bl	80008b4 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fc34 	bl	80008b4 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	@ 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e1ec      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105a:	4b53      	ldr	r3, [pc, #332]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0x10c>
 8001066:	e000      	b.n	800106a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d063      	beq.n	800113e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001076:	4b4c      	ldr	r3, [pc, #304]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001082:	4b49      	ldr	r3, [pc, #292]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 030c 	and.w	r3, r3, #12
 800108a:	2b08      	cmp	r3, #8
 800108c:	d11c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x18c>
 800108e:	4b46      	ldr	r3, [pc, #280]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d116      	bne.n	80010c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109a:	4b43      	ldr	r3, [pc, #268]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <HAL_RCC_OscConfig+0x176>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d001      	beq.n	80010b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e1c0      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	4b3d      	ldr	r3, [pc, #244]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4939      	ldr	r1, [pc, #228]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c6:	e03a      	b.n	800113e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691b      	ldr	r3, [r3, #16]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d0:	4b36      	ldr	r3, [pc, #216]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d6:	f7ff fbed 	bl	80008b4 <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010de:	f7ff fbe9 	bl	80008b4 <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e1a1      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f0:	4b2d      	ldr	r3, [pc, #180]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4b2a      	ldr	r3, [pc, #168]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4927      	ldr	r1, [pc, #156]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 800110c:	4313      	orrs	r3, r2
 800110e:	600b      	str	r3, [r1, #0]
 8001110:	e015      	b.n	800113e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001112:	4b26      	ldr	r3, [pc, #152]	@ (80011ac <HAL_RCC_OscConfig+0x270>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001118:	f7ff fbcc 	bl	80008b4 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001120:	f7ff fbc8 	bl	80008b4 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e180      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	4b1d      	ldr	r3, [pc, #116]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d03a      	beq.n	80011c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d019      	beq.n	8001186 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001152:	4b17      	ldr	r3, [pc, #92]	@ (80011b0 <HAL_RCC_OscConfig+0x274>)
 8001154:	2201      	movs	r2, #1
 8001156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001158:	f7ff fbac 	bl	80008b4 <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001160:	f7ff fba8 	bl	80008b4 <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e160      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <HAL_RCC_OscConfig+0x26c>)
 8001174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fafe 	bl	8001780 <RCC_Delay>
 8001184:	e01c      	b.n	80011c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001186:	4b0a      	ldr	r3, [pc, #40]	@ (80011b0 <HAL_RCC_OscConfig+0x274>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118c:	f7ff fb92 	bl	80008b4 <HAL_GetTick>
 8001190:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001192:	e00f      	b.n	80011b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001194:	f7ff fb8e 	bl	80008b4 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d908      	bls.n	80011b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e146      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	42420000 	.word	0x42420000
 80011b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b4:	4b92      	ldr	r3, [pc, #584]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1e9      	bne.n	8001194 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80a6 	beq.w	800131a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ce:	2300      	movs	r3, #0
 80011d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10d      	bne.n	80011fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	4b88      	ldr	r3, [pc, #544]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	4a87      	ldr	r2, [pc, #540]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011e8:	61d3      	str	r3, [r2, #28]
 80011ea:	4b85      	ldr	r3, [pc, #532]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80011ec:	69db      	ldr	r3, [r3, #28]
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fa:	4b82      	ldr	r3, [pc, #520]	@ (8001404 <HAL_RCC_OscConfig+0x4c8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001202:	2b00      	cmp	r3, #0
 8001204:	d118      	bne.n	8001238 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001206:	4b7f      	ldr	r3, [pc, #508]	@ (8001404 <HAL_RCC_OscConfig+0x4c8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a7e      	ldr	r2, [pc, #504]	@ (8001404 <HAL_RCC_OscConfig+0x4c8>)
 800120c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001212:	f7ff fb4f 	bl	80008b4 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121a:	f7ff fb4b 	bl	80008b4 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b64      	cmp	r3, #100	@ 0x64
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e103      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122c:	4b75      	ldr	r3, [pc, #468]	@ (8001404 <HAL_RCC_OscConfig+0x4c8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x312>
 8001240:	4b6f      	ldr	r3, [pc, #444]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001242:	6a1b      	ldr	r3, [r3, #32]
 8001244:	4a6e      	ldr	r2, [pc, #440]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6213      	str	r3, [r2, #32]
 800124c:	e02d      	b.n	80012aa <HAL_RCC_OscConfig+0x36e>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x334>
 8001256:	4b6a      	ldr	r3, [pc, #424]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001258:	6a1b      	ldr	r3, [r3, #32]
 800125a:	4a69      	ldr	r2, [pc, #420]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	6213      	str	r3, [r2, #32]
 8001262:	4b67      	ldr	r3, [pc, #412]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001264:	6a1b      	ldr	r3, [r3, #32]
 8001266:	4a66      	ldr	r2, [pc, #408]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001268:	f023 0304 	bic.w	r3, r3, #4
 800126c:	6213      	str	r3, [r2, #32]
 800126e:	e01c      	b.n	80012aa <HAL_RCC_OscConfig+0x36e>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b05      	cmp	r3, #5
 8001276:	d10c      	bne.n	8001292 <HAL_RCC_OscConfig+0x356>
 8001278:	4b61      	ldr	r3, [pc, #388]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	4a60      	ldr	r2, [pc, #384]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6213      	str	r3, [r2, #32]
 8001284:	4b5e      	ldr	r3, [pc, #376]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001286:	6a1b      	ldr	r3, [r3, #32]
 8001288:	4a5d      	ldr	r2, [pc, #372]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6213      	str	r3, [r2, #32]
 8001290:	e00b      	b.n	80012aa <HAL_RCC_OscConfig+0x36e>
 8001292:	4b5b      	ldr	r3, [pc, #364]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	6a1b      	ldr	r3, [r3, #32]
 8001296:	4a5a      	ldr	r2, [pc, #360]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	f023 0301 	bic.w	r3, r3, #1
 800129c:	6213      	str	r3, [r2, #32]
 800129e:	4b58      	ldr	r3, [pc, #352]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	4a57      	ldr	r2, [pc, #348]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	f023 0304 	bic.w	r3, r3, #4
 80012a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d015      	beq.n	80012de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b2:	f7ff faff 	bl	80008b4 <HAL_GetTick>
 80012b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ba:	f7ff fafb 	bl	80008b4 <HAL_GetTick>
 80012be:	4602      	mov	r2, r0
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e0b1      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d0ee      	beq.n	80012ba <HAL_RCC_OscConfig+0x37e>
 80012dc:	e014      	b.n	8001308 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012de:	f7ff fae9 	bl	80008b4 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012e4:	e00a      	b.n	80012fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e6:	f7ff fae5 	bl	80008b4 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e09b      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012fc:	4b40      	ldr	r3, [pc, #256]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80012fe:	6a1b      	ldr	r3, [r3, #32]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1ee      	bne.n	80012e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001308:	7dfb      	ldrb	r3, [r7, #23]
 800130a:	2b01      	cmp	r3, #1
 800130c:	d105      	bne.n	800131a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800130e:	4b3c      	ldr	r3, [pc, #240]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	4a3b      	ldr	r2, [pc, #236]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001314:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001318:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 8087 	beq.w	8001432 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001324:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 030c 	and.w	r3, r3, #12
 800132c:	2b08      	cmp	r3, #8
 800132e:	d061      	beq.n	80013f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	2b02      	cmp	r3, #2
 8001336:	d146      	bne.n	80013c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001338:	4b33      	ldr	r3, [pc, #204]	@ (8001408 <HAL_RCC_OscConfig+0x4cc>)
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133e:	f7ff fab9 	bl	80008b4 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001344:	e008      	b.n	8001358 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001346:	f7ff fab5 	bl	80008b4 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	2b02      	cmp	r3, #2
 8001352:	d901      	bls.n	8001358 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001354:	2303      	movs	r3, #3
 8001356:	e06d      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001358:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d1f0      	bne.n	8001346 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1b      	ldr	r3, [r3, #32]
 8001368:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800136c:	d108      	bne.n	8001380 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800136e:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	4921      	ldr	r1, [pc, #132]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 800137c:	4313      	orrs	r3, r2
 800137e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001380:	4b1f      	ldr	r3, [pc, #124]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a19      	ldr	r1, [r3, #32]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001390:	430b      	orrs	r3, r1
 8001392:	491b      	ldr	r1, [pc, #108]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 8001394:	4313      	orrs	r3, r2
 8001396:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001398:	4b1b      	ldr	r3, [pc, #108]	@ (8001408 <HAL_RCC_OscConfig+0x4cc>)
 800139a:	2201      	movs	r2, #1
 800139c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139e:	f7ff fa89 	bl	80008b4 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013a6:	f7ff fa85 	bl	80008b4 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e03d      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x46a>
 80013c4:	e035      	b.n	8001432 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013c6:	4b10      	ldr	r3, [pc, #64]	@ (8001408 <HAL_RCC_OscConfig+0x4cc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013cc:	f7ff fa72 	bl	80008b4 <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d4:	f7ff fa6e 	bl	80008b4 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e026      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_RCC_OscConfig+0x4c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x498>
 80013f2:	e01e      	b.n	8001432 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d107      	bne.n	800140c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e019      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
 8001400:	40021000 	.word	0x40021000
 8001404:	40007000 	.word	0x40007000
 8001408:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_RCC_OscConfig+0x500>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	429a      	cmp	r2, r3
 800141e:	d106      	bne.n	800142e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	429a      	cmp	r2, r3
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40021000 	.word	0x40021000

08001440 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d101      	bne.n	8001454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e0d0      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001454:	4b6a      	ldr	r3, [pc, #424]	@ (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0307 	and.w	r3, r3, #7
 800145c:	683a      	ldr	r2, [r7, #0]
 800145e:	429a      	cmp	r2, r3
 8001460:	d910      	bls.n	8001484 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001462:	4b67      	ldr	r3, [pc, #412]	@ (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f023 0207 	bic.w	r2, r3, #7
 800146a:	4965      	ldr	r1, [pc, #404]	@ (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	4313      	orrs	r3, r2
 8001470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001472:	4b63      	ldr	r3, [pc, #396]	@ (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	429a      	cmp	r2, r3
 800147e:	d001      	beq.n	8001484 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0b8      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d020      	beq.n	80014d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800149c:	4b59      	ldr	r3, [pc, #356]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4a58      	ldr	r2, [pc, #352]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80014a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014b4:	4b53      	ldr	r3, [pc, #332]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	4a52      	ldr	r2, [pc, #328]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80014be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c0:	4b50      	ldr	r3, [pc, #320]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	494d      	ldr	r1, [pc, #308]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014ce:	4313      	orrs	r3, r2
 80014d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d040      	beq.n	8001560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d107      	bne.n	80014f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	4b47      	ldr	r3, [pc, #284]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d115      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e07f      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d107      	bne.n	800150e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014fe:	4b41      	ldr	r3, [pc, #260]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d109      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e073      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	4b3d      	ldr	r3, [pc, #244]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e06b      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800151e:	4b39      	ldr	r3, [pc, #228]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f023 0203 	bic.w	r2, r3, #3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4936      	ldr	r1, [pc, #216]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001530:	f7ff f9c0 	bl	80008b4 <HAL_GetTick>
 8001534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001536:	e00a      	b.n	800154e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001538:	f7ff f9bc 	bl	80008b4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001546:	4293      	cmp	r3, r2
 8001548:	d901      	bls.n	800154e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e053      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154e:	4b2d      	ldr	r3, [pc, #180]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f003 020c 	and.w	r2, r3, #12
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	429a      	cmp	r2, r3
 800155e:	d1eb      	bne.n	8001538 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001560:	4b27      	ldr	r3, [pc, #156]	@ (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d210      	bcs.n	8001590 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b24      	ldr	r3, [pc, #144]	@ (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0207 	bic.w	r2, r3, #7
 8001576:	4922      	ldr	r1, [pc, #136]	@ (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b20      	ldr	r3, [pc, #128]	@ (8001600 <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e032      	b.n	80015f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0304 	and.w	r3, r3, #4
 8001598:	2b00      	cmp	r3, #0
 800159a:	d008      	beq.n	80015ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800159c:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4916      	ldr	r1, [pc, #88]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d009      	beq.n	80015ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015ba:	4b12      	ldr	r3, [pc, #72]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	490e      	ldr	r1, [pc, #56]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80015ca:	4313      	orrs	r3, r2
 80015cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015ce:	f000 f821 	bl	8001614 <HAL_RCC_GetSysClockFreq>
 80015d2:	4602      	mov	r2, r0
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_RCC_ClockConfig+0x1c4>)
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	490a      	ldr	r1, [pc, #40]	@ (8001608 <HAL_RCC_ClockConfig+0x1c8>)
 80015e0:	5ccb      	ldrb	r3, [r1, r3]
 80015e2:	fa22 f303 	lsr.w	r3, r2, r3
 80015e6:	4a09      	ldr	r2, [pc, #36]	@ (800160c <HAL_RCC_ClockConfig+0x1cc>)
 80015e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <HAL_RCC_ClockConfig+0x1d0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe ffee 	bl	80005d0 <HAL_InitTick>

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40022000 	.word	0x40022000
 8001604:	40021000 	.word	0x40021000
 8001608:	08005ca4 	.word	0x08005ca4
 800160c:	20000000 	.word	0x20000000
 8001610:	20000004 	.word	0x20000004

08001614 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800162a:	2300      	movs	r3, #0
 800162c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800162e:	4b1e      	ldr	r3, [pc, #120]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b04      	cmp	r3, #4
 800163c:	d002      	beq.n	8001644 <HAL_RCC_GetSysClockFreq+0x30>
 800163e:	2b08      	cmp	r3, #8
 8001640:	d003      	beq.n	800164a <HAL_RCC_GetSysClockFreq+0x36>
 8001642:	e027      	b.n	8001694 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001644:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001646:	613b      	str	r3, [r7, #16]
      break;
 8001648:	e027      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	0c9b      	lsrs	r3, r3, #18
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	4a17      	ldr	r2, [pc, #92]	@ (80016b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001654:	5cd3      	ldrb	r3, [r2, r3]
 8001656:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d010      	beq.n	8001684 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	0c5b      	lsrs	r3, r3, #17
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	4a11      	ldr	r2, [pc, #68]	@ (80016b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800166e:	5cd3      	ldrb	r3, [r2, r3]
 8001670:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a0d      	ldr	r2, [pc, #52]	@ (80016ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001676:	fb03 f202 	mul.w	r2, r3, r2
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	e004      	b.n	800168e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a0c      	ldr	r2, [pc, #48]	@ (80016b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001688:	fb02 f303 	mul.w	r3, r2, r3
 800168c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	613b      	str	r3, [r7, #16]
      break;
 8001692:	e002      	b.n	800169a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001694:	4b05      	ldr	r3, [pc, #20]	@ (80016ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001696:	613b      	str	r3, [r7, #16]
      break;
 8001698:	bf00      	nop
    }
  }
  return sysclockfreq;
 800169a:	693b      	ldr	r3, [r7, #16]
}
 800169c:	4618      	mov	r0, r3
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bc80      	pop	{r7}
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	007a1200 	.word	0x007a1200
 80016b0:	08005cbc 	.word	0x08005cbc
 80016b4:	08005ccc 	.word	0x08005ccc
 80016b8:	003d0900 	.word	0x003d0900

080016bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016c0:	4b02      	ldr	r3, [pc, #8]	@ (80016cc <HAL_RCC_GetHCLKFreq+0x10>)
 80016c2:	681b      	ldr	r3, [r3, #0]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	20000000 	.word	0x20000000

080016d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016d4:	f7ff fff2 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 80016d8:	4602      	mov	r2, r0
 80016da:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	0a1b      	lsrs	r3, r3, #8
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	4903      	ldr	r1, [pc, #12]	@ (80016f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016e6:	5ccb      	ldrb	r3, [r1, r3]
 80016e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	40021000 	.word	0x40021000
 80016f4:	08005cb4 	.word	0x08005cb4

080016f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80016fc:	f7ff ffde 	bl	80016bc <HAL_RCC_GetHCLKFreq>
 8001700:	4602      	mov	r2, r0
 8001702:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	0adb      	lsrs	r3, r3, #11
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	4903      	ldr	r1, [pc, #12]	@ (800171c <HAL_RCC_GetPCLK2Freq+0x24>)
 800170e:	5ccb      	ldrb	r3, [r1, r3]
 8001710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40021000 	.word	0x40021000
 800171c:	08005cb4 	.word	0x08005cb4

08001720 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	220f      	movs	r2, #15
 800172e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001730:	4b11      	ldr	r3, [pc, #68]	@ (8001778 <HAL_RCC_GetClockConfig+0x58>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0203 	and.w	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800173c:	4b0e      	ldr	r3, [pc, #56]	@ (8001778 <HAL_RCC_GetClockConfig+0x58>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001748:	4b0b      	ldr	r3, [pc, #44]	@ (8001778 <HAL_RCC_GetClockConfig+0x58>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001754:	4b08      	ldr	r3, [pc, #32]	@ (8001778 <HAL_RCC_GetClockConfig+0x58>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	08db      	lsrs	r3, r3, #3
 800175a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_RCC_GetClockConfig+0x5c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0207 	and.w	r2, r3, #7
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40021000 	.word	0x40021000
 800177c:	40022000 	.word	0x40022000

08001780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001788:	4b0a      	ldr	r3, [pc, #40]	@ (80017b4 <RCC_Delay+0x34>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0a      	ldr	r2, [pc, #40]	@ (80017b8 <RCC_Delay+0x38>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0a5b      	lsrs	r3, r3, #9
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	fb02 f303 	mul.w	r3, r2, r3
 800179a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800179c:	bf00      	nop
  }
  while (Delay --);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	1e5a      	subs	r2, r3, #1
 80017a2:	60fa      	str	r2, [r7, #12]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f9      	bne.n	800179c <RCC_Delay+0x1c>
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr
 80017b4:	20000000 	.word	0x20000000
 80017b8:	10624dd3 	.word	0x10624dd3

080017bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e041      	b.n	8001852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d106      	bne.n	80017e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 f839 	bl	800185a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3304      	adds	r3, #4
 80017f8:	4619      	mov	r1, r3
 80017fa:	4610      	mov	r0, r2
 80017fc:	f000 f99c 	bl	8001b38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2201      	movs	r2, #1
 8001804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001850:	2300      	movs	r3, #0
}
 8001852:	4618      	mov	r0, r3
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800185a:	b480      	push	{r7}
 800185c:	b083      	sub	sp, #12
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001862:	bf00      	nop
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr

0800186c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d001      	beq.n	8001884 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e03a      	b.n	80018fa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2202      	movs	r2, #2
 8001888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a18      	ldr	r2, [pc, #96]	@ (8001904 <HAL_TIM_Base_Start_IT+0x98>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00e      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x58>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018ae:	d009      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x58>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a14      	ldr	r2, [pc, #80]	@ (8001908 <HAL_TIM_Base_Start_IT+0x9c>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d004      	beq.n	80018c4 <HAL_TIM_Base_Start_IT+0x58>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a13      	ldr	r2, [pc, #76]	@ (800190c <HAL_TIM_Base_Start_IT+0xa0>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d111      	bne.n	80018e8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b06      	cmp	r3, #6
 80018d4:	d010      	beq.n	80018f8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 0201 	orr.w	r2, r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e6:	e007      	b.n	80018f8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3714      	adds	r7, #20
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40012c00 	.word	0x40012c00
 8001908:	40000400 	.word	0x40000400
 800190c:	40000800 	.word	0x40000800

08001910 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d020      	beq.n	8001974 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01b      	beq.n	8001974 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0202 	mvn.w	r2, #2
 8001944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f8d1 	bl	8001b02 <HAL_TIM_IC_CaptureCallback>
 8001960:	e005      	b.n	800196e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f8c4 	bl	8001af0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f8d3 	bl	8001b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d020      	beq.n	80019c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d01b      	beq.n	80019c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f06f 0204 	mvn.w	r2, #4
 8001990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2202      	movs	r2, #2
 8001996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f000 f8ab 	bl	8001b02 <HAL_TIM_IC_CaptureCallback>
 80019ac:	e005      	b.n	80019ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f89e 	bl	8001af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 f8ad 	bl	8001b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	f003 0308 	and.w	r3, r3, #8
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d020      	beq.n	8001a0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01b      	beq.n	8001a0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f06f 0208 	mvn.w	r2, #8
 80019dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2204      	movs	r2, #4
 80019e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f885 	bl	8001b02 <HAL_TIM_IC_CaptureCallback>
 80019f8:	e005      	b.n	8001a06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 f878 	bl	8001af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f887 	bl	8001b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f003 0310 	and.w	r3, r3, #16
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d020      	beq.n	8001a58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f003 0310 	and.w	r3, r3, #16
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01b      	beq.n	8001a58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f06f 0210 	mvn.w	r2, #16
 8001a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2208      	movs	r2, #8
 8001a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f85f 	bl	8001b02 <HAL_TIM_IC_CaptureCallback>
 8001a44:	e005      	b.n	8001a52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f852 	bl	8001af0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f861 	bl	8001b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00c      	beq.n	8001a7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d007      	beq.n	8001a7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f06f 0201 	mvn.w	r2, #1
 8001a74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7fe fd22 	bl	80004c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d00c      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d007      	beq.n	8001aa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001a98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 f8c3 	bl	8001c26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d007      	beq.n	8001ac4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f831 	bl	8001b26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0320 	and.w	r3, r3, #32
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00c      	beq.n	8001ae8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f003 0320 	and.w	r3, r3, #32
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d007      	beq.n	8001ae8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f06f 0220 	mvn.w	r2, #32
 8001ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f000 f896 	bl	8001c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ae8:	bf00      	nop
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bc80      	pop	{r7}
 8001b12:	4770      	bx	lr

08001b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001c08 <TIM_Base_SetConfig+0xd0>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00b      	beq.n	8001b68 <TIM_Base_SetConfig+0x30>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b56:	d007      	beq.n	8001b68 <TIM_Base_SetConfig+0x30>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8001c0c <TIM_Base_SetConfig+0xd4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d003      	beq.n	8001b68 <TIM_Base_SetConfig+0x30>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a2b      	ldr	r2, [pc, #172]	@ (8001c10 <TIM_Base_SetConfig+0xd8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d108      	bne.n	8001b7a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	68fa      	ldr	r2, [r7, #12]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a22      	ldr	r2, [pc, #136]	@ (8001c08 <TIM_Base_SetConfig+0xd0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d00b      	beq.n	8001b9a <TIM_Base_SetConfig+0x62>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b88:	d007      	beq.n	8001b9a <TIM_Base_SetConfig+0x62>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001c0c <TIM_Base_SetConfig+0xd4>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d003      	beq.n	8001b9a <TIM_Base_SetConfig+0x62>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a1e      	ldr	r2, [pc, #120]	@ (8001c10 <TIM_Base_SetConfig+0xd8>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d108      	bne.n	8001bac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	68fa      	ldr	r2, [r7, #12]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8001c08 <TIM_Base_SetConfig+0xd0>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d103      	bne.n	8001be0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	691a      	ldr	r2, [r3, #16]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d005      	beq.n	8001bfe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	f023 0201 	bic.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	611a      	str	r2, [r3, #16]
  }
}
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr
 8001c08:	40012c00 	.word	0x40012c00
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40000800 	.word	0x40000800

08001c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e042      	b.n	8001cd0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7fe fd86 	bl	8000770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	@ 0x24
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fdb7 	bl	80027f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	695a      	ldr	r2, [r3, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ca0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001cb0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2220      	movs	r2, #32
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2220      	movs	r2, #32
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08a      	sub	sp, #40	@ 0x28
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	603b      	str	r3, [r7, #0]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b20      	cmp	r3, #32
 8001cf6:	d175      	bne.n	8001de4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <HAL_UART_Transmit+0x2c>
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e06e      	b.n	8001de6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2221      	movs	r2, #33	@ 0x21
 8001d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d16:	f7fe fdcd 	bl	80008b4 <HAL_GetTick>
 8001d1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	88fa      	ldrh	r2, [r7, #6]
 8001d20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	88fa      	ldrh	r2, [r7, #6]
 8001d26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d30:	d108      	bne.n	8001d44 <HAL_UART_Transmit+0x6c>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d104      	bne.n	8001d44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	e003      	b.n	8001d4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d4c:	e02e      	b.n	8001dac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	2200      	movs	r2, #0
 8001d56:	2180      	movs	r1, #128	@ 0x80
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 fb1c 	bl	8002396 <UART_WaitOnFlagUntilTimeout>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2220      	movs	r2, #32
 8001d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e03a      	b.n	8001de6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10b      	bne.n	8001d8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	3302      	adds	r3, #2
 8001d8a:	61bb      	str	r3, [r7, #24]
 8001d8c:	e007      	b.n	8001d9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	3b01      	subs	r3, #1
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1cb      	bne.n	8001d4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2140      	movs	r1, #64	@ 0x40
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 fae8 	bl	8002396 <UART_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d005      	beq.n	8001dd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e006      	b.n	8001de6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001de0:	2300      	movs	r3, #0
 8001de2:	e000      	b.n	8001de6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001de4:	2302      	movs	r3, #2
  }
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3720      	adds	r7, #32
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	60f8      	str	r0, [r7, #12]
 8001df6:	60b9      	str	r1, [r7, #8]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b20      	cmp	r3, #32
 8001e06:	d112      	bne.n	8001e2e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_UART_Receive_IT+0x26>
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e00b      	b.n	8001e30 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	461a      	mov	r2, r3
 8001e22:	68b9      	ldr	r1, [r7, #8]
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 fb0f 	bl	8002448 <UART_Start_Receive_IT>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	e000      	b.n	8001e30 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001e2e:	2302      	movs	r3, #2
  }
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b0ba      	sub	sp, #232	@ 0xe8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001e76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10f      	bne.n	8001e9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d009      	beq.n	8001e9e <HAL_UART_IRQHandler+0x66>
 8001e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001e8e:	f003 0320 	and.w	r3, r3, #32
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fbec 	bl	8002674 <UART_Receive_IT>
      return;
 8001e9c:	e25b      	b.n	8002356 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 80de 	beq.w	8002064 <HAL_UART_IRQHandler+0x22c>
 8001ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d106      	bne.n	8001ec2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001eb8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80d1 	beq.w	8002064 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_UART_IRQHandler+0xae>
 8001ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00b      	beq.n	8001f0a <HAL_UART_IRQHandler+0xd2>
 8001ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d005      	beq.n	8001f0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f02:	f043 0202 	orr.w	r2, r3, #2
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00b      	beq.n	8001f2e <HAL_UART_IRQHandler+0xf6>
 8001f16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f26:	f043 0204 	orr.w	r2, r3, #4
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d011      	beq.n	8001f5e <HAL_UART_IRQHandler+0x126>
 8001f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f3e:	f003 0320 	and.w	r3, r3, #32
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f043 0208 	orr.w	r2, r3, #8
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 81f2 	beq.w	800234c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_UART_IRQHandler+0x14e>
 8001f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f78:	f003 0320 	and.w	r3, r3, #32
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d002      	beq.n	8001f86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 fb77 	bl	8002674 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <HAL_UART_IRQHandler+0x17a>
 8001faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d04f      	beq.n	8002052 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 fa81 	bl	80024ba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d041      	beq.n	800204a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	3314      	adds	r3, #20
 8001fcc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001fd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001fd4:	e853 3f00 	ldrex	r3, [r3]
 8001fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8001fdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001fe0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001fe4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3314      	adds	r3, #20
 8001fee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001ff2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8001ff6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ffa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8001ffe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002002:	e841 2300 	strex	r3, r2, [r1]
 8002006:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800200a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1d9      	bne.n	8001fc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002016:	2b00      	cmp	r3, #0
 8002018:	d013      	beq.n	8002042 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800201e:	4a7e      	ldr	r2, [pc, #504]	@ (8002218 <HAL_UART_IRQHandler+0x3e0>)
 8002020:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fd8c 	bl	8000b44 <HAL_DMA_Abort_IT>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d016      	beq.n	8002060 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800203c:	4610      	mov	r0, r2
 800203e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002040:	e00e      	b.n	8002060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f993 	bl	800236e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002048:	e00a      	b.n	8002060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f98f 	bl	800236e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002050:	e006      	b.n	8002060 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f98b 	bl	800236e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800205e:	e175      	b.n	800234c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002060:	bf00      	nop
    return;
 8002062:	e173      	b.n	800234c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002068:	2b01      	cmp	r3, #1
 800206a:	f040 814f 	bne.w	800230c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800206e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8148 	beq.w	800230c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800207c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002080:	f003 0310 	and.w	r3, r3, #16
 8002084:	2b00      	cmp	r3, #0
 8002086:	f000 8141 	beq.w	800230c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	60bb      	str	r3, [r7, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	f000 80b6 	beq.w	800221c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80020bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8145 	beq.w	8002350 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80020ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80020ce:	429a      	cmp	r2, r3
 80020d0:	f080 813e 	bcs.w	8002350 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80020da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020e0:	699b      	ldr	r3, [r3, #24]
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	f000 8088 	beq.w	80021f8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	330c      	adds	r3, #12
 80020ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80020f6:	e853 3f00 	ldrex	r3, [r3]
 80020fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80020fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002102:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002106:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	330c      	adds	r3, #12
 8002110:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002114:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002118:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800211c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002120:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002124:	e841 2300 	strex	r3, r2, [r1]
 8002128:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800212c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1d9      	bne.n	80020e8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	3314      	adds	r3, #20
 800213a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800213c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800213e:	e853 3f00 	ldrex	r3, [r3]
 8002142:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002144:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3314      	adds	r3, #20
 8002154:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002158:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800215c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800215e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002160:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002164:	e841 2300 	strex	r3, r2, [r1]
 8002168:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800216a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e1      	bne.n	8002134 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3314      	adds	r3, #20
 8002176:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002178:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800217a:	e853 3f00 	ldrex	r3, [r3]
 800217e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002186:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3314      	adds	r3, #20
 8002190:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002194:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002196:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002198:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800219a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800219c:	e841 2300 	strex	r3, r2, [r1]
 80021a0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80021a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1e3      	bne.n	8002170 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2220      	movs	r2, #32
 80021ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	330c      	adds	r3, #12
 80021bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80021c0:	e853 3f00 	ldrex	r3, [r3]
 80021c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80021c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80021c8:	f023 0310 	bic.w	r3, r3, #16
 80021cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	330c      	adds	r3, #12
 80021d6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80021da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80021dc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80021e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80021e2:	e841 2300 	strex	r3, r2, [r1]
 80021e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80021e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1e3      	bne.n	80021b6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe fc6b 	bl	8000ace <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2202      	movs	r2, #2
 80021fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002206:	b29b      	uxth	r3, r3
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	b29b      	uxth	r3, r3
 800220c:	4619      	mov	r1, r3
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f8b6 	bl	8002380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002214:	e09c      	b.n	8002350 <HAL_UART_IRQHandler+0x518>
 8002216:	bf00      	nop
 8002218:	0800257f 	.word	0x0800257f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002224:	b29b      	uxth	r3, r3
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	f000 808e 	beq.w	8002354 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002238:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 8089 	beq.w	8002354 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	330c      	adds	r3, #12
 8002248:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800224a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800224c:	e853 3f00 	ldrex	r3, [r3]
 8002250:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002252:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002254:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002258:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	330c      	adds	r3, #12
 8002262:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002266:	647a      	str	r2, [r7, #68]	@ 0x44
 8002268:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800226a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800226c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800226e:	e841 2300 	strex	r3, r2, [r1]
 8002272:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002274:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1e3      	bne.n	8002242 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	3314      	adds	r3, #20
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002284:	e853 3f00 	ldrex	r3, [r3]
 8002288:	623b      	str	r3, [r7, #32]
   return(result);
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	3314      	adds	r3, #20
 800229a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800229e:	633a      	str	r2, [r7, #48]	@ 0x30
 80022a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022a6:	e841 2300 	strex	r3, r2, [r1]
 80022aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80022ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1e3      	bne.n	800227a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	330c      	adds	r3, #12
 80022c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	e853 3f00 	ldrex	r3, [r3]
 80022ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0310 	bic.w	r3, r3, #16
 80022d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	330c      	adds	r3, #12
 80022e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80022e4:	61fa      	str	r2, [r7, #28]
 80022e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e8:	69b9      	ldr	r1, [r7, #24]
 80022ea:	69fa      	ldr	r2, [r7, #28]
 80022ec:	e841 2300 	strex	r3, r2, [r1]
 80022f0:	617b      	str	r3, [r7, #20]
   return(result);
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1e3      	bne.n	80022c0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022fe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002302:	4619      	mov	r1, r3
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f83b 	bl	8002380 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800230a:	e023      	b.n	8002354 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800230c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002314:	2b00      	cmp	r3, #0
 8002316:	d009      	beq.n	800232c <HAL_UART_IRQHandler+0x4f4>
 8002318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800231c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 f93e 	bl	80025a6 <UART_Transmit_IT>
    return;
 800232a:	e014      	b.n	8002356 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800232c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00e      	beq.n	8002356 <HAL_UART_IRQHandler+0x51e>
 8002338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800233c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f97d 	bl	8002644 <UART_EndTransmit_IT>
    return;
 800234a:	e004      	b.n	8002356 <HAL_UART_IRQHandler+0x51e>
    return;
 800234c:	bf00      	nop
 800234e:	e002      	b.n	8002356 <HAL_UART_IRQHandler+0x51e>
      return;
 8002350:	bf00      	nop
 8002352:	e000      	b.n	8002356 <HAL_UART_IRQHandler+0x51e>
      return;
 8002354:	bf00      	nop
  }
}
 8002356:	37e8      	adds	r7, #232	@ 0xe8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr

0800236e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr

08002380 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	460b      	mov	r3, r1
 800238a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	603b      	str	r3, [r7, #0]
 80023a2:	4613      	mov	r3, r2
 80023a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023a6:	e03b      	b.n	8002420 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ae:	d037      	beq.n	8002420 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023b0:	f7fe fa80 	bl	80008b4 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	6a3a      	ldr	r2, [r7, #32]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d302      	bcc.n	80023c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e03a      	b.n	8002440 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d023      	beq.n	8002420 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b80      	cmp	r3, #128	@ 0x80
 80023dc:	d020      	beq.n	8002420 <UART_WaitOnFlagUntilTimeout+0x8a>
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	2b40      	cmp	r3, #64	@ 0x40
 80023e2:	d01d      	beq.n	8002420 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d116      	bne.n	8002420 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f856 	bl	80024ba <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2208      	movs	r2, #8
 8002412:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e00f      	b.n	8002440 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	4013      	ands	r3, r2
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	429a      	cmp	r2, r3
 800242e:	bf0c      	ite	eq
 8002430:	2301      	moveq	r3, #1
 8002432:	2300      	movne	r3, #0
 8002434:	b2db      	uxtb	r3, r3
 8002436:	461a      	mov	r2, r3
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	429a      	cmp	r2, r3
 800243c:	d0b4      	beq.n	80023a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002448:	b480      	push	{r7}
 800244a:	b085      	sub	sp, #20
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	4613      	mov	r3, r2
 8002454:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	68ba      	ldr	r2, [r7, #8]
 800245a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	88fa      	ldrh	r2, [r7, #6]
 8002460:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	88fa      	ldrh	r2, [r7, #6]
 8002466:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2222      	movs	r2, #34	@ 0x22
 8002472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d007      	beq.n	800248e <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800248c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	695a      	ldr	r2, [r3, #20]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f042 0201 	orr.w	r2, r2, #1
 800249c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0220 	orr.w	r2, r2, #32
 80024ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80024ae:	2300      	movs	r3, #0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc80      	pop	{r7}
 80024b8:	4770      	bx	lr

080024ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b095      	sub	sp, #84	@ 0x54
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	330c      	adds	r3, #12
 80024c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024cc:	e853 3f00 	ldrex	r3, [r3]
 80024d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	330c      	adds	r3, #12
 80024e0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024e2:	643a      	str	r2, [r7, #64]	@ 0x40
 80024e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024ea:	e841 2300 	strex	r3, r2, [r1]
 80024ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1e5      	bne.n	80024c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3314      	adds	r3, #20
 80024fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	e853 3f00 	ldrex	r3, [r3]
 8002504:	61fb      	str	r3, [r7, #28]
   return(result);
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	3314      	adds	r3, #20
 8002514:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002516:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002518:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800251a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800251c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800251e:	e841 2300 	strex	r3, r2, [r1]
 8002522:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1e5      	bne.n	80024f6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252e:	2b01      	cmp	r3, #1
 8002530:	d119      	bne.n	8002566 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	e853 3f00 	ldrex	r3, [r3]
 8002540:	60bb      	str	r3, [r7, #8]
   return(result);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f023 0310 	bic.w	r3, r3, #16
 8002548:	647b      	str	r3, [r7, #68]	@ 0x44
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	330c      	adds	r3, #12
 8002550:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002552:	61ba      	str	r2, [r7, #24]
 8002554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002556:	6979      	ldr	r1, [r7, #20]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	e841 2300 	strex	r3, r2, [r1]
 800255e:	613b      	str	r3, [r7, #16]
   return(result);
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1e5      	bne.n	8002532 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002574:	bf00      	nop
 8002576:	3754      	adds	r7, #84	@ 0x54
 8002578:	46bd      	mov	sp, r7
 800257a:	bc80      	pop	{r7}
 800257c:	4770      	bx	lr

0800257e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800258a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fee8 	bl	800236e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b21      	cmp	r3, #33	@ 0x21
 80025b8:	d13e      	bne.n	8002638 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025c2:	d114      	bne.n	80025ee <UART_Transmit_IT+0x48>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d110      	bne.n	80025ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	1c9a      	adds	r2, r3, #2
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	621a      	str	r2, [r3, #32]
 80025ec:	e008      	b.n	8002600 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	1c59      	adds	r1, r3, #1
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	6211      	str	r1, [r2, #32]
 80025f8:	781a      	ldrb	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002604:	b29b      	uxth	r3, r3
 8002606:	3b01      	subs	r3, #1
 8002608:	b29b      	uxth	r3, r3
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4619      	mov	r1, r3
 800260e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10f      	bne.n	8002634 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002622:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	68da      	ldr	r2, [r3, #12]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002632:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68da      	ldr	r2, [r3, #12]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800265a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff fe79 	bl	800235c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b08c      	sub	sp, #48	@ 0x30
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b22      	cmp	r3, #34	@ 0x22
 8002686:	f040 80ae 	bne.w	80027e6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002692:	d117      	bne.n	80026c4 <UART_Receive_IT+0x50>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d113      	bne.n	80026c4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b2:	b29a      	uxth	r2, r3
 80026b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026bc:	1c9a      	adds	r2, r3, #2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	629a      	str	r2, [r3, #40]	@ 0x28
 80026c2:	e026      	b.n	8002712 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026d6:	d007      	beq.n	80026e8 <UART_Receive_IT+0x74>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <UART_Receive_IT+0x82>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d106      	bne.n	80026f6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f2:	701a      	strb	r2, [r3, #0]
 80026f4:	e008      	b.n	8002708 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002702:	b2da      	uxtb	r2, r3
 8002704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002706:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002716:	b29b      	uxth	r3, r3
 8002718:	3b01      	subs	r3, #1
 800271a:	b29b      	uxth	r3, r3
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	4619      	mov	r1, r3
 8002720:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002722:	2b00      	cmp	r3, #0
 8002724:	d15d      	bne.n	80027e2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0220 	bic.w	r2, r2, #32
 8002734:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68da      	ldr	r2, [r3, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002744:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f022 0201 	bic.w	r2, r2, #1
 8002754:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	2b01      	cmp	r3, #1
 800276a:	d135      	bne.n	80027d8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	330c      	adds	r3, #12
 8002778:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	613b      	str	r3, [r7, #16]
   return(result);
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f023 0310 	bic.w	r3, r3, #16
 8002788:	627b      	str	r3, [r7, #36]	@ 0x24
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	330c      	adds	r3, #12
 8002790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002792:	623a      	str	r2, [r7, #32]
 8002794:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002796:	69f9      	ldr	r1, [r7, #28]
 8002798:	6a3a      	ldr	r2, [r7, #32]
 800279a:	e841 2300 	strex	r3, r2, [r1]
 800279e:	61bb      	str	r3, [r7, #24]
   return(result);
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d1e5      	bne.n	8002772 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0310 	and.w	r3, r3, #16
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d10a      	bne.n	80027ca <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027b4:	2300      	movs	r3, #0
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80027ce:	4619      	mov	r1, r3
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fdd5 	bl	8002380 <HAL_UARTEx_RxEventCallback>
 80027d6:	e002      	b.n	80027de <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7fd fe83 	bl	80004e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e002      	b.n	80027e8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80027e2:	2300      	movs	r3, #0
 80027e4:	e000      	b.n	80027e8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
  }
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3730      	adds	r7, #48	@ 0x30
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689a      	ldr	r2, [r3, #8]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	691b      	ldr	r3, [r3, #16]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	4313      	orrs	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800282a:	f023 030c 	bic.w	r3, r3, #12
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	68b9      	ldr	r1, [r7, #8]
 8002834:	430b      	orrs	r3, r1
 8002836:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a2c      	ldr	r2, [pc, #176]	@ (8002904 <UART_SetConfig+0x114>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d103      	bne.n	8002860 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002858:	f7fe ff4e 	bl	80016f8 <HAL_RCC_GetPCLK2Freq>
 800285c:	60f8      	str	r0, [r7, #12]
 800285e:	e002      	b.n	8002866 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002860:	f7fe ff36 	bl	80016d0 <HAL_RCC_GetPCLK1Freq>
 8002864:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	009a      	lsls	r2, r3, #2
 8002870:	441a      	add	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	fbb2 f3f3 	udiv	r3, r2, r3
 800287c:	4a22      	ldr	r2, [pc, #136]	@ (8002908 <UART_SetConfig+0x118>)
 800287e:	fba2 2303 	umull	r2, r3, r2, r3
 8002882:	095b      	lsrs	r3, r3, #5
 8002884:	0119      	lsls	r1, r3, #4
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	009a      	lsls	r2, r3, #2
 8002890:	441a      	add	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	fbb2 f2f3 	udiv	r2, r2, r3
 800289c:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <UART_SetConfig+0x118>)
 800289e:	fba3 0302 	umull	r0, r3, r3, r2
 80028a2:	095b      	lsrs	r3, r3, #5
 80028a4:	2064      	movs	r0, #100	@ 0x64
 80028a6:	fb00 f303 	mul.w	r3, r0, r3
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	3332      	adds	r3, #50	@ 0x32
 80028b0:	4a15      	ldr	r2, [pc, #84]	@ (8002908 <UART_SetConfig+0x118>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028bc:	4419      	add	r1, r3
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	009a      	lsls	r2, r3, #2
 80028c8:	441a      	add	r2, r3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80028d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <UART_SetConfig+0x118>)
 80028d6:	fba3 0302 	umull	r0, r3, r3, r2
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2064      	movs	r0, #100	@ 0x64
 80028de:	fb00 f303 	mul.w	r3, r0, r3
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	3332      	adds	r3, #50	@ 0x32
 80028e8:	4a07      	ldr	r2, [pc, #28]	@ (8002908 <UART_SetConfig+0x118>)
 80028ea:	fba2 2303 	umull	r2, r3, r2, r3
 80028ee:	095b      	lsrs	r3, r3, #5
 80028f0:	f003 020f 	and.w	r2, r3, #15
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	440a      	add	r2, r1
 80028fa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40013800 	.word	0x40013800
 8002908:	51eb851f 	.word	0x51eb851f

0800290c <__NVIC_SetPriority>:
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	6039      	str	r1, [r7, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291c:	2b00      	cmp	r3, #0
 800291e:	db0a      	blt.n	8002936 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	b2da      	uxtb	r2, r3
 8002924:	490c      	ldr	r1, [pc, #48]	@ (8002958 <__NVIC_SetPriority+0x4c>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	0112      	lsls	r2, r2, #4
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	440b      	add	r3, r1
 8002930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002934:	e00a      	b.n	800294c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4908      	ldr	r1, [pc, #32]	@ (800295c <__NVIC_SetPriority+0x50>)
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	3b04      	subs	r3, #4
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	b2d2      	uxtb	r2, r2
 8002948:	440b      	add	r3, r1
 800294a:	761a      	strb	r2, [r3, #24]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100
 800295c:	e000ed00 	.word	0xe000ed00

08002960 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002964:	4b05      	ldr	r3, [pc, #20]	@ (800297c <SysTick_Handler+0x1c>)
 8002966:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002968:	f001 ff26 	bl	80047b8 <xTaskGetSchedulerState>
 800296c:	4603      	mov	r3, r0
 800296e:	2b01      	cmp	r3, #1
 8002970:	d001      	beq.n	8002976 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002972:	f002 fcc9 	bl	8005308 <xPortSysTickHandler>
  }
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	e000e010 	.word	0xe000e010

08002980 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002984:	2100      	movs	r1, #0
 8002986:	f06f 0004 	mvn.w	r0, #4
 800298a:	f7ff ffbf 	bl	800290c <__NVIC_SetPriority>
#endif
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
	...

08002994 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800299a:	f3ef 8305 	mrs	r3, IPSR
 800299e:	603b      	str	r3, [r7, #0]
  return(result);
 80029a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80029a6:	f06f 0305 	mvn.w	r3, #5
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	e00c      	b.n	80029c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029ae:	4b09      	ldr	r3, [pc, #36]	@ (80029d4 <osKernelInitialize+0x40>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d105      	bne.n	80029c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80029b6:	4b07      	ldr	r3, [pc, #28]	@ (80029d4 <osKernelInitialize+0x40>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80029bc:	2300      	movs	r3, #0
 80029be:	607b      	str	r3, [r7, #4]
 80029c0:	e002      	b.n	80029c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
 80029c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80029c8:	687b      	ldr	r3, [r7, #4]
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	20000128 	.word	0x20000128

080029d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029de:	f3ef 8305 	mrs	r3, IPSR
 80029e2:	603b      	str	r3, [r7, #0]
  return(result);
 80029e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80029ea:	f06f 0305 	mvn.w	r3, #5
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	e010      	b.n	8002a14 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80029f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a20 <osKernelStart+0x48>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d109      	bne.n	8002a0e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80029fa:	f7ff ffc1 	bl	8002980 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80029fe:	4b08      	ldr	r3, [pc, #32]	@ (8002a20 <osKernelStart+0x48>)
 8002a00:	2202      	movs	r2, #2
 8002a02:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002a04:	f001 fa78 	bl	8003ef8 <vTaskStartScheduler>
      stat = osOK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	607b      	str	r3, [r7, #4]
 8002a0c:	e002      	b.n	8002a14 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002a14:	687b      	ldr	r3, [r7, #4]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000128 	.word	0x20000128

08002a24 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b08e      	sub	sp, #56	@ 0x38
 8002a28:	af04      	add	r7, sp, #16
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a30:	2300      	movs	r3, #0
 8002a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a34:	f3ef 8305 	mrs	r3, IPSR
 8002a38:	617b      	str	r3, [r7, #20]
  return(result);
 8002a3a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d17e      	bne.n	8002b3e <osThreadNew+0x11a>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d07b      	beq.n	8002b3e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002a4a:	2318      	movs	r3, #24
 8002a4c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295
 8002a56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d045      	beq.n	8002aea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d002      	beq.n	8002a6c <osThreadNew+0x48>
        name = attr->name;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <osThreadNew+0x6e>
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	2b38      	cmp	r3, #56	@ 0x38
 8002a84:	d805      	bhi.n	8002a92 <osThreadNew+0x6e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0301 	and.w	r3, r3, #1
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <osThreadNew+0x72>
        return (NULL);
 8002a92:	2300      	movs	r3, #0
 8002a94:	e054      	b.n	8002b40 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	089b      	lsrs	r3, r3, #2
 8002aa4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00e      	beq.n	8002acc <osThreadNew+0xa8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	2ba7      	cmp	r3, #167	@ 0xa7
 8002ab4:	d90a      	bls.n	8002acc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <osThreadNew+0xa8>
        mem = 1;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	e010      	b.n	8002aee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10c      	bne.n	8002aee <osThreadNew+0xca>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d108      	bne.n	8002aee <osThreadNew+0xca>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d104      	bne.n	8002aee <osThreadNew+0xca>
          mem = 0;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	e001      	b.n	8002aee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d110      	bne.n	8002b16 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002afc:	9202      	str	r2, [sp, #8]
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	6a3a      	ldr	r2, [r7, #32]
 8002b08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f001 f800 	bl	8003b10 <xTaskCreateStatic>
 8002b10:	4603      	mov	r3, r0
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	e013      	b.n	8002b3e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d110      	bne.n	8002b3e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f001 f84e 	bl	8003bd0 <xTaskCreate>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d001      	beq.n	8002b3e <osThreadNew+0x11a>
            hTask = NULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b3e:	693b      	ldr	r3, [r7, #16]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3728      	adds	r7, #40	@ 0x28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b50:	f3ef 8305 	mrs	r3, IPSR
 8002b54:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b56:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <osDelay+0x1c>
    stat = osErrorISR;
 8002b5c:	f06f 0305 	mvn.w	r3, #5
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	e007      	b.n	8002b74 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f001 f98c 	bl	8003e8c <vTaskDelay>
    }
  }

  return (stat);
 8002b74:	68fb      	ldr	r3, [r7, #12]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b08a      	sub	sp, #40	@ 0x28
 8002b82:	af02      	add	r7, sp, #8
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b8e:	f3ef 8305 	mrs	r3, IPSR
 8002b92:	613b      	str	r3, [r7, #16]
  return(result);
 8002b94:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d15f      	bne.n	8002c5a <osMessageQueueNew+0xdc>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d05c      	beq.n	8002c5a <osMessageQueueNew+0xdc>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d059      	beq.n	8002c5a <osMessageQueueNew+0xdc>
    mem = -1;
 8002ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8002baa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d029      	beq.n	8002c06 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d012      	beq.n	8002be0 <osMessageQueueNew+0x62>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	2b4f      	cmp	r3, #79	@ 0x4f
 8002bc0:	d90e      	bls.n	8002be0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00a      	beq.n	8002be0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695a      	ldr	r2, [r3, #20]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d302      	bcc.n	8002be0 <osMessageQueueNew+0x62>
        mem = 1;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61bb      	str	r3, [r7, #24]
 8002bde:	e014      	b.n	8002c0a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d110      	bne.n	8002c0a <osMessageQueueNew+0x8c>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10c      	bne.n	8002c0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d108      	bne.n	8002c0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d104      	bne.n	8002c0a <osMessageQueueNew+0x8c>
          mem = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	61bb      	str	r3, [r7, #24]
 8002c04:	e001      	b.n	8002c0a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d10b      	bne.n	8002c28 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691a      	ldr	r2, [r3, #16]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2100      	movs	r1, #0
 8002c1a:	9100      	str	r1, [sp, #0]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fa2a 	bl	8003078 <xQueueGenericCreateStatic>
 8002c24:	61f8      	str	r0, [r7, #28]
 8002c26:	e008      	b.n	8002c3a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8002c2e:	2200      	movs	r2, #0
 8002c30:	68b9      	ldr	r1, [r7, #8]
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fa9d 	bl	8003172 <xQueueGenericCreate>
 8002c38:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00c      	beq.n	8002c5a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <osMessageQueueNew+0xd0>
        name = attr->name;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	e001      	b.n	8002c52 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8002c52:	6979      	ldr	r1, [r7, #20]
 8002c54:	69f8      	ldr	r0, [r7, #28]
 8002c56:	f000 feff 	bl	8003a58 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002c5a:	69fb      	ldr	r3, [r7, #28]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c7c:	f3ef 8305 	mrs	r3, IPSR
 8002c80:	617b      	str	r3, [r7, #20]
  return(result);
 8002c82:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d028      	beq.n	8002cda <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d005      	beq.n	8002c9a <osMessageQueuePut+0x36>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <osMessageQueuePut+0x36>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8002c9a:	f06f 0303 	mvn.w	r3, #3
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	e038      	b.n	8002d14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8002ca6:	f107 0210 	add.w	r2, r7, #16
 8002caa:	2300      	movs	r3, #0
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	69b8      	ldr	r0, [r7, #24]
 8002cb0:	f000 fbc0 	bl	8003434 <xQueueGenericSendFromISR>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d003      	beq.n	8002cc2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8002cba:	f06f 0302 	mvn.w	r3, #2
 8002cbe:	61fb      	str	r3, [r7, #28]
 8002cc0:	e028      	b.n	8002d14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d025      	beq.n	8002d14 <osMessageQueuePut+0xb0>
 8002cc8:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <osMessageQueuePut+0xbc>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
 8002cd8:	e01c      	b.n	8002d14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d002      	beq.n	8002ce6 <osMessageQueuePut+0x82>
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d103      	bne.n	8002cee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8002ce6:	f06f 0303 	mvn.w	r3, #3
 8002cea:	61fb      	str	r3, [r7, #28]
 8002cec:	e012      	b.n	8002d14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002cee:	2300      	movs	r3, #0
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	69b8      	ldr	r0, [r7, #24]
 8002cf6:	f000 fa9b 	bl	8003230 <xQueueGenericSend>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d009      	beq.n	8002d14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8002d06:	f06f 0301 	mvn.w	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	e002      	b.n	8002d14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8002d0e:	f06f 0302 	mvn.w	r3, #2
 8002d12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002d14:	69fb      	ldr	r3, [r7, #28]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3720      	adds	r7, #32
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	e000ed04 	.word	0xe000ed04

08002d24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b088      	sub	sp, #32
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	60f8      	str	r0, [r7, #12]
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d3a:	f3ef 8305 	mrs	r3, IPSR
 8002d3e:	617b      	str	r3, [r7, #20]
  return(result);
 8002d40:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d028      	beq.n	8002d98 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <osMessageQueueGet+0x34>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <osMessageQueueGet+0x34>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d003      	beq.n	8002d60 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8002d58:	f06f 0303 	mvn.w	r3, #3
 8002d5c:	61fb      	str	r3, [r7, #28]
 8002d5e:	e037      	b.n	8002dd0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8002d64:	f107 0310 	add.w	r3, r7, #16
 8002d68:	461a      	mov	r2, r3
 8002d6a:	68b9      	ldr	r1, [r7, #8]
 8002d6c:	69b8      	ldr	r0, [r7, #24]
 8002d6e:	f000 fce1 	bl	8003734 <xQueueReceiveFromISR>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d003      	beq.n	8002d80 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8002d78:	f06f 0302 	mvn.w	r3, #2
 8002d7c:	61fb      	str	r3, [r7, #28]
 8002d7e:	e027      	b.n	8002dd0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d024      	beq.n	8002dd0 <osMessageQueueGet+0xac>
 8002d86:	4b15      	ldr	r3, [pc, #84]	@ (8002ddc <osMessageQueueGet+0xb8>)
 8002d88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	f3bf 8f4f 	dsb	sy
 8002d92:	f3bf 8f6f 	isb	sy
 8002d96:	e01b      	b.n	8002dd0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <osMessageQueueGet+0x80>
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d103      	bne.n	8002dac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8002da4:	f06f 0303 	mvn.w	r3, #3
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	e011      	b.n	8002dd0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	69b8      	ldr	r0, [r7, #24]
 8002db2:	f000 fbdd 	bl	8003570 <xQueueReceive>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d009      	beq.n	8002dd0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8002dc2:	f06f 0301 	mvn.w	r3, #1
 8002dc6:	61fb      	str	r3, [r7, #28]
 8002dc8:	e002      	b.n	8002dd0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8002dca:	f06f 0302 	mvn.w	r3, #2
 8002dce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8002dd0:	69fb      	ldr	r3, [r7, #28]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3720      	adds	r7, #32
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	e000ed04 	.word	0xe000ed04

08002de0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	4a06      	ldr	r2, [pc, #24]	@ (8002e08 <vApplicationGetIdleTaskMemory+0x28>)
 8002df0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	4a05      	ldr	r2, [pc, #20]	@ (8002e0c <vApplicationGetIdleTaskMemory+0x2c>)
 8002df6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	601a      	str	r2, [r3, #0]
}
 8002dfe:	bf00      	nop
 8002e00:	3714      	adds	r7, #20
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bc80      	pop	{r7}
 8002e06:	4770      	bx	lr
 8002e08:	2000012c 	.word	0x2000012c
 8002e0c:	200001d4 	.word	0x200001d4

08002e10 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4a07      	ldr	r2, [pc, #28]	@ (8002e3c <vApplicationGetTimerTaskMemory+0x2c>)
 8002e20:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4a06      	ldr	r2, [pc, #24]	@ (8002e40 <vApplicationGetTimerTaskMemory+0x30>)
 8002e26:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002e2e:	601a      	str	r2, [r3, #0]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	200003d4 	.word	0x200003d4
 8002e40:	2000047c 	.word	0x2000047c

08002e44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f103 0208 	add.w	r2, r3, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f103 0208 	add.w	r2, r3, #8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f103 0208 	add.w	r2, r3, #8
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	b085      	sub	sp, #20
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
 8002ea2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef6:	d103      	bne.n	8002f00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	e00c      	b.n	8002f1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3308      	adds	r3, #8
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	e002      	b.n	8002f0e <vListInsert+0x2e>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d2f6      	bcs.n	8002f08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	601a      	str	r2, [r3, #0]
}
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bc80      	pop	{r7}
 8002f4e:	4770      	bx	lr

08002f50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	6892      	ldr	r2, [r2, #8]
 8002f66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6852      	ldr	r2, [r2, #4]
 8002f70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d103      	bne.n	8002f84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1e5a      	subs	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
	...

08002fa4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	e7fd      	b.n	8002fcc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002fd0:	f002 f91c 	bl	800520c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fdc:	68f9      	ldr	r1, [r7, #12]
 8002fde:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002fe0:	fb01 f303 	mul.w	r3, r1, r3
 8002fe4:	441a      	add	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003000:	3b01      	subs	r3, #1
 8003002:	68f9      	ldr	r1, [r7, #12]
 8003004:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003006:	fb01 f303 	mul.w	r3, r1, r3
 800300a:	441a      	add	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	22ff      	movs	r2, #255	@ 0xff
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	22ff      	movs	r2, #255	@ 0xff
 800301c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d114      	bne.n	8003050 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01a      	beq.n	8003064 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	3310      	adds	r3, #16
 8003032:	4618      	mov	r0, r3
 8003034:	f001 f9fa 	bl	800442c <xTaskRemoveFromEventList>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d012      	beq.n	8003064 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800303e:	4b0d      	ldr	r3, [pc, #52]	@ (8003074 <xQueueGenericReset+0xd0>)
 8003040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003044:	601a      	str	r2, [r3, #0]
 8003046:	f3bf 8f4f 	dsb	sy
 800304a:	f3bf 8f6f 	isb	sy
 800304e:	e009      	b.n	8003064 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3310      	adds	r3, #16
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff fef5 	bl	8002e44 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	3324      	adds	r3, #36	@ 0x24
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff fef0 	bl	8002e44 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003064:	f002 f902 	bl	800526c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003068:	2301      	movs	r3, #1
}
 800306a:	4618      	mov	r0, r3
 800306c:	3710      	adds	r7, #16
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	e000ed04 	.word	0xe000ed04

08003078 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08e      	sub	sp, #56	@ 0x38
 800307c:	af02      	add	r7, sp, #8
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d10b      	bne.n	80030a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800308c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003090:	f383 8811 	msr	BASEPRI, r3
 8003094:	f3bf 8f6f 	isb	sy
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800309e:	bf00      	nop
 80030a0:	bf00      	nop
 80030a2:	e7fd      	b.n	80030a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10b      	bne.n	80030c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80030aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ae:	f383 8811 	msr	BASEPRI, r3
 80030b2:	f3bf 8f6f 	isb	sy
 80030b6:	f3bf 8f4f 	dsb	sy
 80030ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030bc:	bf00      	nop
 80030be:	bf00      	nop
 80030c0:	e7fd      	b.n	80030be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <xQueueGenericCreateStatic+0x56>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <xQueueGenericCreateStatic+0x5a>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <xQueueGenericCreateStatic+0x5c>
 80030d2:	2300      	movs	r3, #0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d10b      	bne.n	80030f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80030d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030dc:	f383 8811 	msr	BASEPRI, r3
 80030e0:	f3bf 8f6f 	isb	sy
 80030e4:	f3bf 8f4f 	dsb	sy
 80030e8:	623b      	str	r3, [r7, #32]
}
 80030ea:	bf00      	nop
 80030ec:	bf00      	nop
 80030ee:	e7fd      	b.n	80030ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d102      	bne.n	80030fc <xQueueGenericCreateStatic+0x84>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d101      	bne.n	8003100 <xQueueGenericCreateStatic+0x88>
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <xQueueGenericCreateStatic+0x8a>
 8003100:	2300      	movs	r3, #0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10b      	bne.n	800311e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	61fb      	str	r3, [r7, #28]
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	e7fd      	b.n	800311a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800311e:	2350      	movs	r3, #80	@ 0x50
 8003120:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b50      	cmp	r3, #80	@ 0x50
 8003126:	d00b      	beq.n	8003140 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	61bb      	str	r3, [r7, #24]
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	e7fd      	b.n	800313c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003140:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00d      	beq.n	8003168 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800314c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003154:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800315a:	9300      	str	r3, [sp, #0]
 800315c:	4613      	mov	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f840 	bl	80031e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800316a:	4618      	mov	r0, r3
 800316c:	3730      	adds	r7, #48	@ 0x30
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003172:	b580      	push	{r7, lr}
 8003174:	b08a      	sub	sp, #40	@ 0x28
 8003176:	af02      	add	r7, sp, #8
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	4613      	mov	r3, r2
 800317e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <xQueueGenericCreate+0x2c>
	__asm volatile
 8003186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800318a:	f383 8811 	msr	BASEPRI, r3
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f3bf 8f4f 	dsb	sy
 8003196:	613b      	str	r3, [r7, #16]
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	e7fd      	b.n	800319a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	3350      	adds	r3, #80	@ 0x50
 80031ac:	4618      	mov	r0, r3
 80031ae:	f002 f92f 	bl	8005410 <pvPortMalloc>
 80031b2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80031b4:	69bb      	ldr	r3, [r7, #24]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d011      	beq.n	80031de <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	3350      	adds	r3, #80	@ 0x50
 80031c2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80031cc:	79fa      	ldrb	r2, [r7, #7]
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	4613      	mov	r3, r2
 80031d4:	697a      	ldr	r2, [r7, #20]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f805 	bl	80031e8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80031de:	69bb      	ldr	r3, [r7, #24]
	}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3720      	adds	r7, #32
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d103      	bne.n	8003204 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	601a      	str	r2, [r3, #0]
 8003202:	e002      	b.n	800320a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	68ba      	ldr	r2, [r7, #8]
 8003214:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003216:	2101      	movs	r1, #1
 8003218:	69b8      	ldr	r0, [r7, #24]
 800321a:	f7ff fec3 	bl	8002fa4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08e      	sub	sp, #56	@ 0x38
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800323e:	2300      	movs	r3, #0
 8003240:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10b      	bne.n	8003264 <xQueueGenericSend+0x34>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800325e:	bf00      	nop
 8003260:	bf00      	nop
 8003262:	e7fd      	b.n	8003260 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d103      	bne.n	8003272 <xQueueGenericSend+0x42>
 800326a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <xQueueGenericSend+0x46>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <xQueueGenericSend+0x48>
 8003276:	2300      	movs	r3, #0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <xQueueGenericSend+0x64>
	__asm volatile
 800327c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003280:	f383 8811 	msr	BASEPRI, r3
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800328e:	bf00      	nop
 8003290:	bf00      	nop
 8003292:	e7fd      	b.n	8003290 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d103      	bne.n	80032a2 <xQueueGenericSend+0x72>
 800329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <xQueueGenericSend+0x76>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e000      	b.n	80032a8 <xQueueGenericSend+0x78>
 80032a6:	2300      	movs	r3, #0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d10b      	bne.n	80032c4 <xQueueGenericSend+0x94>
	__asm volatile
 80032ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b0:	f383 8811 	msr	BASEPRI, r3
 80032b4:	f3bf 8f6f 	isb	sy
 80032b8:	f3bf 8f4f 	dsb	sy
 80032bc:	623b      	str	r3, [r7, #32]
}
 80032be:	bf00      	nop
 80032c0:	bf00      	nop
 80032c2:	e7fd      	b.n	80032c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032c4:	f001 fa78 	bl	80047b8 <xTaskGetSchedulerState>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d102      	bne.n	80032d4 <xQueueGenericSend+0xa4>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d101      	bne.n	80032d8 <xQueueGenericSend+0xa8>
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <xQueueGenericSend+0xaa>
 80032d8:	2300      	movs	r3, #0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10b      	bne.n	80032f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80032de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	61fb      	str	r3, [r7, #28]
}
 80032f0:	bf00      	nop
 80032f2:	bf00      	nop
 80032f4:	e7fd      	b.n	80032f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032f6:	f001 ff89 	bl	800520c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <xQueueGenericSend+0xdc>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d129      	bne.n	8003360 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	68b9      	ldr	r1, [r7, #8]
 8003310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003312:	f000 fa91 	bl	8003838 <prvCopyDataToQueue>
 8003316:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	2b00      	cmp	r3, #0
 800331e:	d010      	beq.n	8003342 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003322:	3324      	adds	r3, #36	@ 0x24
 8003324:	4618      	mov	r0, r3
 8003326:	f001 f881 	bl	800442c <xTaskRemoveFromEventList>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d013      	beq.n	8003358 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003330:	4b3f      	ldr	r3, [pc, #252]	@ (8003430 <xQueueGenericSend+0x200>)
 8003332:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	e00a      	b.n	8003358 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003348:	4b39      	ldr	r3, [pc, #228]	@ (8003430 <xQueueGenericSend+0x200>)
 800334a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	f3bf 8f4f 	dsb	sy
 8003354:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003358:	f001 ff88 	bl	800526c <vPortExitCritical>
				return pdPASS;
 800335c:	2301      	movs	r3, #1
 800335e:	e063      	b.n	8003428 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d103      	bne.n	800336e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003366:	f001 ff81 	bl	800526c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800336a:	2300      	movs	r3, #0
 800336c:	e05c      	b.n	8003428 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800336e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003370:	2b00      	cmp	r3, #0
 8003372:	d106      	bne.n	8003382 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003374:	f107 0314 	add.w	r3, r7, #20
 8003378:	4618      	mov	r0, r3
 800337a:	f001 f8bb 	bl	80044f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800337e:	2301      	movs	r3, #1
 8003380:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003382:	f001 ff73 	bl	800526c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003386:	f000 fe27 	bl	8003fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800338a:	f001 ff3f 	bl	800520c <vPortEnterCritical>
 800338e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003390:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003394:	b25b      	sxtb	r3, r3
 8003396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800339a:	d103      	bne.n	80033a4 <xQueueGenericSend+0x174>
 800339c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033aa:	b25b      	sxtb	r3, r3
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d103      	bne.n	80033ba <xQueueGenericSend+0x18a>
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033ba:	f001 ff57 	bl	800526c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033be:	1d3a      	adds	r2, r7, #4
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f001 f8aa 	bl	8004520 <xTaskCheckForTimeOut>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d124      	bne.n	800341c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80033d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033d4:	f000 fb28 	bl	8003a28 <prvIsQueueFull>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d018      	beq.n	8003410 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80033de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e0:	3310      	adds	r3, #16
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	4611      	mov	r1, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f000 ffce 	bl	8004388 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80033ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80033ee:	f000 fab3 	bl	8003958 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80033f2:	f000 fdff 	bl	8003ff4 <xTaskResumeAll>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f47f af7c 	bne.w	80032f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80033fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003430 <xQueueGenericSend+0x200>)
 8003400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f3bf 8f4f 	dsb	sy
 800340a:	f3bf 8f6f 	isb	sy
 800340e:	e772      	b.n	80032f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003412:	f000 faa1 	bl	8003958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003416:	f000 fded 	bl	8003ff4 <xTaskResumeAll>
 800341a:	e76c      	b.n	80032f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800341c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800341e:	f000 fa9b 	bl	8003958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003422:	f000 fde7 	bl	8003ff4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003426:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003428:	4618      	mov	r0, r3
 800342a:	3738      	adds	r7, #56	@ 0x38
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}
 8003430:	e000ed04 	.word	0xe000ed04

08003434 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b090      	sub	sp, #64	@ 0x40
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10b      	bne.n	8003464 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800344c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003450:	f383 8811 	msr	BASEPRI, r3
 8003454:	f3bf 8f6f 	isb	sy
 8003458:	f3bf 8f4f 	dsb	sy
 800345c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800345e:	bf00      	nop
 8003460:	bf00      	nop
 8003462:	e7fd      	b.n	8003460 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d103      	bne.n	8003472 <xQueueGenericSendFromISR+0x3e>
 800346a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <xQueueGenericSendFromISR+0x42>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <xQueueGenericSendFromISR+0x44>
 8003476:	2300      	movs	r3, #0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10b      	bne.n	8003494 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800347c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003480:	f383 8811 	msr	BASEPRI, r3
 8003484:	f3bf 8f6f 	isb	sy
 8003488:	f3bf 8f4f 	dsb	sy
 800348c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800348e:	bf00      	nop
 8003490:	bf00      	nop
 8003492:	e7fd      	b.n	8003490 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b02      	cmp	r3, #2
 8003498:	d103      	bne.n	80034a2 <xQueueGenericSendFromISR+0x6e>
 800349a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <xQueueGenericSendFromISR+0x72>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <xQueueGenericSendFromISR+0x74>
 80034a6:	2300      	movs	r3, #0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10b      	bne.n	80034c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	623b      	str	r3, [r7, #32]
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034c4:	f001 ff64 	bl	8005390 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80034c8:	f3ef 8211 	mrs	r2, BASEPRI
 80034cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034d0:	f383 8811 	msr	BASEPRI, r3
 80034d4:	f3bf 8f6f 	isb	sy
 80034d8:	f3bf 8f4f 	dsb	sy
 80034dc:	61fa      	str	r2, [r7, #28]
 80034de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80034e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80034e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d302      	bcc.n	80034f6 <xQueueGenericSendFromISR+0xc2>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d12f      	bne.n	8003556 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80034f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003504:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003506:	683a      	ldr	r2, [r7, #0]
 8003508:	68b9      	ldr	r1, [r7, #8]
 800350a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800350c:	f000 f994 	bl	8003838 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003510:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d112      	bne.n	8003540 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800351a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	2b00      	cmp	r3, #0
 8003520:	d016      	beq.n	8003550 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003524:	3324      	adds	r3, #36	@ 0x24
 8003526:	4618      	mov	r0, r3
 8003528:	f000 ff80 	bl	800442c <xTaskRemoveFromEventList>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00e      	beq.n	8003550 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00b      	beq.n	8003550 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e007      	b.n	8003550 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003540:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003544:	3301      	adds	r3, #1
 8003546:	b2db      	uxtb	r3, r3
 8003548:	b25a      	sxtb	r2, r3
 800354a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800354c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003550:	2301      	movs	r3, #1
 8003552:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003554:	e001      	b.n	800355a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003556:	2300      	movs	r3, #0
 8003558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800355a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800355c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003564:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003568:	4618      	mov	r0, r3
 800356a:	3740      	adds	r7, #64	@ 0x40
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08c      	sub	sp, #48	@ 0x30
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800357c:	2300      	movs	r3, #0
 800357e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10b      	bne.n	80035a2 <xQueueReceive+0x32>
	__asm volatile
 800358a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	623b      	str	r3, [r7, #32]
}
 800359c:	bf00      	nop
 800359e:	bf00      	nop
 80035a0:	e7fd      	b.n	800359e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d103      	bne.n	80035b0 <xQueueReceive+0x40>
 80035a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <xQueueReceive+0x44>
 80035b0:	2301      	movs	r3, #1
 80035b2:	e000      	b.n	80035b6 <xQueueReceive+0x46>
 80035b4:	2300      	movs	r3, #0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10b      	bne.n	80035d2 <xQueueReceive+0x62>
	__asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	61fb      	str	r3, [r7, #28]
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	e7fd      	b.n	80035ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80035d2:	f001 f8f1 	bl	80047b8 <xTaskGetSchedulerState>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d102      	bne.n	80035e2 <xQueueReceive+0x72>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <xQueueReceive+0x76>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <xQueueReceive+0x78>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <xQueueReceive+0x94>
	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	61bb      	str	r3, [r7, #24]
}
 80035fe:	bf00      	nop
 8003600:	bf00      	nop
 8003602:	e7fd      	b.n	8003600 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003604:	f001 fe02 	bl	800520c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800360c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800360e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003610:	2b00      	cmp	r3, #0
 8003612:	d01f      	beq.n	8003654 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003618:	f000 f978 	bl	800390c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800361e:	1e5a      	subs	r2, r3, #1
 8003620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003622:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00f      	beq.n	800364c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800362c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800362e:	3310      	adds	r3, #16
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fefb 	bl	800442c <xTaskRemoveFromEventList>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800363c:	4b3c      	ldr	r3, [pc, #240]	@ (8003730 <xQueueReceive+0x1c0>)
 800363e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800364c:	f001 fe0e 	bl	800526c <vPortExitCritical>
				return pdPASS;
 8003650:	2301      	movs	r3, #1
 8003652:	e069      	b.n	8003728 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d103      	bne.n	8003662 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800365a:	f001 fe07 	bl	800526c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800365e:	2300      	movs	r3, #0
 8003660:	e062      	b.n	8003728 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d106      	bne.n	8003676 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003668:	f107 0310 	add.w	r3, r7, #16
 800366c:	4618      	mov	r0, r3
 800366e:	f000 ff41 	bl	80044f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003672:	2301      	movs	r3, #1
 8003674:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003676:	f001 fdf9 	bl	800526c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800367a:	f000 fcad 	bl	8003fd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800367e:	f001 fdc5 	bl	800520c <vPortEnterCritical>
 8003682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003684:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003688:	b25b      	sxtb	r3, r3
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d103      	bne.n	8003698 <xQueueReceive+0x128>
 8003690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800369a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800369e:	b25b      	sxtb	r3, r3
 80036a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a4:	d103      	bne.n	80036ae <xQueueReceive+0x13e>
 80036a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036ae:	f001 fddd 	bl	800526c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036b2:	1d3a      	adds	r2, r7, #4
 80036b4:	f107 0310 	add.w	r3, r7, #16
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 ff30 	bl	8004520 <xTaskCheckForTimeOut>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d123      	bne.n	800370e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036c8:	f000 f998 	bl	80039fc <prvIsQueueEmpty>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d017      	beq.n	8003702 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80036d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d4:	3324      	adds	r3, #36	@ 0x24
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fe54 	bl	8004388 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80036e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80036e2:	f000 f939 	bl	8003958 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80036e6:	f000 fc85 	bl	8003ff4 <xTaskResumeAll>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d189      	bne.n	8003604 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80036f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003730 <xQueueReceive+0x1c0>)
 80036f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	f3bf 8f4f 	dsb	sy
 80036fc:	f3bf 8f6f 	isb	sy
 8003700:	e780      	b.n	8003604 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003704:	f000 f928 	bl	8003958 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003708:	f000 fc74 	bl	8003ff4 <xTaskResumeAll>
 800370c:	e77a      	b.n	8003604 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800370e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003710:	f000 f922 	bl	8003958 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003714:	f000 fc6e 	bl	8003ff4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800371a:	f000 f96f 	bl	80039fc <prvIsQueueEmpty>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	f43f af6f 	beq.w	8003604 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003726:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003728:	4618      	mov	r0, r3
 800372a:	3730      	adds	r7, #48	@ 0x30
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	e000ed04 	.word	0xe000ed04

08003734 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08e      	sub	sp, #56	@ 0x38
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800374a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	623b      	str	r3, [r7, #32]
}
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	e7fd      	b.n	800375e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d103      	bne.n	8003770 <xQueueReceiveFromISR+0x3c>
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <xQueueReceiveFromISR+0x40>
 8003770:	2301      	movs	r3, #1
 8003772:	e000      	b.n	8003776 <xQueueReceiveFromISR+0x42>
 8003774:	2300      	movs	r3, #0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10b      	bne.n	8003792 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800377a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	61fb      	str	r3, [r7, #28]
}
 800378c:	bf00      	nop
 800378e:	bf00      	nop
 8003790:	e7fd      	b.n	800378e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003792:	f001 fdfd 	bl	8005390 <vPortValidateInterruptPriority>
	__asm volatile
 8003796:	f3ef 8211 	mrs	r2, BASEPRI
 800379a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	61ba      	str	r2, [r7, #24]
 80037ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80037ae:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d02f      	beq.n	800381e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80037be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037c8:	68b9      	ldr	r1, [r7, #8]
 80037ca:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037cc:	f000 f89e 	bl	800390c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037d2:	1e5a      	subs	r2, r3, #1
 80037d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80037d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d112      	bne.n	8003808 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d016      	beq.n	8003818 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ec:	3310      	adds	r3, #16
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fe1c 	bl	800442c <xTaskRemoveFromEventList>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00e      	beq.n	8003818 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e007      	b.n	8003818 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800380c:	3301      	adds	r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	b25a      	sxtb	r2, r3
 8003812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003814:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8003818:	2301      	movs	r3, #1
 800381a:	637b      	str	r3, [r7, #52]	@ 0x34
 800381c:	e001      	b.n	8003822 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800381e:	2300      	movs	r3, #0
 8003820:	637b      	str	r3, [r7, #52]	@ 0x34
 8003822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003824:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f383 8811 	msr	BASEPRI, r3
}
 800382c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800382e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003830:	4618      	mov	r0, r3
 8003832:	3738      	adds	r7, #56	@ 0x38
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800384c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d14d      	bne.n	80038fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	4618      	mov	r0, r3
 8003864:	f000 ffc6 	bl	80047f4 <xTaskPriorityDisinherit>
 8003868:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	e043      	b.n	80038fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d119      	bne.n	80038ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6858      	ldr	r0, [r3, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003880:	461a      	mov	r2, r3
 8003882:	68b9      	ldr	r1, [r7, #8]
 8003884:	f002 f834 	bl	80058f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	685a      	ldr	r2, [r3, #4]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003890:	441a      	add	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d32b      	bcc.n	80038fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	e026      	b.n	80038fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68d8      	ldr	r0, [r3, #12]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b4:	461a      	mov	r2, r3
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	f002 f81a 	bl	80058f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c4:	425b      	negs	r3, r3
 80038c6:	441a      	add	r2, r3
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68da      	ldr	r2, [r3, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d207      	bcs.n	80038e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	689a      	ldr	r2, [r3, #8]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	425b      	negs	r3, r3
 80038e2:	441a      	add	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d105      	bne.n	80038fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003902:	697b      	ldr	r3, [r7, #20]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d018      	beq.n	8003950 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68da      	ldr	r2, [r3, #12]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003926:	441a      	add	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68da      	ldr	r2, [r3, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	429a      	cmp	r2, r3
 8003936:	d303      	bcc.n	8003940 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	68d9      	ldr	r1, [r3, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	461a      	mov	r2, r3
 800394a:	6838      	ldr	r0, [r7, #0]
 800394c:	f001 ffd0 	bl	80058f0 <memcpy>
	}
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003960:	f001 fc54 	bl	800520c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800396a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800396c:	e011      	b.n	8003992 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003972:	2b00      	cmp	r3, #0
 8003974:	d012      	beq.n	800399c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3324      	adds	r3, #36	@ 0x24
 800397a:	4618      	mov	r0, r3
 800397c:	f000 fd56 	bl	800442c <xTaskRemoveFromEventList>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003986:	f000 fe2f 	bl	80045e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
 800398c:	3b01      	subs	r3, #1
 800398e:	b2db      	uxtb	r3, r3
 8003990:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003996:	2b00      	cmp	r3, #0
 8003998:	dce9      	bgt.n	800396e <prvUnlockQueue+0x16>
 800399a:	e000      	b.n	800399e <prvUnlockQueue+0x46>
					break;
 800399c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	22ff      	movs	r2, #255	@ 0xff
 80039a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80039a6:	f001 fc61 	bl	800526c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80039aa:	f001 fc2f 	bl	800520c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80039b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039b6:	e011      	b.n	80039dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d012      	beq.n	80039e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3310      	adds	r3, #16
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fd31 	bl	800442c <xTaskRemoveFromEventList>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80039d0:	f000 fe0a 	bl	80045e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80039d4:	7bbb      	ldrb	r3, [r7, #14]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80039dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	dce9      	bgt.n	80039b8 <prvUnlockQueue+0x60>
 80039e4:	e000      	b.n	80039e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80039e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	22ff      	movs	r2, #255	@ 0xff
 80039ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80039f0:	f001 fc3c 	bl	800526c <vPortExitCritical>
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a04:	f001 fc02 	bl	800520c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003a10:	2301      	movs	r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	e001      	b.n	8003a1a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a1a:	f001 fc27 	bl	800526c <vPortExitCritical>

	return xReturn;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003a30:	f001 fbec 	bl	800520c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d102      	bne.n	8003a46 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003a40:	2301      	movs	r3, #1
 8003a42:	60fb      	str	r3, [r7, #12]
 8003a44:	e001      	b.n	8003a4a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003a46:	2300      	movs	r3, #0
 8003a48:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003a4a:	f001 fc0f 	bl	800526c <vPortExitCritical>

	return xReturn;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	e014      	b.n	8003a92 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003a68:	4a0e      	ldr	r2, [pc, #56]	@ (8003aa4 <vQueueAddToRegistry+0x4c>)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10b      	bne.n	8003a8c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003a74:	490b      	ldr	r1, [pc, #44]	@ (8003aa4 <vQueueAddToRegistry+0x4c>)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003a7e:	4a09      	ldr	r2, [pc, #36]	@ (8003aa4 <vQueueAddToRegistry+0x4c>)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003a8a:	e006      	b.n	8003a9a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2b07      	cmp	r3, #7
 8003a96:	d9e7      	bls.n	8003a68 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3714      	adds	r7, #20
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr
 8003aa4:	2000087c 	.word	0x2000087c

08003aa8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003ab8:	f001 fba8 	bl	800520c <vPortEnterCritical>
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ac2:	b25b      	sxtb	r3, r3
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d103      	bne.n	8003ad2 <vQueueWaitForMessageRestricted+0x2a>
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2200      	movs	r2, #0
 8003ace:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ad8:	b25b      	sxtb	r3, r3
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d103      	bne.n	8003ae8 <vQueueWaitForMessageRestricted+0x40>
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ae8:	f001 fbc0 	bl	800526c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d106      	bne.n	8003b02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	3324      	adds	r3, #36	@ 0x24
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	68b9      	ldr	r1, [r7, #8]
 8003afc:	4618      	mov	r0, r3
 8003afe:	f000 fc69 	bl	80043d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003b02:	6978      	ldr	r0, [r7, #20]
 8003b04:	f7ff ff28 	bl	8003958 <prvUnlockQueue>
	}
 8003b08:	bf00      	nop
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08e      	sub	sp, #56	@ 0x38
 8003b14:	af04      	add	r7, sp, #16
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <xTaskCreateStatic+0x2c>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	623b      	str	r3, [r7, #32]
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <xTaskCreateStatic+0x4a>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	61fb      	str	r3, [r7, #28]
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	e7fd      	b.n	8003b56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b5a:	23a8      	movs	r3, #168	@ 0xa8
 8003b5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2ba8      	cmp	r3, #168	@ 0xa8
 8003b62:	d00b      	beq.n	8003b7c <xTaskCreateStatic+0x6c>
	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	61bb      	str	r3, [r7, #24]
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003b7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d01e      	beq.n	8003bc2 <xTaskCreateStatic+0xb2>
 8003b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01b      	beq.n	8003bc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003b92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b96:	2202      	movs	r2, #2
 8003b98:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	9303      	str	r3, [sp, #12]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	9302      	str	r3, [sp, #8]
 8003ba4:	f107 0314 	add.w	r3, r7, #20
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 f851 	bl	8003c5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003bbc:	f000 f8f6 	bl	8003dac <prvAddNewTaskToReadyList>
 8003bc0:	e001      	b.n	8003bc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bc6:	697b      	ldr	r3, [r7, #20]
	}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3728      	adds	r7, #40	@ 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	@ 0x30
 8003bd4:	af04      	add	r7, sp, #16
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003be0:	88fb      	ldrh	r3, [r7, #6]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f001 fc13 	bl	8005410 <pvPortMalloc>
 8003bea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00e      	beq.n	8003c10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003bf2:	20a8      	movs	r0, #168	@ 0xa8
 8003bf4:	f001 fc0c 	bl	8005410 <pvPortMalloc>
 8003bf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d003      	beq.n	8003c08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	631a      	str	r2, [r3, #48]	@ 0x30
 8003c06:	e005      	b.n	8003c14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c08:	6978      	ldr	r0, [r7, #20]
 8003c0a:	f001 fccf 	bl	80055ac <vPortFree>
 8003c0e:	e001      	b.n	8003c14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d017      	beq.n	8003c4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c22:	88fa      	ldrh	r2, [r7, #6]
 8003c24:	2300      	movs	r3, #0
 8003c26:	9303      	str	r3, [sp, #12]
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	9302      	str	r3, [sp, #8]
 8003c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2e:	9301      	str	r3, [sp, #4]
 8003c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68b9      	ldr	r1, [r7, #8]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 f80f 	bl	8003c5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c3e:	69f8      	ldr	r0, [r7, #28]
 8003c40:	f000 f8b4 	bl	8003dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c44:	2301      	movs	r3, #1
 8003c46:	61bb      	str	r3, [r7, #24]
 8003c48:	e002      	b.n	8003c50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c50:	69bb      	ldr	r3, [r7, #24]
	}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
 8003c68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	461a      	mov	r2, r3
 8003c74:	21a5      	movs	r1, #165	@ 0xa5
 8003c76:	f001 fdb7 	bl	80057e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003c84:	3b01      	subs	r3, #1
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f023 0307 	bic.w	r3, r3, #7
 8003c92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00b      	beq.n	8003cb6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	617b      	str	r3, [r7, #20]
}
 8003cb0:	bf00      	nop
 8003cb2:	bf00      	nop
 8003cb4:	e7fd      	b.n	8003cb2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01f      	beq.n	8003cfc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	e012      	b.n	8003ce8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	7819      	ldrb	r1, [r3, #0]
 8003cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	4413      	add	r3, r2
 8003cd0:	3334      	adds	r3, #52	@ 0x34
 8003cd2:	460a      	mov	r2, r1
 8003cd4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003cd6:	68ba      	ldr	r2, [r7, #8]
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	4413      	add	r3, r2
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d006      	beq.n	8003cf0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	2b0f      	cmp	r3, #15
 8003cec:	d9e9      	bls.n	8003cc2 <prvInitialiseNewTask+0x66>
 8003cee:	e000      	b.n	8003cf2 <prvInitialiseNewTask+0x96>
			{
				break;
 8003cf0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cfa:	e003      	b.n	8003d04 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d06:	2b37      	cmp	r3, #55	@ 0x37
 8003d08:	d901      	bls.n	8003d0e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003d0a:	2337      	movs	r3, #55	@ 0x37
 8003d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d12:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d18:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d22:	3304      	adds	r3, #4
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff f8ac 	bl	8002e82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d2c:	3318      	adds	r3, #24
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff f8a7 	bl	8002e82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d38:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d48:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	3354      	adds	r3, #84	@ 0x54
 8003d5e:	224c      	movs	r2, #76	@ 0x4c
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 fd40 	bl	80057e8 <memset>
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	4a0d      	ldr	r2, [pc, #52]	@ (8003da0 <prvInitialiseNewTask+0x144>)
 8003d6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d70:	4a0c      	ldr	r2, [pc, #48]	@ (8003da4 <prvInitialiseNewTask+0x148>)
 8003d72:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d76:	4a0c      	ldr	r2, [pc, #48]	@ (8003da8 <prvInitialiseNewTask+0x14c>)
 8003d78:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d7a:	683a      	ldr	r2, [r7, #0]
 8003d7c:	68f9      	ldr	r1, [r7, #12]
 8003d7e:	69b8      	ldr	r0, [r7, #24]
 8003d80:	f001 f954 	bl	800502c <pxPortInitialiseStack>
 8003d84:	4602      	mov	r2, r0
 8003d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d96:	bf00      	nop
 8003d98:	3720      	adds	r7, #32
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	20001b10 	.word	0x20001b10
 8003da4:	20001b78 	.word	0x20001b78
 8003da8:	20001be0 	.word	0x20001be0

08003dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003db4:	f001 fa2a 	bl	800520c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003db8:	4b2d      	ldr	r3, [pc, #180]	@ (8003e70 <prvAddNewTaskToReadyList+0xc4>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8003e70 <prvAddNewTaskToReadyList+0xc4>)
 8003dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003e74 <prvAddNewTaskToReadyList+0xc8>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d109      	bne.n	8003dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003dca:	4a2a      	ldr	r2, [pc, #168]	@ (8003e74 <prvAddNewTaskToReadyList+0xc8>)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003dd0:	4b27      	ldr	r3, [pc, #156]	@ (8003e70 <prvAddNewTaskToReadyList+0xc4>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d110      	bne.n	8003dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003dd8:	f000 fc2a 	bl	8004630 <prvInitialiseTaskLists>
 8003ddc:	e00d      	b.n	8003dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003dde:	4b26      	ldr	r3, [pc, #152]	@ (8003e78 <prvAddNewTaskToReadyList+0xcc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003de6:	4b23      	ldr	r3, [pc, #140]	@ (8003e74 <prvAddNewTaskToReadyList+0xc8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d802      	bhi.n	8003dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003df4:	4a1f      	ldr	r2, [pc, #124]	@ (8003e74 <prvAddNewTaskToReadyList+0xc8>)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003dfa:	4b20      	ldr	r3, [pc, #128]	@ (8003e7c <prvAddNewTaskToReadyList+0xd0>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3301      	adds	r3, #1
 8003e00:	4a1e      	ldr	r2, [pc, #120]	@ (8003e7c <prvAddNewTaskToReadyList+0xd0>)
 8003e02:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e04:	4b1d      	ldr	r3, [pc, #116]	@ (8003e7c <prvAddNewTaskToReadyList+0xd0>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e10:	4b1b      	ldr	r3, [pc, #108]	@ (8003e80 <prvAddNewTaskToReadyList+0xd4>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d903      	bls.n	8003e20 <prvAddNewTaskToReadyList+0x74>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	4a18      	ldr	r2, [pc, #96]	@ (8003e80 <prvAddNewTaskToReadyList+0xd4>)
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4a15      	ldr	r2, [pc, #84]	@ (8003e84 <prvAddNewTaskToReadyList+0xd8>)
 8003e2e:	441a      	add	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3304      	adds	r3, #4
 8003e34:	4619      	mov	r1, r3
 8003e36:	4610      	mov	r0, r2
 8003e38:	f7ff f82f 	bl	8002e9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003e3c:	f001 fa16 	bl	800526c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003e40:	4b0d      	ldr	r3, [pc, #52]	@ (8003e78 <prvAddNewTaskToReadyList+0xcc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003e48:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <prvAddNewTaskToReadyList+0xc8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d207      	bcs.n	8003e66 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e56:	4b0c      	ldr	r3, [pc, #48]	@ (8003e88 <prvAddNewTaskToReadyList+0xdc>)
 8003e58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	f3bf 8f4f 	dsb	sy
 8003e62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e66:	bf00      	nop
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	20000d90 	.word	0x20000d90
 8003e74:	200008bc 	.word	0x200008bc
 8003e78:	20000d9c 	.word	0x20000d9c
 8003e7c:	20000dac 	.word	0x20000dac
 8003e80:	20000d98 	.word	0x20000d98
 8003e84:	200008c0 	.word	0x200008c0
 8003e88:	e000ed04 	.word	0xe000ed04

08003e8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d018      	beq.n	8003ed0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e9e:	4b14      	ldr	r3, [pc, #80]	@ (8003ef0 <vTaskDelay+0x64>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00b      	beq.n	8003ebe <vTaskDelay+0x32>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	60bb      	str	r3, [r7, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	bf00      	nop
 8003ebc:	e7fd      	b.n	8003eba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ebe:	f000 f88b 	bl	8003fd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fd05 	bl	80048d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003eca:	f000 f893 	bl	8003ff4 <xTaskResumeAll>
 8003ece:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d107      	bne.n	8003ee6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003ed6:	4b07      	ldr	r3, [pc, #28]	@ (8003ef4 <vTaskDelay+0x68>)
 8003ed8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003edc:	601a      	str	r2, [r3, #0]
 8003ede:	f3bf 8f4f 	dsb	sy
 8003ee2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	20000db8 	.word	0x20000db8
 8003ef4:	e000ed04 	.word	0xe000ed04

08003ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08a      	sub	sp, #40	@ 0x28
 8003efc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f06:	463a      	mov	r2, r7
 8003f08:	1d39      	adds	r1, r7, #4
 8003f0a:	f107 0308 	add.w	r3, r7, #8
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7fe ff66 	bl	8002de0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f14:	6839      	ldr	r1, [r7, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	9202      	str	r2, [sp, #8]
 8003f1c:	9301      	str	r3, [sp, #4]
 8003f1e:	2300      	movs	r3, #0
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2300      	movs	r3, #0
 8003f24:	460a      	mov	r2, r1
 8003f26:	4924      	ldr	r1, [pc, #144]	@ (8003fb8 <vTaskStartScheduler+0xc0>)
 8003f28:	4824      	ldr	r0, [pc, #144]	@ (8003fbc <vTaskStartScheduler+0xc4>)
 8003f2a:	f7ff fdf1 	bl	8003b10 <xTaskCreateStatic>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4a23      	ldr	r2, [pc, #140]	@ (8003fc0 <vTaskStartScheduler+0xc8>)
 8003f32:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f34:	4b22      	ldr	r3, [pc, #136]	@ (8003fc0 <vTaskStartScheduler+0xc8>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	e001      	b.n	8003f46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d102      	bne.n	8003f52 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f4c:	f000 fd16 	bl	800497c <xTimerCreateTimerTask>
 8003f50:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d11b      	bne.n	8003f90 <vTaskStartScheduler+0x98>
	__asm volatile
 8003f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f5c:	f383 8811 	msr	BASEPRI, r3
 8003f60:	f3bf 8f6f 	isb	sy
 8003f64:	f3bf 8f4f 	dsb	sy
 8003f68:	613b      	str	r3, [r7, #16]
}
 8003f6a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f6c:	4b15      	ldr	r3, [pc, #84]	@ (8003fc4 <vTaskStartScheduler+0xcc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3354      	adds	r3, #84	@ 0x54
 8003f72:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <vTaskStartScheduler+0xd0>)
 8003f74:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f76:	4b15      	ldr	r3, [pc, #84]	@ (8003fcc <vTaskStartScheduler+0xd4>)
 8003f78:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f7e:	4b14      	ldr	r3, [pc, #80]	@ (8003fd0 <vTaskStartScheduler+0xd8>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003f84:	4b13      	ldr	r3, [pc, #76]	@ (8003fd4 <vTaskStartScheduler+0xdc>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f8a:	f001 f8cd 	bl	8005128 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f8e:	e00f      	b.n	8003fb0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f96:	d10b      	bne.n	8003fb0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	60fb      	str	r3, [r7, #12]
}
 8003faa:	bf00      	nop
 8003fac:	bf00      	nop
 8003fae:	e7fd      	b.n	8003fac <vTaskStartScheduler+0xb4>
}
 8003fb0:	bf00      	nop
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	08005c08 	.word	0x08005c08
 8003fbc:	08004601 	.word	0x08004601
 8003fc0:	20000db4 	.word	0x20000db4
 8003fc4:	200008bc 	.word	0x200008bc
 8003fc8:	20000010 	.word	0x20000010
 8003fcc:	20000db0 	.word	0x20000db0
 8003fd0:	20000d9c 	.word	0x20000d9c
 8003fd4:	20000d94 	.word	0x20000d94

08003fd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003fdc:	4b04      	ldr	r3, [pc, #16]	@ (8003ff0 <vTaskSuspendAll+0x18>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	4a03      	ldr	r2, [pc, #12]	@ (8003ff0 <vTaskSuspendAll+0x18>)
 8003fe4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003fe6:	bf00      	nop
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bc80      	pop	{r7}
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	20000db8 	.word	0x20000db8

08003ff4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004002:	4b42      	ldr	r3, [pc, #264]	@ (800410c <xTaskResumeAll+0x118>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10b      	bne.n	8004022 <xTaskResumeAll+0x2e>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	603b      	str	r3, [r7, #0]
}
 800401c:	bf00      	nop
 800401e:	bf00      	nop
 8004020:	e7fd      	b.n	800401e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004022:	f001 f8f3 	bl	800520c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004026:	4b39      	ldr	r3, [pc, #228]	@ (800410c <xTaskResumeAll+0x118>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3b01      	subs	r3, #1
 800402c:	4a37      	ldr	r2, [pc, #220]	@ (800410c <xTaskResumeAll+0x118>)
 800402e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004030:	4b36      	ldr	r3, [pc, #216]	@ (800410c <xTaskResumeAll+0x118>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d162      	bne.n	80040fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004038:	4b35      	ldr	r3, [pc, #212]	@ (8004110 <xTaskResumeAll+0x11c>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d05e      	beq.n	80040fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004040:	e02f      	b.n	80040a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004042:	4b34      	ldr	r3, [pc, #208]	@ (8004114 <xTaskResumeAll+0x120>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3318      	adds	r3, #24
 800404e:	4618      	mov	r0, r3
 8004050:	f7fe ff7e 	bl	8002f50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3304      	adds	r3, #4
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe ff79 	bl	8002f50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004062:	4b2d      	ldr	r3, [pc, #180]	@ (8004118 <xTaskResumeAll+0x124>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d903      	bls.n	8004072 <xTaskResumeAll+0x7e>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	4a2a      	ldr	r2, [pc, #168]	@ (8004118 <xTaskResumeAll+0x124>)
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4a27      	ldr	r2, [pc, #156]	@ (800411c <xTaskResumeAll+0x128>)
 8004080:	441a      	add	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	3304      	adds	r3, #4
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f7fe ff06 	bl	8002e9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004092:	4b23      	ldr	r3, [pc, #140]	@ (8004120 <xTaskResumeAll+0x12c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004098:	429a      	cmp	r2, r3
 800409a:	d302      	bcc.n	80040a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800409c:	4b21      	ldr	r3, [pc, #132]	@ (8004124 <xTaskResumeAll+0x130>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004114 <xTaskResumeAll+0x120>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1cb      	bne.n	8004042 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d001      	beq.n	80040b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040b0:	f000 fb62 	bl	8004778 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80040b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004128 <xTaskResumeAll+0x134>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d010      	beq.n	80040e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040c0:	f000 f844 	bl	800414c <xTaskIncrementTick>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80040ca:	4b16      	ldr	r3, [pc, #88]	@ (8004124 <xTaskResumeAll+0x130>)
 80040cc:	2201      	movs	r2, #1
 80040ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3b01      	subs	r3, #1
 80040d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f1      	bne.n	80040c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80040dc:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <xTaskResumeAll+0x134>)
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80040e2:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <xTaskResumeAll+0x130>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d009      	beq.n	80040fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80040ea:	2301      	movs	r3, #1
 80040ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80040ee:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <xTaskResumeAll+0x138>)
 80040f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80040fe:	f001 f8b5 	bl	800526c <vPortExitCritical>

	return xAlreadyYielded;
 8004102:	68bb      	ldr	r3, [r7, #8]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3710      	adds	r7, #16
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	20000db8 	.word	0x20000db8
 8004110:	20000d90 	.word	0x20000d90
 8004114:	20000d50 	.word	0x20000d50
 8004118:	20000d98 	.word	0x20000d98
 800411c:	200008c0 	.word	0x200008c0
 8004120:	200008bc 	.word	0x200008bc
 8004124:	20000da4 	.word	0x20000da4
 8004128:	20000da0 	.word	0x20000da0
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004136:	4b04      	ldr	r3, [pc, #16]	@ (8004148 <xTaskGetTickCount+0x18>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800413c:	687b      	ldr	r3, [r7, #4]
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	bc80      	pop	{r7}
 8004146:	4770      	bx	lr
 8004148:	20000d94 	.word	0x20000d94

0800414c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004156:	4b4f      	ldr	r3, [pc, #316]	@ (8004294 <xTaskIncrementTick+0x148>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	f040 8090 	bne.w	8004280 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004160:	4b4d      	ldr	r3, [pc, #308]	@ (8004298 <xTaskIncrementTick+0x14c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3301      	adds	r3, #1
 8004166:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004168:	4a4b      	ldr	r2, [pc, #300]	@ (8004298 <xTaskIncrementTick+0x14c>)
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d121      	bne.n	80041b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004174:	4b49      	ldr	r3, [pc, #292]	@ (800429c <xTaskIncrementTick+0x150>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <xTaskIncrementTick+0x4a>
	__asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	603b      	str	r3, [r7, #0]
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	e7fd      	b.n	8004192 <xTaskIncrementTick+0x46>
 8004196:	4b41      	ldr	r3, [pc, #260]	@ (800429c <xTaskIncrementTick+0x150>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	4b40      	ldr	r3, [pc, #256]	@ (80042a0 <xTaskIncrementTick+0x154>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a3e      	ldr	r2, [pc, #248]	@ (800429c <xTaskIncrementTick+0x150>)
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4a3e      	ldr	r2, [pc, #248]	@ (80042a0 <xTaskIncrementTick+0x154>)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	4b3e      	ldr	r3, [pc, #248]	@ (80042a4 <xTaskIncrementTick+0x158>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3301      	adds	r3, #1
 80041b0:	4a3c      	ldr	r2, [pc, #240]	@ (80042a4 <xTaskIncrementTick+0x158>)
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	f000 fae0 	bl	8004778 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80041b8:	4b3b      	ldr	r3, [pc, #236]	@ (80042a8 <xTaskIncrementTick+0x15c>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	693a      	ldr	r2, [r7, #16]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d349      	bcc.n	8004256 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c2:	4b36      	ldr	r3, [pc, #216]	@ (800429c <xTaskIncrementTick+0x150>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041cc:	4b36      	ldr	r3, [pc, #216]	@ (80042a8 <xTaskIncrementTick+0x15c>)
 80041ce:	f04f 32ff 	mov.w	r2, #4294967295
 80041d2:	601a      	str	r2, [r3, #0]
					break;
 80041d4:	e03f      	b.n	8004256 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041d6:	4b31      	ldr	r3, [pc, #196]	@ (800429c <xTaskIncrementTick+0x150>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d203      	bcs.n	80041f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80041ee:	4a2e      	ldr	r2, [pc, #184]	@ (80042a8 <xTaskIncrementTick+0x15c>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80041f4:	e02f      	b.n	8004256 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	3304      	adds	r3, #4
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7fe fea8 	bl	8002f50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004204:	2b00      	cmp	r3, #0
 8004206:	d004      	beq.n	8004212 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	3318      	adds	r3, #24
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe fe9f 	bl	8002f50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004216:	4b25      	ldr	r3, [pc, #148]	@ (80042ac <xTaskIncrementTick+0x160>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	429a      	cmp	r2, r3
 800421c:	d903      	bls.n	8004226 <xTaskIncrementTick+0xda>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004222:	4a22      	ldr	r2, [pc, #136]	@ (80042ac <xTaskIncrementTick+0x160>)
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800422a:	4613      	mov	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	4413      	add	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4a1f      	ldr	r2, [pc, #124]	@ (80042b0 <xTaskIncrementTick+0x164>)
 8004234:	441a      	add	r2, r3
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	3304      	adds	r3, #4
 800423a:	4619      	mov	r1, r3
 800423c:	4610      	mov	r0, r2
 800423e:	f7fe fe2c 	bl	8002e9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004246:	4b1b      	ldr	r3, [pc, #108]	@ (80042b4 <xTaskIncrementTick+0x168>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	429a      	cmp	r2, r3
 800424e:	d3b8      	bcc.n	80041c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004250:	2301      	movs	r3, #1
 8004252:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004254:	e7b5      	b.n	80041c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004256:	4b17      	ldr	r3, [pc, #92]	@ (80042b4 <xTaskIncrementTick+0x168>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800425c:	4914      	ldr	r1, [pc, #80]	@ (80042b0 <xTaskIncrementTick+0x164>)
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	440b      	add	r3, r1
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b01      	cmp	r3, #1
 800426c:	d901      	bls.n	8004272 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800426e:	2301      	movs	r3, #1
 8004270:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004272:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <xTaskIncrementTick+0x16c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800427a:	2301      	movs	r3, #1
 800427c:	617b      	str	r3, [r7, #20]
 800427e:	e004      	b.n	800428a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004280:	4b0e      	ldr	r3, [pc, #56]	@ (80042bc <xTaskIncrementTick+0x170>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	3301      	adds	r3, #1
 8004286:	4a0d      	ldr	r2, [pc, #52]	@ (80042bc <xTaskIncrementTick+0x170>)
 8004288:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800428a:	697b      	ldr	r3, [r7, #20]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000db8 	.word	0x20000db8
 8004298:	20000d94 	.word	0x20000d94
 800429c:	20000d48 	.word	0x20000d48
 80042a0:	20000d4c 	.word	0x20000d4c
 80042a4:	20000da8 	.word	0x20000da8
 80042a8:	20000db0 	.word	0x20000db0
 80042ac:	20000d98 	.word	0x20000d98
 80042b0:	200008c0 	.word	0x200008c0
 80042b4:	200008bc 	.word	0x200008bc
 80042b8:	20000da4 	.word	0x20000da4
 80042bc:	20000da0 	.word	0x20000da0

080042c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80042c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004370 <vTaskSwitchContext+0xb0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80042ce:	4b29      	ldr	r3, [pc, #164]	@ (8004374 <vTaskSwitchContext+0xb4>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80042d4:	e047      	b.n	8004366 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80042d6:	4b27      	ldr	r3, [pc, #156]	@ (8004374 <vTaskSwitchContext+0xb4>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042dc:	4b26      	ldr	r3, [pc, #152]	@ (8004378 <vTaskSwitchContext+0xb8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	e011      	b.n	8004308 <vTaskSwitchContext+0x48>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <vTaskSwitchContext+0x42>
	__asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	607b      	str	r3, [r7, #4]
}
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	e7fd      	b.n	80042fe <vTaskSwitchContext+0x3e>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3b01      	subs	r3, #1
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	491c      	ldr	r1, [pc, #112]	@ (800437c <vTaskSwitchContext+0xbc>)
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	4613      	mov	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4413      	add	r3, r2
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0e3      	beq.n	80042e4 <vTaskSwitchContext+0x24>
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4a15      	ldr	r2, [pc, #84]	@ (800437c <vTaskSwitchContext+0xbc>)
 8004328:	4413      	add	r3, r2
 800432a:	60bb      	str	r3, [r7, #8]
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	685a      	ldr	r2, [r3, #4]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	605a      	str	r2, [r3, #4]
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	3308      	adds	r3, #8
 800433e:	429a      	cmp	r2, r3
 8004340:	d104      	bne.n	800434c <vTaskSwitchContext+0x8c>
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	605a      	str	r2, [r3, #4]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	4a0b      	ldr	r2, [pc, #44]	@ (8004380 <vTaskSwitchContext+0xc0>)
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	4a08      	ldr	r2, [pc, #32]	@ (8004378 <vTaskSwitchContext+0xb8>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800435c:	4b08      	ldr	r3, [pc, #32]	@ (8004380 <vTaskSwitchContext+0xc0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3354      	adds	r3, #84	@ 0x54
 8004362:	4a08      	ldr	r2, [pc, #32]	@ (8004384 <vTaskSwitchContext+0xc4>)
 8004364:	6013      	str	r3, [r2, #0]
}
 8004366:	bf00      	nop
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	20000db8 	.word	0x20000db8
 8004374:	20000da4 	.word	0x20000da4
 8004378:	20000d98 	.word	0x20000d98
 800437c:	200008c0 	.word	0x200008c0
 8004380:	200008bc 	.word	0x200008bc
 8004384:	20000010 	.word	0x20000010

08004388 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	60fb      	str	r3, [r7, #12]
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	e7fd      	b.n	80043ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043b0:	4b07      	ldr	r3, [pc, #28]	@ (80043d0 <vTaskPlaceOnEventList+0x48>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3318      	adds	r3, #24
 80043b6:	4619      	mov	r1, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fe fd91 	bl	8002ee0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80043be:	2101      	movs	r1, #1
 80043c0:	6838      	ldr	r0, [r7, #0]
 80043c2:	f000 fa87 	bl	80048d4 <prvAddCurrentTaskToDelayedList>
}
 80043c6:	bf00      	nop
 80043c8:	3710      	adds	r7, #16
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	200008bc 	.word	0x200008bc

080043d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10b      	bne.n	80043fe <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80043e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ea:	f383 8811 	msr	BASEPRI, r3
 80043ee:	f3bf 8f6f 	isb	sy
 80043f2:	f3bf 8f4f 	dsb	sy
 80043f6:	617b      	str	r3, [r7, #20]
}
 80043f8:	bf00      	nop
 80043fa:	bf00      	nop
 80043fc:	e7fd      	b.n	80043fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043fe:	4b0a      	ldr	r3, [pc, #40]	@ (8004428 <vTaskPlaceOnEventListRestricted+0x54>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3318      	adds	r3, #24
 8004404:	4619      	mov	r1, r3
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f7fe fd47 	bl	8002e9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004412:	f04f 33ff 	mov.w	r3, #4294967295
 8004416:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004418:	6879      	ldr	r1, [r7, #4]
 800441a:	68b8      	ldr	r0, [r7, #8]
 800441c:	f000 fa5a 	bl	80048d4 <prvAddCurrentTaskToDelayedList>
	}
 8004420:	bf00      	nop
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	200008bc 	.word	0x200008bc

0800442c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10b      	bne.n	800445a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60fb      	str	r3, [r7, #12]
}
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	e7fd      	b.n	8004456 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	3318      	adds	r3, #24
 800445e:	4618      	mov	r0, r3
 8004460:	f7fe fd76 	bl	8002f50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004464:	4b1d      	ldr	r3, [pc, #116]	@ (80044dc <xTaskRemoveFromEventList+0xb0>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d11d      	bne.n	80044a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	3304      	adds	r3, #4
 8004470:	4618      	mov	r0, r3
 8004472:	f7fe fd6d 	bl	8002f50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800447a:	4b19      	ldr	r3, [pc, #100]	@ (80044e0 <xTaskRemoveFromEventList+0xb4>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d903      	bls.n	800448a <xTaskRemoveFromEventList+0x5e>
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	4a16      	ldr	r2, [pc, #88]	@ (80044e0 <xTaskRemoveFromEventList+0xb4>)
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4a13      	ldr	r2, [pc, #76]	@ (80044e4 <xTaskRemoveFromEventList+0xb8>)
 8004498:	441a      	add	r2, r3
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	3304      	adds	r3, #4
 800449e:	4619      	mov	r1, r3
 80044a0:	4610      	mov	r0, r2
 80044a2:	f7fe fcfa 	bl	8002e9a <vListInsertEnd>
 80044a6:	e005      	b.n	80044b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	3318      	adds	r3, #24
 80044ac:	4619      	mov	r1, r3
 80044ae:	480e      	ldr	r0, [pc, #56]	@ (80044e8 <xTaskRemoveFromEventList+0xbc>)
 80044b0:	f7fe fcf3 	bl	8002e9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044b8:	4b0c      	ldr	r3, [pc, #48]	@ (80044ec <xTaskRemoveFromEventList+0xc0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044be:	429a      	cmp	r2, r3
 80044c0:	d905      	bls.n	80044ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044c2:	2301      	movs	r3, #1
 80044c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80044c6:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <xTaskRemoveFromEventList+0xc4>)
 80044c8:	2201      	movs	r2, #1
 80044ca:	601a      	str	r2, [r3, #0]
 80044cc:	e001      	b.n	80044d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80044d2:	697b      	ldr	r3, [r7, #20]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000db8 	.word	0x20000db8
 80044e0:	20000d98 	.word	0x20000d98
 80044e4:	200008c0 	.word	0x200008c0
 80044e8:	20000d50 	.word	0x20000d50
 80044ec:	200008bc 	.word	0x200008bc
 80044f0:	20000da4 	.word	0x20000da4

080044f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80044fc:	4b06      	ldr	r3, [pc, #24]	@ (8004518 <vTaskInternalSetTimeOutState+0x24>)
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004504:	4b05      	ldr	r3, [pc, #20]	@ (800451c <vTaskInternalSetTimeOutState+0x28>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	605a      	str	r2, [r3, #4]
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	bc80      	pop	{r7}
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	20000da8 	.word	0x20000da8
 800451c:	20000d94 	.word	0x20000d94

08004520 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b088      	sub	sp, #32
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	613b      	str	r3, [r7, #16]
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d10b      	bne.n	8004566 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	60fb      	str	r3, [r7, #12]
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	e7fd      	b.n	8004562 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004566:	f000 fe51 	bl	800520c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800456a:	4b1d      	ldr	r3, [pc, #116]	@ (80045e0 <xTaskCheckForTimeOut+0xc0>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004582:	d102      	bne.n	800458a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004584:	2300      	movs	r3, #0
 8004586:	61fb      	str	r3, [r7, #28]
 8004588:	e023      	b.n	80045d2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b15      	ldr	r3, [pc, #84]	@ (80045e4 <xTaskCheckForTimeOut+0xc4>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	429a      	cmp	r2, r3
 8004594:	d007      	beq.n	80045a6 <xTaskCheckForTimeOut+0x86>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	429a      	cmp	r2, r3
 800459e:	d302      	bcc.n	80045a6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045a0:	2301      	movs	r3, #1
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	e015      	b.n	80045d2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d20b      	bcs.n	80045c8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	1ad2      	subs	r2, r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff ff99 	bl	80044f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	61fb      	str	r3, [r7, #28]
 80045c6:	e004      	b.n	80045d2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80045ce:	2301      	movs	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80045d2:	f000 fe4b 	bl	800526c <vPortExitCritical>

	return xReturn;
 80045d6:	69fb      	ldr	r3, [r7, #28]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3720      	adds	r7, #32
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000d94 	.word	0x20000d94
 80045e4:	20000da8 	.word	0x20000da8

080045e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80045ec:	4b03      	ldr	r3, [pc, #12]	@ (80045fc <vTaskMissedYield+0x14>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bc80      	pop	{r7}
 80045f8:	4770      	bx	lr
 80045fa:	bf00      	nop
 80045fc:	20000da4 	.word	0x20000da4

08004600 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004608:	f000 f852 	bl	80046b0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800460c:	4b06      	ldr	r3, [pc, #24]	@ (8004628 <prvIdleTask+0x28>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d9f9      	bls.n	8004608 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004614:	4b05      	ldr	r3, [pc, #20]	@ (800462c <prvIdleTask+0x2c>)
 8004616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004624:	e7f0      	b.n	8004608 <prvIdleTask+0x8>
 8004626:	bf00      	nop
 8004628:	200008c0 	.word	0x200008c0
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004636:	2300      	movs	r3, #0
 8004638:	607b      	str	r3, [r7, #4]
 800463a:	e00c      	b.n	8004656 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4a12      	ldr	r2, [pc, #72]	@ (8004690 <prvInitialiseTaskLists+0x60>)
 8004648:	4413      	add	r3, r2
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe fbfa 	bl	8002e44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3301      	adds	r3, #1
 8004654:	607b      	str	r3, [r7, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b37      	cmp	r3, #55	@ 0x37
 800465a:	d9ef      	bls.n	800463c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800465c:	480d      	ldr	r0, [pc, #52]	@ (8004694 <prvInitialiseTaskLists+0x64>)
 800465e:	f7fe fbf1 	bl	8002e44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004662:	480d      	ldr	r0, [pc, #52]	@ (8004698 <prvInitialiseTaskLists+0x68>)
 8004664:	f7fe fbee 	bl	8002e44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004668:	480c      	ldr	r0, [pc, #48]	@ (800469c <prvInitialiseTaskLists+0x6c>)
 800466a:	f7fe fbeb 	bl	8002e44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800466e:	480c      	ldr	r0, [pc, #48]	@ (80046a0 <prvInitialiseTaskLists+0x70>)
 8004670:	f7fe fbe8 	bl	8002e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004674:	480b      	ldr	r0, [pc, #44]	@ (80046a4 <prvInitialiseTaskLists+0x74>)
 8004676:	f7fe fbe5 	bl	8002e44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800467a:	4b0b      	ldr	r3, [pc, #44]	@ (80046a8 <prvInitialiseTaskLists+0x78>)
 800467c:	4a05      	ldr	r2, [pc, #20]	@ (8004694 <prvInitialiseTaskLists+0x64>)
 800467e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004680:	4b0a      	ldr	r3, [pc, #40]	@ (80046ac <prvInitialiseTaskLists+0x7c>)
 8004682:	4a05      	ldr	r2, [pc, #20]	@ (8004698 <prvInitialiseTaskLists+0x68>)
 8004684:	601a      	str	r2, [r3, #0]
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	200008c0 	.word	0x200008c0
 8004694:	20000d20 	.word	0x20000d20
 8004698:	20000d34 	.word	0x20000d34
 800469c:	20000d50 	.word	0x20000d50
 80046a0:	20000d64 	.word	0x20000d64
 80046a4:	20000d7c 	.word	0x20000d7c
 80046a8:	20000d48 	.word	0x20000d48
 80046ac:	20000d4c 	.word	0x20000d4c

080046b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046b6:	e019      	b.n	80046ec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046b8:	f000 fda8 	bl	800520c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046bc:	4b10      	ldr	r3, [pc, #64]	@ (8004700 <prvCheckTasksWaitingTermination+0x50>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4618      	mov	r0, r3
 80046ca:	f7fe fc41 	bl	8002f50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80046ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004704 <prvCheckTasksWaitingTermination+0x54>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	3b01      	subs	r3, #1
 80046d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004704 <prvCheckTasksWaitingTermination+0x54>)
 80046d6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80046d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004708 <prvCheckTasksWaitingTermination+0x58>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	3b01      	subs	r3, #1
 80046de:	4a0a      	ldr	r2, [pc, #40]	@ (8004708 <prvCheckTasksWaitingTermination+0x58>)
 80046e0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80046e2:	f000 fdc3 	bl	800526c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f810 	bl	800470c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046ec:	4b06      	ldr	r3, [pc, #24]	@ (8004708 <prvCheckTasksWaitingTermination+0x58>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d1e1      	bne.n	80046b8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80046f4:	bf00      	nop
 80046f6:	bf00      	nop
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000d64 	.word	0x20000d64
 8004704:	20000d90 	.word	0x20000d90
 8004708:	20000d78 	.word	0x20000d78

0800470c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3354      	adds	r3, #84	@ 0x54
 8004718:	4618      	mov	r0, r3
 800471a:	f001 f86d 	bl	80057f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004724:	2b00      	cmp	r3, #0
 8004726:	d108      	bne.n	800473a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800472c:	4618      	mov	r0, r3
 800472e:	f000 ff3d 	bl	80055ac <vPortFree>
				vPortFree( pxTCB );
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 ff3a 	bl	80055ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004738:	e019      	b.n	800476e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004740:	2b01      	cmp	r3, #1
 8004742:	d103      	bne.n	800474c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 ff31 	bl	80055ac <vPortFree>
	}
 800474a:	e010      	b.n	800476e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004752:	2b02      	cmp	r3, #2
 8004754:	d00b      	beq.n	800476e <prvDeleteTCB+0x62>
	__asm volatile
 8004756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800475a:	f383 8811 	msr	BASEPRI, r3
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f3bf 8f4f 	dsb	sy
 8004766:	60fb      	str	r3, [r7, #12]
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	e7fd      	b.n	800476a <prvDeleteTCB+0x5e>
	}
 800476e:	bf00      	nop
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800477e:	4b0c      	ldr	r3, [pc, #48]	@ (80047b0 <prvResetNextTaskUnblockTime+0x38>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004788:	4b0a      	ldr	r3, [pc, #40]	@ (80047b4 <prvResetNextTaskUnblockTime+0x3c>)
 800478a:	f04f 32ff 	mov.w	r2, #4294967295
 800478e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004790:	e008      	b.n	80047a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <prvResetNextTaskUnblockTime+0x38>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4a04      	ldr	r2, [pc, #16]	@ (80047b4 <prvResetNextTaskUnblockTime+0x3c>)
 80047a2:	6013      	str	r3, [r2, #0]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bc80      	pop	{r7}
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000d48 	.word	0x20000d48
 80047b4:	20000db0 	.word	0x20000db0

080047b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047be:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <xTaskGetSchedulerState+0x34>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047c6:	2301      	movs	r3, #1
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	e008      	b.n	80047de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047cc:	4b08      	ldr	r3, [pc, #32]	@ (80047f0 <xTaskGetSchedulerState+0x38>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d102      	bne.n	80047da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047d4:	2302      	movs	r3, #2
 80047d6:	607b      	str	r3, [r7, #4]
 80047d8:	e001      	b.n	80047de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80047da:	2300      	movs	r3, #0
 80047dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80047de:	687b      	ldr	r3, [r7, #4]
	}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bc80      	pop	{r7}
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	20000d9c 	.word	0x20000d9c
 80047f0:	20000db8 	.word	0x20000db8

080047f4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004800:	2300      	movs	r3, #0
 8004802:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d058      	beq.n	80048bc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800480a:	4b2f      	ldr	r3, [pc, #188]	@ (80048c8 <xTaskPriorityDisinherit+0xd4>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	429a      	cmp	r2, r3
 8004812:	d00b      	beq.n	800482c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	60fb      	str	r3, [r7, #12]
}
 8004826:	bf00      	nop
 8004828:	bf00      	nop
 800482a:	e7fd      	b.n	8004828 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10b      	bne.n	800484c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	60bb      	str	r3, [r7, #8]
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	e7fd      	b.n	8004848 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004850:	1e5a      	subs	r2, r3, #1
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485e:	429a      	cmp	r2, r3
 8004860:	d02c      	beq.n	80048bc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004866:	2b00      	cmp	r3, #0
 8004868:	d128      	bne.n	80048bc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	3304      	adds	r3, #4
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fb6e 	bl	8002f50 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004880:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800488c:	4b0f      	ldr	r3, [pc, #60]	@ (80048cc <xTaskPriorityDisinherit+0xd8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	429a      	cmp	r2, r3
 8004892:	d903      	bls.n	800489c <xTaskPriorityDisinherit+0xa8>
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	4a0c      	ldr	r2, [pc, #48]	@ (80048cc <xTaskPriorityDisinherit+0xd8>)
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4a09      	ldr	r2, [pc, #36]	@ (80048d0 <xTaskPriorityDisinherit+0xdc>)
 80048aa:	441a      	add	r2, r3
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f7fe faf1 	bl	8002e9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048b8:	2301      	movs	r3, #1
 80048ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048bc:	697b      	ldr	r3, [r7, #20]
	}
 80048be:	4618      	mov	r0, r3
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
 80048c6:	bf00      	nop
 80048c8:	200008bc 	.word	0x200008bc
 80048cc:	20000d98 	.word	0x20000d98
 80048d0:	200008c0 	.word	0x200008c0

080048d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048de:	4b21      	ldr	r3, [pc, #132]	@ (8004964 <prvAddCurrentTaskToDelayedList+0x90>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048e4:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <prvAddCurrentTaskToDelayedList+0x94>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	3304      	adds	r3, #4
 80048ea:	4618      	mov	r0, r3
 80048ec:	f7fe fb30 	bl	8002f50 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048f6:	d10a      	bne.n	800490e <prvAddCurrentTaskToDelayedList+0x3a>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80048fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004968 <prvAddCurrentTaskToDelayedList+0x94>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	3304      	adds	r3, #4
 8004904:	4619      	mov	r1, r3
 8004906:	4819      	ldr	r0, [pc, #100]	@ (800496c <prvAddCurrentTaskToDelayedList+0x98>)
 8004908:	f7fe fac7 	bl	8002e9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800490c:	e026      	b.n	800495c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4413      	add	r3, r2
 8004914:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004916:	4b14      	ldr	r3, [pc, #80]	@ (8004968 <prvAddCurrentTaskToDelayedList+0x94>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	429a      	cmp	r2, r3
 8004924:	d209      	bcs.n	800493a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004926:	4b12      	ldr	r3, [pc, #72]	@ (8004970 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	4b0f      	ldr	r3, [pc, #60]	@ (8004968 <prvAddCurrentTaskToDelayedList+0x94>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f7fe fad4 	bl	8002ee0 <vListInsert>
}
 8004938:	e010      	b.n	800495c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800493a:	4b0e      	ldr	r3, [pc, #56]	@ (8004974 <prvAddCurrentTaskToDelayedList+0xa0>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4b0a      	ldr	r3, [pc, #40]	@ (8004968 <prvAddCurrentTaskToDelayedList+0x94>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3304      	adds	r3, #4
 8004944:	4619      	mov	r1, r3
 8004946:	4610      	mov	r0, r2
 8004948:	f7fe faca 	bl	8002ee0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800494c:	4b0a      	ldr	r3, [pc, #40]	@ (8004978 <prvAddCurrentTaskToDelayedList+0xa4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	429a      	cmp	r2, r3
 8004954:	d202      	bcs.n	800495c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004956:	4a08      	ldr	r2, [pc, #32]	@ (8004978 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	6013      	str	r3, [r2, #0]
}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	20000d94 	.word	0x20000d94
 8004968:	200008bc 	.word	0x200008bc
 800496c:	20000d7c 	.word	0x20000d7c
 8004970:	20000d4c 	.word	0x20000d4c
 8004974:	20000d48 	.word	0x20000d48
 8004978:	20000db0 	.word	0x20000db0

0800497c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	@ 0x28
 8004980:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004986:	f000 fb11 	bl	8004fac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800498a:	4b1d      	ldr	r3, [pc, #116]	@ (8004a00 <xTimerCreateTimerTask+0x84>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d021      	beq.n	80049d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800499a:	1d3a      	adds	r2, r7, #4
 800499c:	f107 0108 	add.w	r1, r7, #8
 80049a0:	f107 030c 	add.w	r3, r7, #12
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe fa33 	bl	8002e10 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	9202      	str	r2, [sp, #8]
 80049b2:	9301      	str	r3, [sp, #4]
 80049b4:	2302      	movs	r3, #2
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	2300      	movs	r3, #0
 80049ba:	460a      	mov	r2, r1
 80049bc:	4911      	ldr	r1, [pc, #68]	@ (8004a04 <xTimerCreateTimerTask+0x88>)
 80049be:	4812      	ldr	r0, [pc, #72]	@ (8004a08 <xTimerCreateTimerTask+0x8c>)
 80049c0:	f7ff f8a6 	bl	8003b10 <xTaskCreateStatic>
 80049c4:	4603      	mov	r3, r0
 80049c6:	4a11      	ldr	r2, [pc, #68]	@ (8004a0c <xTimerCreateTimerTask+0x90>)
 80049c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049ca:	4b10      	ldr	r3, [pc, #64]	@ (8004a0c <xTimerCreateTimerTask+0x90>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80049d2:	2301      	movs	r3, #1
 80049d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	613b      	str	r3, [r7, #16]
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80049f4:	697b      	ldr	r3, [r7, #20]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3718      	adds	r7, #24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000dec 	.word	0x20000dec
 8004a04:	08005c10 	.word	0x08005c10
 8004a08:	08004b49 	.word	0x08004b49
 8004a0c:	20000df0 	.word	0x20000df0

08004a10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	@ 0x28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <xTimerGenericCommand+0x30>
	__asm volatile
 8004a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2c:	f383 8811 	msr	BASEPRI, r3
 8004a30:	f3bf 8f6f 	isb	sy
 8004a34:	f3bf 8f4f 	dsb	sy
 8004a38:	623b      	str	r3, [r7, #32]
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	e7fd      	b.n	8004a3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a40:	4b19      	ldr	r3, [pc, #100]	@ (8004aa8 <xTimerGenericCommand+0x98>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d02a      	beq.n	8004a9e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b05      	cmp	r3, #5
 8004a58:	dc18      	bgt.n	8004a8c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a5a:	f7ff fead 	bl	80047b8 <xTaskGetSchedulerState>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d109      	bne.n	8004a78 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a64:	4b10      	ldr	r3, [pc, #64]	@ (8004aa8 <xTimerGenericCommand+0x98>)
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	f107 0110 	add.w	r1, r7, #16
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a70:	f7fe fbde 	bl	8003230 <xQueueGenericSend>
 8004a74:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a76:	e012      	b.n	8004a9e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a78:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa8 <xTimerGenericCommand+0x98>)
 8004a7a:	6818      	ldr	r0, [r3, #0]
 8004a7c:	f107 0110 	add.w	r1, r7, #16
 8004a80:	2300      	movs	r3, #0
 8004a82:	2200      	movs	r2, #0
 8004a84:	f7fe fbd4 	bl	8003230 <xQueueGenericSend>
 8004a88:	6278      	str	r0, [r7, #36]	@ 0x24
 8004a8a:	e008      	b.n	8004a9e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <xTimerGenericCommand+0x98>)
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	f107 0110 	add.w	r1, r7, #16
 8004a94:	2300      	movs	r3, #0
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	f7fe fccc 	bl	8003434 <xQueueGenericSendFromISR>
 8004a9c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3728      	adds	r7, #40	@ 0x28
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000dec 	.word	0x20000dec

08004aac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ab6:	4b23      	ldr	r3, [pc, #140]	@ (8004b44 <prvProcessExpiredTimer+0x98>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7fe fa43 	bl	8002f50 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d023      	beq.n	8004b20 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	699a      	ldr	r2, [r3, #24]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	18d1      	adds	r1, r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	6978      	ldr	r0, [r7, #20]
 8004ae6:	f000 f8d3 	bl	8004c90 <prvInsertTimerInActiveList>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d020      	beq.n	8004b32 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004af0:	2300      	movs	r3, #0
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	2100      	movs	r1, #0
 8004afa:	6978      	ldr	r0, [r7, #20]
 8004afc:	f7ff ff88 	bl	8004a10 <xTimerGenericCommand>
 8004b00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d114      	bne.n	8004b32 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	60fb      	str	r3, [r7, #12]
}
 8004b1a:	bf00      	nop
 8004b1c:	bf00      	nop
 8004b1e:	e7fd      	b.n	8004b1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b26:	f023 0301 	bic.w	r3, r3, #1
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	6978      	ldr	r0, [r7, #20]
 8004b38:	4798      	blx	r3
}
 8004b3a:	bf00      	nop
 8004b3c:	3718      	adds	r7, #24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	20000de4 	.word	0x20000de4

08004b48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b50:	f107 0308 	add.w	r3, r7, #8
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 f859 	bl	8004c0c <prvGetNextExpireTime>
 8004b5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4619      	mov	r1, r3
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f000 f805 	bl	8004b70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b66:	f000 f8d5 	bl	8004d14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b6a:	bf00      	nop
 8004b6c:	e7f0      	b.n	8004b50 <prvTimerTask+0x8>
	...

08004b70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b7a:	f7ff fa2d 	bl	8003fd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b7e:	f107 0308 	add.w	r3, r7, #8
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 f864 	bl	8004c50 <prvSampleTimeNow>
 8004b88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d130      	bne.n	8004bf2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10a      	bne.n	8004bac <prvProcessTimerOrBlockTask+0x3c>
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d806      	bhi.n	8004bac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b9e:	f7ff fa29 	bl	8003ff4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f7ff ff81 	bl	8004aac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004baa:	e024      	b.n	8004bf6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d008      	beq.n	8004bc4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bb2:	4b13      	ldr	r3, [pc, #76]	@ (8004c00 <prvProcessTimerOrBlockTask+0x90>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <prvProcessTimerOrBlockTask+0x50>
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e000      	b.n	8004bc2 <prvProcessTimerOrBlockTask+0x52>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004bc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c04 <prvProcessTimerOrBlockTask+0x94>)
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	f7fe ff69 	bl	8003aa8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bd6:	f7ff fa0d 	bl	8003ff4 <xTaskResumeAll>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004be0:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <prvProcessTimerOrBlockTask+0x98>)
 8004be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
}
 8004bf0:	e001      	b.n	8004bf6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bf2:	f7ff f9ff 	bl	8003ff4 <xTaskResumeAll>
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000de8 	.word	0x20000de8
 8004c04:	20000dec 	.word	0x20000dec
 8004c08:	e000ed04 	.word	0xe000ed04

08004c0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c14:	4b0d      	ldr	r3, [pc, #52]	@ (8004c4c <prvGetNextExpireTime+0x40>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d101      	bne.n	8004c22 <prvGetNextExpireTime+0x16>
 8004c1e:	2201      	movs	r2, #1
 8004c20:	e000      	b.n	8004c24 <prvGetNextExpireTime+0x18>
 8004c22:	2200      	movs	r2, #0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c30:	4b06      	ldr	r3, [pc, #24]	@ (8004c4c <prvGetNextExpireTime+0x40>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	e001      	b.n	8004c40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c40:	68fb      	ldr	r3, [r7, #12]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3714      	adds	r7, #20
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bc80      	pop	{r7}
 8004c4a:	4770      	bx	lr
 8004c4c:	20000de4 	.word	0x20000de4

08004c50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c58:	f7ff fa6a 	bl	8004130 <xTaskGetTickCount>
 8004c5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004c8c <prvSampleTimeNow+0x3c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d205      	bcs.n	8004c74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c68:	f000 f93a 	bl	8004ee0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	e002      	b.n	8004c7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c7a:	4a04      	ldr	r2, [pc, #16]	@ (8004c8c <prvSampleTimeNow+0x3c>)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c80:	68fb      	ldr	r3, [r7, #12]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	20000df4 	.word	0x20000df4

08004c90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	68fa      	ldr	r2, [r7, #12]
 8004cac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d812      	bhi.n	8004cdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	1ad2      	subs	r2, r2, r3
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d302      	bcc.n	8004cca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e01b      	b.n	8004d02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004cca:	4b10      	ldr	r3, [pc, #64]	@ (8004d0c <prvInsertTimerInActiveList+0x7c>)
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f7fe f903 	bl	8002ee0 <vListInsert>
 8004cda:	e012      	b.n	8004d02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d206      	bcs.n	8004cf2 <prvInsertTimerInActiveList+0x62>
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d302      	bcc.n	8004cf2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004cec:	2301      	movs	r3, #1
 8004cee:	617b      	str	r3, [r7, #20]
 8004cf0:	e007      	b.n	8004d02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cf2:	4b07      	ldr	r3, [pc, #28]	@ (8004d10 <prvInsertTimerInActiveList+0x80>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	f7fe f8ef 	bl	8002ee0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d02:	697b      	ldr	r3, [r7, #20]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20000de8 	.word	0x20000de8
 8004d10:	20000de4 	.word	0x20000de4

08004d14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b08e      	sub	sp, #56	@ 0x38
 8004d18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d1a:	e0ce      	b.n	8004eba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	da19      	bge.n	8004d56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d22:	1d3b      	adds	r3, r7, #4
 8004d24:	3304      	adds	r3, #4
 8004d26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10b      	bne.n	8004d46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	61fb      	str	r3, [r7, #28]
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	e7fd      	b.n	8004d42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d4c:	6850      	ldr	r0, [r2, #4]
 8004d4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d50:	6892      	ldr	r2, [r2, #8]
 8004d52:	4611      	mov	r1, r2
 8004d54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	f2c0 80ae 	blt.w	8004eba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d004      	beq.n	8004d74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f7fe f8ee 	bl	8002f50 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d74:	463b      	mov	r3, r7
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7ff ff6a 	bl	8004c50 <prvSampleTimeNow>
 8004d7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b09      	cmp	r3, #9
 8004d82:	f200 8097 	bhi.w	8004eb4 <prvProcessReceivedCommands+0x1a0>
 8004d86:	a201      	add	r2, pc, #4	@ (adr r2, 8004d8c <prvProcessReceivedCommands+0x78>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004db5 	.word	0x08004db5
 8004d90:	08004db5 	.word	0x08004db5
 8004d94:	08004db5 	.word	0x08004db5
 8004d98:	08004e2b 	.word	0x08004e2b
 8004d9c:	08004e3f 	.word	0x08004e3f
 8004da0:	08004e8b 	.word	0x08004e8b
 8004da4:	08004db5 	.word	0x08004db5
 8004da8:	08004db5 	.word	0x08004db5
 8004dac:	08004e2b 	.word	0x08004e2b
 8004db0:	08004e3f 	.word	0x08004e3f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dba:	f043 0301 	orr.w	r3, r3, #1
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004dc6:	68ba      	ldr	r2, [r7, #8]
 8004dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	18d1      	adds	r1, r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dd4:	f7ff ff5c 	bl	8004c90 <prvInsertTimerInActiveList>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d06c      	beq.n	8004eb8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004de4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d061      	beq.n	8004eb8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	441a      	add	r2, r3
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	2300      	movs	r3, #0
 8004e02:	2100      	movs	r1, #0
 8004e04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e06:	f7ff fe03 	bl	8004a10 <xTimerGenericCommand>
 8004e0a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d152      	bne.n	8004eb8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	61bb      	str	r3, [r7, #24]
}
 8004e24:	bf00      	nop
 8004e26:	bf00      	nop
 8004e28:	e7fd      	b.n	8004e26 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e38:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004e3c:	e03d      	b.n	8004eba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e40:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e54:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10b      	bne.n	8004e76 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	617b      	str	r3, [r7, #20]
}
 8004e70:	bf00      	nop
 8004e72:	bf00      	nop
 8004e74:	e7fd      	b.n	8004e72 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	18d1      	adds	r1, r2, r3
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e84:	f7ff ff04 	bl	8004c90 <prvInsertTimerInActiveList>
					break;
 8004e88:	e017      	b.n	8004eba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e90:	f003 0302 	and.w	r3, r3, #2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d103      	bne.n	8004ea0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004e98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004e9a:	f000 fb87 	bl	80055ac <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e9e:	e00c      	b.n	8004eba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ea6:	f023 0301 	bic.w	r3, r3, #1
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004eb2:	e002      	b.n	8004eba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004eb4:	bf00      	nop
 8004eb6:	e000      	b.n	8004eba <prvProcessReceivedCommands+0x1a6>
					break;
 8004eb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004eba:	4b08      	ldr	r3, [pc, #32]	@ (8004edc <prvProcessReceivedCommands+0x1c8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	1d39      	adds	r1, r7, #4
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f7fe fb54 	bl	8003570 <xQueueReceive>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	f47f af26 	bne.w	8004d1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	3730      	adds	r7, #48	@ 0x30
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000dec 	.word	0x20000dec

08004ee0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ee6:	e049      	b.n	8004f7c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ee8:	4b2e      	ldr	r3, [pc, #184]	@ (8004fa4 <prvSwitchTimerLists+0xc4>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8004fa4 <prvSwitchTimerLists+0xc4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3304      	adds	r3, #4
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fe f825 	bl	8002f50 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004f14:	f003 0304 	and.w	r3, r3, #4
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d02f      	beq.n	8004f7c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4413      	add	r3, r2
 8004f24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f26:	68ba      	ldr	r2, [r7, #8]
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d90e      	bls.n	8004f4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	68ba      	ldr	r2, [r7, #8]
 8004f32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa4 <prvSwitchTimerLists+0xc4>)
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3304      	adds	r3, #4
 8004f42:	4619      	mov	r1, r3
 8004f44:	4610      	mov	r0, r2
 8004f46:	f7fd ffcb 	bl	8002ee0 <vListInsert>
 8004f4a:	e017      	b.n	8004f7c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	9300      	str	r3, [sp, #0]
 8004f50:	2300      	movs	r3, #0
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	2100      	movs	r1, #0
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7ff fd5a 	bl	8004a10 <xTimerGenericCommand>
 8004f5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10b      	bne.n	8004f7c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	603b      	str	r3, [r7, #0]
}
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
 8004f7a:	e7fd      	b.n	8004f78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f7c:	4b09      	ldr	r3, [pc, #36]	@ (8004fa4 <prvSwitchTimerLists+0xc4>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1b0      	bne.n	8004ee8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f86:	4b07      	ldr	r3, [pc, #28]	@ (8004fa4 <prvSwitchTimerLists+0xc4>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f8c:	4b06      	ldr	r3, [pc, #24]	@ (8004fa8 <prvSwitchTimerLists+0xc8>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a04      	ldr	r2, [pc, #16]	@ (8004fa4 <prvSwitchTimerLists+0xc4>)
 8004f92:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f94:	4a04      	ldr	r2, [pc, #16]	@ (8004fa8 <prvSwitchTimerLists+0xc8>)
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	6013      	str	r3, [r2, #0]
}
 8004f9a:	bf00      	nop
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	20000de4 	.word	0x20000de4
 8004fa8:	20000de8 	.word	0x20000de8

08004fac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fb2:	f000 f92b 	bl	800520c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fb6:	4b15      	ldr	r3, [pc, #84]	@ (800500c <prvCheckForValidListAndQueue+0x60>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d120      	bne.n	8005000 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004fbe:	4814      	ldr	r0, [pc, #80]	@ (8005010 <prvCheckForValidListAndQueue+0x64>)
 8004fc0:	f7fd ff40 	bl	8002e44 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004fc4:	4813      	ldr	r0, [pc, #76]	@ (8005014 <prvCheckForValidListAndQueue+0x68>)
 8004fc6:	f7fd ff3d 	bl	8002e44 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004fca:	4b13      	ldr	r3, [pc, #76]	@ (8005018 <prvCheckForValidListAndQueue+0x6c>)
 8004fcc:	4a10      	ldr	r2, [pc, #64]	@ (8005010 <prvCheckForValidListAndQueue+0x64>)
 8004fce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004fd0:	4b12      	ldr	r3, [pc, #72]	@ (800501c <prvCheckForValidListAndQueue+0x70>)
 8004fd2:	4a10      	ldr	r2, [pc, #64]	@ (8005014 <prvCheckForValidListAndQueue+0x68>)
 8004fd4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	9300      	str	r3, [sp, #0]
 8004fda:	4b11      	ldr	r3, [pc, #68]	@ (8005020 <prvCheckForValidListAndQueue+0x74>)
 8004fdc:	4a11      	ldr	r2, [pc, #68]	@ (8005024 <prvCheckForValidListAndQueue+0x78>)
 8004fde:	2110      	movs	r1, #16
 8004fe0:	200a      	movs	r0, #10
 8004fe2:	f7fe f849 	bl	8003078 <xQueueGenericCreateStatic>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4a08      	ldr	r2, [pc, #32]	@ (800500c <prvCheckForValidListAndQueue+0x60>)
 8004fea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004fec:	4b07      	ldr	r3, [pc, #28]	@ (800500c <prvCheckForValidListAndQueue+0x60>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ff4:	4b05      	ldr	r3, [pc, #20]	@ (800500c <prvCheckForValidListAndQueue+0x60>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	490b      	ldr	r1, [pc, #44]	@ (8005028 <prvCheckForValidListAndQueue+0x7c>)
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe fd2c 	bl	8003a58 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005000:	f000 f934 	bl	800526c <vPortExitCritical>
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	20000dec 	.word	0x20000dec
 8005010:	20000dbc 	.word	0x20000dbc
 8005014:	20000dd0 	.word	0x20000dd0
 8005018:	20000de4 	.word	0x20000de4
 800501c:	20000de8 	.word	0x20000de8
 8005020:	20000e98 	.word	0x20000e98
 8005024:	20000df8 	.word	0x20000df8
 8005028:	08005c18 	.word	0x08005c18

0800502c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3b04      	subs	r3, #4
 800503c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005044:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	3b04      	subs	r3, #4
 800504a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f023 0201 	bic.w	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	3b04      	subs	r3, #4
 800505a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800505c:	4a08      	ldr	r2, [pc, #32]	@ (8005080 <pxPortInitialiseStack+0x54>)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3b14      	subs	r3, #20
 8005066:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	3b20      	subs	r3, #32
 8005072:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005074:	68fb      	ldr	r3, [r7, #12]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr
 8005080:	08005085 	.word	0x08005085

08005084 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800508a:	2300      	movs	r3, #0
 800508c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800508e:	4b12      	ldr	r3, [pc, #72]	@ (80050d8 <prvTaskExitError+0x54>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005096:	d00b      	beq.n	80050b0 <prvTaskExitError+0x2c>
	__asm volatile
 8005098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509c:	f383 8811 	msr	BASEPRI, r3
 80050a0:	f3bf 8f6f 	isb	sy
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	60fb      	str	r3, [r7, #12]
}
 80050aa:	bf00      	nop
 80050ac:	bf00      	nop
 80050ae:	e7fd      	b.n	80050ac <prvTaskExitError+0x28>
	__asm volatile
 80050b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b4:	f383 8811 	msr	BASEPRI, r3
 80050b8:	f3bf 8f6f 	isb	sy
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	60bb      	str	r3, [r7, #8]
}
 80050c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80050c4:	bf00      	nop
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d0fc      	beq.n	80050c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop
 80050d0:	3714      	adds	r7, #20
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr
 80050d8:	2000000c 	.word	0x2000000c
 80050dc:	00000000 	.word	0x00000000

080050e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80050e0:	4b07      	ldr	r3, [pc, #28]	@ (8005100 <pxCurrentTCBConst2>)
 80050e2:	6819      	ldr	r1, [r3, #0]
 80050e4:	6808      	ldr	r0, [r1, #0]
 80050e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050ea:	f380 8809 	msr	PSP, r0
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f04f 0000 	mov.w	r0, #0
 80050f6:	f380 8811 	msr	BASEPRI, r0
 80050fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80050fe:	4770      	bx	lr

08005100 <pxCurrentTCBConst2>:
 8005100:	200008bc 	.word	0x200008bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop

08005108 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005108:	4806      	ldr	r0, [pc, #24]	@ (8005124 <prvPortStartFirstTask+0x1c>)
 800510a:	6800      	ldr	r0, [r0, #0]
 800510c:	6800      	ldr	r0, [r0, #0]
 800510e:	f380 8808 	msr	MSP, r0
 8005112:	b662      	cpsie	i
 8005114:	b661      	cpsie	f
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	f3bf 8f6f 	isb	sy
 800511e:	df00      	svc	0
 8005120:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005122:	bf00      	nop
 8005124:	e000ed08 	.word	0xe000ed08

08005128 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800512e:	4b32      	ldr	r3, [pc, #200]	@ (80051f8 <xPortStartScheduler+0xd0>)
 8005130:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	22ff      	movs	r2, #255	@ 0xff
 800513e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005150:	b2da      	uxtb	r2, r3
 8005152:	4b2a      	ldr	r3, [pc, #168]	@ (80051fc <xPortStartScheduler+0xd4>)
 8005154:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005156:	4b2a      	ldr	r3, [pc, #168]	@ (8005200 <xPortStartScheduler+0xd8>)
 8005158:	2207      	movs	r2, #7
 800515a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800515c:	e009      	b.n	8005172 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800515e:	4b28      	ldr	r3, [pc, #160]	@ (8005200 <xPortStartScheduler+0xd8>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3b01      	subs	r3, #1
 8005164:	4a26      	ldr	r2, [pc, #152]	@ (8005200 <xPortStartScheduler+0xd8>)
 8005166:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005168:	78fb      	ldrb	r3, [r7, #3]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	b2db      	uxtb	r3, r3
 8005170:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	b2db      	uxtb	r3, r3
 8005176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517a:	2b80      	cmp	r3, #128	@ 0x80
 800517c:	d0ef      	beq.n	800515e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800517e:	4b20      	ldr	r3, [pc, #128]	@ (8005200 <xPortStartScheduler+0xd8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1c3 0307 	rsb	r3, r3, #7
 8005186:	2b04      	cmp	r3, #4
 8005188:	d00b      	beq.n	80051a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800518a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800518e:	f383 8811 	msr	BASEPRI, r3
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	f3bf 8f4f 	dsb	sy
 800519a:	60bb      	str	r3, [r7, #8]
}
 800519c:	bf00      	nop
 800519e:	bf00      	nop
 80051a0:	e7fd      	b.n	800519e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80051a2:	4b17      	ldr	r3, [pc, #92]	@ (8005200 <xPortStartScheduler+0xd8>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	021b      	lsls	r3, r3, #8
 80051a8:	4a15      	ldr	r2, [pc, #84]	@ (8005200 <xPortStartScheduler+0xd8>)
 80051aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80051ac:	4b14      	ldr	r3, [pc, #80]	@ (8005200 <xPortStartScheduler+0xd8>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80051b4:	4a12      	ldr	r2, [pc, #72]	@ (8005200 <xPortStartScheduler+0xd8>)
 80051b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	b2da      	uxtb	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80051c0:	4b10      	ldr	r3, [pc, #64]	@ (8005204 <xPortStartScheduler+0xdc>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a0f      	ldr	r2, [pc, #60]	@ (8005204 <xPortStartScheduler+0xdc>)
 80051c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80051ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80051cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <xPortStartScheduler+0xdc>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005204 <xPortStartScheduler+0xdc>)
 80051d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80051d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051d8:	f000 f8b8 	bl	800534c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <xPortStartScheduler+0xe0>)
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051e2:	f7ff ff91 	bl	8005108 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051e6:	f7ff f86b 	bl	80042c0 <vTaskSwitchContext>
	prvTaskExitError();
 80051ea:	f7ff ff4b 	bl	8005084 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	e000e400 	.word	0xe000e400
 80051fc:	20000ee8 	.word	0x20000ee8
 8005200:	20000eec 	.word	0x20000eec
 8005204:	e000ed20 	.word	0xe000ed20
 8005208:	2000000c 	.word	0x2000000c

0800520c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	607b      	str	r3, [r7, #4]
}
 8005224:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005226:	4b0f      	ldr	r3, [pc, #60]	@ (8005264 <vPortEnterCritical+0x58>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	3301      	adds	r3, #1
 800522c:	4a0d      	ldr	r2, [pc, #52]	@ (8005264 <vPortEnterCritical+0x58>)
 800522e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005230:	4b0c      	ldr	r3, [pc, #48]	@ (8005264 <vPortEnterCritical+0x58>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d110      	bne.n	800525a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005238:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <vPortEnterCritical+0x5c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00b      	beq.n	800525a <vPortEnterCritical+0x4e>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	603b      	str	r3, [r7, #0]
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	e7fd      	b.n	8005256 <vPortEnterCritical+0x4a>
	}
}
 800525a:	bf00      	nop
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr
 8005264:	2000000c 	.word	0x2000000c
 8005268:	e000ed04 	.word	0xe000ed04

0800526c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005272:	4b12      	ldr	r3, [pc, #72]	@ (80052bc <vPortExitCritical+0x50>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10b      	bne.n	8005292 <vPortExitCritical+0x26>
	__asm volatile
 800527a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	607b      	str	r3, [r7, #4]
}
 800528c:	bf00      	nop
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005292:	4b0a      	ldr	r3, [pc, #40]	@ (80052bc <vPortExitCritical+0x50>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	3b01      	subs	r3, #1
 8005298:	4a08      	ldr	r2, [pc, #32]	@ (80052bc <vPortExitCritical+0x50>)
 800529a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800529c:	4b07      	ldr	r3, [pc, #28]	@ (80052bc <vPortExitCritical+0x50>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d105      	bne.n	80052b0 <vPortExitCritical+0x44>
 80052a4:	2300      	movs	r3, #0
 80052a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	f383 8811 	msr	BASEPRI, r3
}
 80052ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bc80      	pop	{r7}
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	2000000c 	.word	0x2000000c

080052c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052c0:	f3ef 8009 	mrs	r0, PSP
 80052c4:	f3bf 8f6f 	isb	sy
 80052c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <pxCurrentTCBConst>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052d0:	6010      	str	r0, [r2, #0]
 80052d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80052d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052da:	f380 8811 	msr	BASEPRI, r0
 80052de:	f7fe ffef 	bl	80042c0 <vTaskSwitchContext>
 80052e2:	f04f 0000 	mov.w	r0, #0
 80052e6:	f380 8811 	msr	BASEPRI, r0
 80052ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	6808      	ldr	r0, [r1, #0]
 80052f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80052f6:	f380 8809 	msr	PSP, r0
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	4770      	bx	lr

08005300 <pxCurrentTCBConst>:
 8005300:	200008bc 	.word	0x200008bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005304:	bf00      	nop
 8005306:	bf00      	nop

08005308 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	607b      	str	r3, [r7, #4]
}
 8005320:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005322:	f7fe ff13 	bl	800414c <xTaskIncrementTick>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d003      	beq.n	8005334 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800532c:	4b06      	ldr	r3, [pc, #24]	@ (8005348 <xPortSysTickHandler+0x40>)
 800532e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005332:	601a      	str	r2, [r3, #0]
 8005334:	2300      	movs	r3, #0
 8005336:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	f383 8811 	msr	BASEPRI, r3
}
 800533e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	e000ed04 	.word	0xe000ed04

0800534c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005350:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <vPortSetupTimerInterrupt+0x30>)
 8005352:	2200      	movs	r2, #0
 8005354:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005356:	4b0a      	ldr	r3, [pc, #40]	@ (8005380 <vPortSetupTimerInterrupt+0x34>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800535c:	4b09      	ldr	r3, [pc, #36]	@ (8005384 <vPortSetupTimerInterrupt+0x38>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a09      	ldr	r2, [pc, #36]	@ (8005388 <vPortSetupTimerInterrupt+0x3c>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	099b      	lsrs	r3, r3, #6
 8005368:	4a08      	ldr	r2, [pc, #32]	@ (800538c <vPortSetupTimerInterrupt+0x40>)
 800536a:	3b01      	subs	r3, #1
 800536c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800536e:	4b03      	ldr	r3, [pc, #12]	@ (800537c <vPortSetupTimerInterrupt+0x30>)
 8005370:	2207      	movs	r2, #7
 8005372:	601a      	str	r2, [r3, #0]
}
 8005374:	bf00      	nop
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr
 800537c:	e000e010 	.word	0xe000e010
 8005380:	e000e018 	.word	0xe000e018
 8005384:	20000000 	.word	0x20000000
 8005388:	10624dd3 	.word	0x10624dd3
 800538c:	e000e014 	.word	0xe000e014

08005390 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005396:	f3ef 8305 	mrs	r3, IPSR
 800539a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b0f      	cmp	r3, #15
 80053a0:	d915      	bls.n	80053ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80053a2:	4a17      	ldr	r2, [pc, #92]	@ (8005400 <vPortValidateInterruptPriority+0x70>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80053ac:	4b15      	ldr	r3, [pc, #84]	@ (8005404 <vPortValidateInterruptPriority+0x74>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	7afa      	ldrb	r2, [r7, #11]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d20b      	bcs.n	80053ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	607b      	str	r3, [r7, #4]
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	e7fd      	b.n	80053ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80053ce:	4b0e      	ldr	r3, [pc, #56]	@ (8005408 <vPortValidateInterruptPriority+0x78>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80053d6:	4b0d      	ldr	r3, [pc, #52]	@ (800540c <vPortValidateInterruptPriority+0x7c>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d90b      	bls.n	80053f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80053de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e2:	f383 8811 	msr	BASEPRI, r3
 80053e6:	f3bf 8f6f 	isb	sy
 80053ea:	f3bf 8f4f 	dsb	sy
 80053ee:	603b      	str	r3, [r7, #0]
}
 80053f0:	bf00      	nop
 80053f2:	bf00      	nop
 80053f4:	e7fd      	b.n	80053f2 <vPortValidateInterruptPriority+0x62>
	}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr
 8005400:	e000e3f0 	.word	0xe000e3f0
 8005404:	20000ee8 	.word	0x20000ee8
 8005408:	e000ed0c 	.word	0xe000ed0c
 800540c:	20000eec 	.word	0x20000eec

08005410 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b08a      	sub	sp, #40	@ 0x28
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005418:	2300      	movs	r3, #0
 800541a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800541c:	f7fe fddc 	bl	8003fd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005420:	4b5c      	ldr	r3, [pc, #368]	@ (8005594 <pvPortMalloc+0x184>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005428:	f000 f924 	bl	8005674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800542c:	4b5a      	ldr	r3, [pc, #360]	@ (8005598 <pvPortMalloc+0x188>)
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4013      	ands	r3, r2
 8005434:	2b00      	cmp	r3, #0
 8005436:	f040 8095 	bne.w	8005564 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01e      	beq.n	800547e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005440:	2208      	movs	r2, #8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	2b00      	cmp	r3, #0
 8005450:	d015      	beq.n	800547e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f023 0307 	bic.w	r3, r3, #7
 8005458:	3308      	adds	r3, #8
 800545a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f003 0307 	and.w	r3, r3, #7
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00b      	beq.n	800547e <pvPortMalloc+0x6e>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	617b      	str	r3, [r7, #20]
}
 8005478:	bf00      	nop
 800547a:	bf00      	nop
 800547c:	e7fd      	b.n	800547a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d06f      	beq.n	8005564 <pvPortMalloc+0x154>
 8005484:	4b45      	ldr	r3, [pc, #276]	@ (800559c <pvPortMalloc+0x18c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	429a      	cmp	r2, r3
 800548c:	d86a      	bhi.n	8005564 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800548e:	4b44      	ldr	r3, [pc, #272]	@ (80055a0 <pvPortMalloc+0x190>)
 8005490:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005492:	4b43      	ldr	r3, [pc, #268]	@ (80055a0 <pvPortMalloc+0x190>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005498:	e004      	b.n	80054a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800549a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800549c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80054a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d903      	bls.n	80054b6 <pvPortMalloc+0xa6>
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1f1      	bne.n	800549a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80054b6:	4b37      	ldr	r3, [pc, #220]	@ (8005594 <pvPortMalloc+0x184>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054bc:	429a      	cmp	r2, r3
 80054be:	d051      	beq.n	8005564 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2208      	movs	r2, #8
 80054c6:	4413      	add	r3, r2
 80054c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	6a3b      	ldr	r3, [r7, #32]
 80054d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80054d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	1ad2      	subs	r2, r2, r3
 80054da:	2308      	movs	r3, #8
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	429a      	cmp	r2, r3
 80054e0:	d920      	bls.n	8005524 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80054e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4413      	add	r3, r2
 80054e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d00b      	beq.n	800550c <pvPortMalloc+0xfc>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	613b      	str	r3, [r7, #16]
}
 8005506:	bf00      	nop
 8005508:	bf00      	nop
 800550a:	e7fd      	b.n	8005508 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	1ad2      	subs	r2, r2, r3
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800551e:	69b8      	ldr	r0, [r7, #24]
 8005520:	f000 f90a 	bl	8005738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005524:	4b1d      	ldr	r3, [pc, #116]	@ (800559c <pvPortMalloc+0x18c>)
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	4a1b      	ldr	r2, [pc, #108]	@ (800559c <pvPortMalloc+0x18c>)
 8005530:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005532:	4b1a      	ldr	r3, [pc, #104]	@ (800559c <pvPortMalloc+0x18c>)
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	4b1b      	ldr	r3, [pc, #108]	@ (80055a4 <pvPortMalloc+0x194>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	429a      	cmp	r2, r3
 800553c:	d203      	bcs.n	8005546 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800553e:	4b17      	ldr	r3, [pc, #92]	@ (800559c <pvPortMalloc+0x18c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a18      	ldr	r2, [pc, #96]	@ (80055a4 <pvPortMalloc+0x194>)
 8005544:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	685a      	ldr	r2, [r3, #4]
 800554a:	4b13      	ldr	r3, [pc, #76]	@ (8005598 <pvPortMalloc+0x188>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	431a      	orrs	r2, r3
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800555a:	4b13      	ldr	r3, [pc, #76]	@ (80055a8 <pvPortMalloc+0x198>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3301      	adds	r3, #1
 8005560:	4a11      	ldr	r2, [pc, #68]	@ (80055a8 <pvPortMalloc+0x198>)
 8005562:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005564:	f7fe fd46 	bl	8003ff4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	f003 0307 	and.w	r3, r3, #7
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00b      	beq.n	800558a <pvPortMalloc+0x17a>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	60fb      	str	r3, [r7, #12]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <pvPortMalloc+0x176>
	return pvReturn;
 800558a:	69fb      	ldr	r3, [r7, #28]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3728      	adds	r7, #40	@ 0x28
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20001af8 	.word	0x20001af8
 8005598:	20001b0c 	.word	0x20001b0c
 800559c:	20001afc 	.word	0x20001afc
 80055a0:	20001af0 	.word	0x20001af0
 80055a4:	20001b00 	.word	0x20001b00
 80055a8:	20001b04 	.word	0x20001b04

080055ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d04f      	beq.n	800565e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80055be:	2308      	movs	r3, #8
 80055c0:	425b      	negs	r3, r3
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4413      	add	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	4b25      	ldr	r3, [pc, #148]	@ (8005668 <vPortFree+0xbc>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <vPortFree+0x46>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	60fb      	str	r3, [r7, #12]
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	e7fd      	b.n	80055ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d00b      	beq.n	8005612 <vPortFree+0x66>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	60bb      	str	r3, [r7, #8]
}
 800560c:	bf00      	nop
 800560e:	bf00      	nop
 8005610:	e7fd      	b.n	800560e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	4b14      	ldr	r3, [pc, #80]	@ (8005668 <vPortFree+0xbc>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4013      	ands	r3, r2
 800561c:	2b00      	cmp	r3, #0
 800561e:	d01e      	beq.n	800565e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11a      	bne.n	800565e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	4b0e      	ldr	r3, [pc, #56]	@ (8005668 <vPortFree+0xbc>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	43db      	mvns	r3, r3
 8005632:	401a      	ands	r2, r3
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005638:	f7fe fcce 	bl	8003fd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	4b0a      	ldr	r3, [pc, #40]	@ (800566c <vPortFree+0xc0>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4413      	add	r3, r2
 8005646:	4a09      	ldr	r2, [pc, #36]	@ (800566c <vPortFree+0xc0>)
 8005648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800564a:	6938      	ldr	r0, [r7, #16]
 800564c:	f000 f874 	bl	8005738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005650:	4b07      	ldr	r3, [pc, #28]	@ (8005670 <vPortFree+0xc4>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3301      	adds	r3, #1
 8005656:	4a06      	ldr	r2, [pc, #24]	@ (8005670 <vPortFree+0xc4>)
 8005658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800565a:	f7fe fccb 	bl	8003ff4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800565e:	bf00      	nop
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	20001b0c 	.word	0x20001b0c
 800566c:	20001afc 	.word	0x20001afc
 8005670:	20001b08 	.word	0x20001b08

08005674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800567a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800567e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005680:	4b27      	ldr	r3, [pc, #156]	@ (8005720 <prvHeapInit+0xac>)
 8005682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f003 0307 	and.w	r3, r3, #7
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00c      	beq.n	80056a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	3307      	adds	r3, #7
 8005692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 0307 	bic.w	r3, r3, #7
 800569a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005720 <prvHeapInit+0xac>)
 80056a4:	4413      	add	r3, r2
 80056a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80056ac:	4a1d      	ldr	r2, [pc, #116]	@ (8005724 <prvHeapInit+0xb0>)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80056b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005724 <prvHeapInit+0xb0>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	4413      	add	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80056c0:	2208      	movs	r2, #8
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	1a9b      	subs	r3, r3, r2
 80056c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0307 	bic.w	r3, r3, #7
 80056ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4a15      	ldr	r2, [pc, #84]	@ (8005728 <prvHeapInit+0xb4>)
 80056d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80056d6:	4b14      	ldr	r3, [pc, #80]	@ (8005728 <prvHeapInit+0xb4>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2200      	movs	r2, #0
 80056dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80056de:	4b12      	ldr	r3, [pc, #72]	@ (8005728 <prvHeapInit+0xb4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	1ad2      	subs	r2, r2, r3
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80056f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005728 <prvHeapInit+0xb4>)
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	4a0a      	ldr	r2, [pc, #40]	@ (800572c <prvHeapInit+0xb8>)
 8005702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	4a09      	ldr	r2, [pc, #36]	@ (8005730 <prvHeapInit+0xbc>)
 800570a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800570c:	4b09      	ldr	r3, [pc, #36]	@ (8005734 <prvHeapInit+0xc0>)
 800570e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005712:	601a      	str	r2, [r3, #0]
}
 8005714:	bf00      	nop
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	bc80      	pop	{r7}
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20000ef0 	.word	0x20000ef0
 8005724:	20001af0 	.word	0x20001af0
 8005728:	20001af8 	.word	0x20001af8
 800572c:	20001b00 	.word	0x20001b00
 8005730:	20001afc 	.word	0x20001afc
 8005734:	20001b0c 	.word	0x20001b0c

08005738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005740:	4b27      	ldr	r3, [pc, #156]	@ (80057e0 <prvInsertBlockIntoFreeList+0xa8>)
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	e002      	b.n	800574c <prvInsertBlockIntoFreeList+0x14>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	429a      	cmp	r2, r3
 8005754:	d8f7      	bhi.n	8005746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	4413      	add	r3, r2
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	429a      	cmp	r2, r3
 8005766:	d108      	bne.n	800577a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	441a      	add	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	441a      	add	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d118      	bne.n	80057c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	4b14      	ldr	r3, [pc, #80]	@ (80057e4 <prvInsertBlockIntoFreeList+0xac>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	429a      	cmp	r2, r3
 8005798:	d00d      	beq.n	80057b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	685a      	ldr	r2, [r3, #4]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	441a      	add	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	e008      	b.n	80057c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80057b6:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <prvInsertBlockIntoFreeList+0xac>)
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	e003      	b.n	80057c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d002      	beq.n	80057d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	bc80      	pop	{r7}
 80057de:	4770      	bx	lr
 80057e0:	20001af0 	.word	0x20001af0
 80057e4:	20001af8 	.word	0x20001af8

080057e8 <memset>:
 80057e8:	4603      	mov	r3, r0
 80057ea:	4402      	add	r2, r0
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d100      	bne.n	80057f2 <memset+0xa>
 80057f0:	4770      	bx	lr
 80057f2:	f803 1b01 	strb.w	r1, [r3], #1
 80057f6:	e7f9      	b.n	80057ec <memset+0x4>

080057f8 <_reclaim_reent>:
 80057f8:	4b29      	ldr	r3, [pc, #164]	@ (80058a0 <_reclaim_reent+0xa8>)
 80057fa:	b570      	push	{r4, r5, r6, lr}
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4604      	mov	r4, r0
 8005800:	4283      	cmp	r3, r0
 8005802:	d04b      	beq.n	800589c <_reclaim_reent+0xa4>
 8005804:	69c3      	ldr	r3, [r0, #28]
 8005806:	b1ab      	cbz	r3, 8005834 <_reclaim_reent+0x3c>
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	b16b      	cbz	r3, 8005828 <_reclaim_reent+0x30>
 800580c:	2500      	movs	r5, #0
 800580e:	69e3      	ldr	r3, [r4, #28]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	5959      	ldr	r1, [r3, r5]
 8005814:	2900      	cmp	r1, #0
 8005816:	d13b      	bne.n	8005890 <_reclaim_reent+0x98>
 8005818:	3504      	adds	r5, #4
 800581a:	2d80      	cmp	r5, #128	@ 0x80
 800581c:	d1f7      	bne.n	800580e <_reclaim_reent+0x16>
 800581e:	69e3      	ldr	r3, [r4, #28]
 8005820:	4620      	mov	r0, r4
 8005822:	68d9      	ldr	r1, [r3, #12]
 8005824:	f000 f872 	bl	800590c <_free_r>
 8005828:	69e3      	ldr	r3, [r4, #28]
 800582a:	6819      	ldr	r1, [r3, #0]
 800582c:	b111      	cbz	r1, 8005834 <_reclaim_reent+0x3c>
 800582e:	4620      	mov	r0, r4
 8005830:	f000 f86c 	bl	800590c <_free_r>
 8005834:	6961      	ldr	r1, [r4, #20]
 8005836:	b111      	cbz	r1, 800583e <_reclaim_reent+0x46>
 8005838:	4620      	mov	r0, r4
 800583a:	f000 f867 	bl	800590c <_free_r>
 800583e:	69e1      	ldr	r1, [r4, #28]
 8005840:	b111      	cbz	r1, 8005848 <_reclaim_reent+0x50>
 8005842:	4620      	mov	r0, r4
 8005844:	f000 f862 	bl	800590c <_free_r>
 8005848:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800584a:	b111      	cbz	r1, 8005852 <_reclaim_reent+0x5a>
 800584c:	4620      	mov	r0, r4
 800584e:	f000 f85d 	bl	800590c <_free_r>
 8005852:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005854:	b111      	cbz	r1, 800585c <_reclaim_reent+0x64>
 8005856:	4620      	mov	r0, r4
 8005858:	f000 f858 	bl	800590c <_free_r>
 800585c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800585e:	b111      	cbz	r1, 8005866 <_reclaim_reent+0x6e>
 8005860:	4620      	mov	r0, r4
 8005862:	f000 f853 	bl	800590c <_free_r>
 8005866:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005868:	b111      	cbz	r1, 8005870 <_reclaim_reent+0x78>
 800586a:	4620      	mov	r0, r4
 800586c:	f000 f84e 	bl	800590c <_free_r>
 8005870:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8005872:	b111      	cbz	r1, 800587a <_reclaim_reent+0x82>
 8005874:	4620      	mov	r0, r4
 8005876:	f000 f849 	bl	800590c <_free_r>
 800587a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800587c:	b111      	cbz	r1, 8005884 <_reclaim_reent+0x8c>
 800587e:	4620      	mov	r0, r4
 8005880:	f000 f844 	bl	800590c <_free_r>
 8005884:	6a23      	ldr	r3, [r4, #32]
 8005886:	b14b      	cbz	r3, 800589c <_reclaim_reent+0xa4>
 8005888:	4620      	mov	r0, r4
 800588a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800588e:	4718      	bx	r3
 8005890:	680e      	ldr	r6, [r1, #0]
 8005892:	4620      	mov	r0, r4
 8005894:	f000 f83a 	bl	800590c <_free_r>
 8005898:	4631      	mov	r1, r6
 800589a:	e7bb      	b.n	8005814 <_reclaim_reent+0x1c>
 800589c:	bd70      	pop	{r4, r5, r6, pc}
 800589e:	bf00      	nop
 80058a0:	20000010 	.word	0x20000010

080058a4 <__libc_init_array>:
 80058a4:	b570      	push	{r4, r5, r6, lr}
 80058a6:	2600      	movs	r6, #0
 80058a8:	4d0c      	ldr	r5, [pc, #48]	@ (80058dc <__libc_init_array+0x38>)
 80058aa:	4c0d      	ldr	r4, [pc, #52]	@ (80058e0 <__libc_init_array+0x3c>)
 80058ac:	1b64      	subs	r4, r4, r5
 80058ae:	10a4      	asrs	r4, r4, #2
 80058b0:	42a6      	cmp	r6, r4
 80058b2:	d109      	bne.n	80058c8 <__libc_init_array+0x24>
 80058b4:	f000 f87e 	bl	80059b4 <_init>
 80058b8:	2600      	movs	r6, #0
 80058ba:	4d0a      	ldr	r5, [pc, #40]	@ (80058e4 <__libc_init_array+0x40>)
 80058bc:	4c0a      	ldr	r4, [pc, #40]	@ (80058e8 <__libc_init_array+0x44>)
 80058be:	1b64      	subs	r4, r4, r5
 80058c0:	10a4      	asrs	r4, r4, #2
 80058c2:	42a6      	cmp	r6, r4
 80058c4:	d105      	bne.n	80058d2 <__libc_init_array+0x2e>
 80058c6:	bd70      	pop	{r4, r5, r6, pc}
 80058c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058cc:	4798      	blx	r3
 80058ce:	3601      	adds	r6, #1
 80058d0:	e7ee      	b.n	80058b0 <__libc_init_array+0xc>
 80058d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058d6:	4798      	blx	r3
 80058d8:	3601      	adds	r6, #1
 80058da:	e7f2      	b.n	80058c2 <__libc_init_array+0x1e>
 80058dc:	08005cd8 	.word	0x08005cd8
 80058e0:	08005cd8 	.word	0x08005cd8
 80058e4:	08005cd8 	.word	0x08005cd8
 80058e8:	08005cdc 	.word	0x08005cdc

080058ec <__retarget_lock_acquire_recursive>:
 80058ec:	4770      	bx	lr

080058ee <__retarget_lock_release_recursive>:
 80058ee:	4770      	bx	lr

080058f0 <memcpy>:
 80058f0:	440a      	add	r2, r1
 80058f2:	4291      	cmp	r1, r2
 80058f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80058f8:	d100      	bne.n	80058fc <memcpy+0xc>
 80058fa:	4770      	bx	lr
 80058fc:	b510      	push	{r4, lr}
 80058fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005902:	4291      	cmp	r1, r2
 8005904:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005908:	d1f9      	bne.n	80058fe <memcpy+0xe>
 800590a:	bd10      	pop	{r4, pc}

0800590c <_free_r>:
 800590c:	b538      	push	{r3, r4, r5, lr}
 800590e:	4605      	mov	r5, r0
 8005910:	2900      	cmp	r1, #0
 8005912:	d040      	beq.n	8005996 <_free_r+0x8a>
 8005914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005918:	1f0c      	subs	r4, r1, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	bfb8      	it	lt
 800591e:	18e4      	addlt	r4, r4, r3
 8005920:	f000 f83c 	bl	800599c <__malloc_lock>
 8005924:	4a1c      	ldr	r2, [pc, #112]	@ (8005998 <_free_r+0x8c>)
 8005926:	6813      	ldr	r3, [r2, #0]
 8005928:	b933      	cbnz	r3, 8005938 <_free_r+0x2c>
 800592a:	6063      	str	r3, [r4, #4]
 800592c:	6014      	str	r4, [r2, #0]
 800592e:	4628      	mov	r0, r5
 8005930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005934:	f000 b838 	b.w	80059a8 <__malloc_unlock>
 8005938:	42a3      	cmp	r3, r4
 800593a:	d908      	bls.n	800594e <_free_r+0x42>
 800593c:	6820      	ldr	r0, [r4, #0]
 800593e:	1821      	adds	r1, r4, r0
 8005940:	428b      	cmp	r3, r1
 8005942:	bf01      	itttt	eq
 8005944:	6819      	ldreq	r1, [r3, #0]
 8005946:	685b      	ldreq	r3, [r3, #4]
 8005948:	1809      	addeq	r1, r1, r0
 800594a:	6021      	streq	r1, [r4, #0]
 800594c:	e7ed      	b.n	800592a <_free_r+0x1e>
 800594e:	461a      	mov	r2, r3
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	b10b      	cbz	r3, 8005958 <_free_r+0x4c>
 8005954:	42a3      	cmp	r3, r4
 8005956:	d9fa      	bls.n	800594e <_free_r+0x42>
 8005958:	6811      	ldr	r1, [r2, #0]
 800595a:	1850      	adds	r0, r2, r1
 800595c:	42a0      	cmp	r0, r4
 800595e:	d10b      	bne.n	8005978 <_free_r+0x6c>
 8005960:	6820      	ldr	r0, [r4, #0]
 8005962:	4401      	add	r1, r0
 8005964:	1850      	adds	r0, r2, r1
 8005966:	4283      	cmp	r3, r0
 8005968:	6011      	str	r1, [r2, #0]
 800596a:	d1e0      	bne.n	800592e <_free_r+0x22>
 800596c:	6818      	ldr	r0, [r3, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	4408      	add	r0, r1
 8005972:	6010      	str	r0, [r2, #0]
 8005974:	6053      	str	r3, [r2, #4]
 8005976:	e7da      	b.n	800592e <_free_r+0x22>
 8005978:	d902      	bls.n	8005980 <_free_r+0x74>
 800597a:	230c      	movs	r3, #12
 800597c:	602b      	str	r3, [r5, #0]
 800597e:	e7d6      	b.n	800592e <_free_r+0x22>
 8005980:	6820      	ldr	r0, [r4, #0]
 8005982:	1821      	adds	r1, r4, r0
 8005984:	428b      	cmp	r3, r1
 8005986:	bf01      	itttt	eq
 8005988:	6819      	ldreq	r1, [r3, #0]
 800598a:	685b      	ldreq	r3, [r3, #4]
 800598c:	1809      	addeq	r1, r1, r0
 800598e:	6021      	streq	r1, [r4, #0]
 8005990:	6063      	str	r3, [r4, #4]
 8005992:	6054      	str	r4, [r2, #4]
 8005994:	e7cb      	b.n	800592e <_free_r+0x22>
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	20001c4c 	.word	0x20001c4c

0800599c <__malloc_lock>:
 800599c:	4801      	ldr	r0, [pc, #4]	@ (80059a4 <__malloc_lock+0x8>)
 800599e:	f7ff bfa5 	b.w	80058ec <__retarget_lock_acquire_recursive>
 80059a2:	bf00      	nop
 80059a4:	20001c48 	.word	0x20001c48

080059a8 <__malloc_unlock>:
 80059a8:	4801      	ldr	r0, [pc, #4]	@ (80059b0 <__malloc_unlock+0x8>)
 80059aa:	f7ff bfa0 	b.w	80058ee <__retarget_lock_release_recursive>
 80059ae:	bf00      	nop
 80059b0:	20001c48 	.word	0x20001c48

080059b4 <_init>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr

080059c0 <_fini>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	bf00      	nop
 80059c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c6:	bc08      	pop	{r3}
 80059c8:	469e      	mov	lr, r3
 80059ca:	4770      	bx	lr
